// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TSCHPreUFFArchives.proto

package PreUFF

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	TSCH "github.com/zimbabao/docconv/iWork/TSCH"
	TSD "github.com/zimbabao/docconv/iWork/TSD"
	TSP "github.com/zimbabao/docconv/iWork/TSP"
	TSS "github.com/zimbabao/docconv/iWork/TSS"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChartInfoArchive struct {
	Super                               *TSD.DrawableArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ChartModel                          *ChartModelArchive                `protobuf:"bytes,2,req,name=chart_model,json=chartModel" json:"chart_model,omitempty"`
	Style                               *TSP.Reference                    `protobuf:"bytes,3,opt,name=style" json:"style,omitempty"`
	ChartType                           *TSCH.ChartType                   `protobuf:"varint,4,req,name=chart_type,json=chartType,enum=TSCH.ChartType" json:"chart_type,omitempty"`
	LegendModel                         *LegendModelArchive               `protobuf:"bytes,5,opt,name=legend_model,json=legendModel" json:"legend_model,omitempty"`
	InnerChartFrame                     *TSCH.RectArchive                 `protobuf:"bytes,6,req,name=inner_chart_frame,json=innerChartFrame" json:"inner_chart_frame,omitempty"`
	ValueAxisStyles                     []*TSP.Reference                  `protobuf:"bytes,7,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	CategoryAxisStyles                  []*TSP.Reference                  `protobuf:"bytes,8,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	ValueAxisNonstyles                  []*TSP.Reference                  `protobuf:"bytes,9,rep,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisNonstyles               []*TSP.Reference                  `protobuf:"bytes,10,rep,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles                   []*TSP.Reference                  `protobuf:"bytes,11,rep,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles                 *TSCH.SparseReferenceArrayArchive `protobuf:"bytes,12,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonStyles                     *TSCH.SparseReferenceArrayArchive `protobuf:"bytes,13,opt,name=series_non_styles,json=seriesNonStyles" json:"series_non_styles,omitempty"`
	NonStyle                            *TSP.Reference                    `protobuf:"bytes,14,opt,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	Mediator                            *TSP.Reference                    `protobuf:"bytes,15,opt,name=mediator" json:"mediator,omitempty"`
	CdePreviewOrigin                    *TSP.Point                        `protobuf:"bytes,16,opt,name=cde_preview_origin,json=cdePreviewOrigin" json:"cde_preview_origin,omitempty"`
	ChartStylePreset                    *TSP.Reference                    `protobuf:"bytes,17,opt,name=chart_style_preset,json=chartStylePreset" json:"chart_style_preset,omitempty"`
	ParagraphStyles                     []*TSP.Reference                  `protobuf:"bytes,18,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	LastRowSectedInTheCde               *int32                            `protobuf:"varint,19,opt,name=last_row_sected_in_the_cde,json=lastRowSectedInTheCde" json:"last_row_sected_in_the_cde,omitempty"`
	LastColumnSectedInTheCde            *int32                            `protobuf:"varint,20,opt,name=last_column_sected_in_the_cde,json=lastColumnSectedInTheCde" json:"last_column_sected_in_the_cde,omitempty"`
	ChartStylePresetIndex               *int32                            `protobuf:"varint,21,opt,name=chart_style_preset_index,json=chartStylePresetIndex" json:"chart_style_preset_index,omitempty"`
	NeedsCalcEngineDeferredImportAction *bool                             `protobuf:"varint,22,opt,name=needs_calc_engine_deferred_import_action,json=needsCalcEngineDeferredImportAction" json:"needs_calc_engine_deferred_import_action,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                          `json:"-"`
	XXX_unrecognized                    []byte                            `json:"-"`
	XXX_sizecache                       int32                             `json:"-"`
}

func (m *ChartInfoArchive) Reset()         { *m = ChartInfoArchive{} }
func (m *ChartInfoArchive) String() string { return proto.CompactTextString(m) }
func (*ChartInfoArchive) ProtoMessage()    {}
func (*ChartInfoArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{0}
}

func (m *ChartInfoArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartInfoArchive.Unmarshal(m, b)
}
func (m *ChartInfoArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartInfoArchive.Marshal(b, m, deterministic)
}
func (m *ChartInfoArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartInfoArchive.Merge(m, src)
}
func (m *ChartInfoArchive) XXX_Size() int {
	return xxx_messageInfo_ChartInfoArchive.Size(m)
}
func (m *ChartInfoArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartInfoArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartInfoArchive proto.InternalMessageInfo

func (m *ChartInfoArchive) GetSuper() *TSD.DrawableArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartInfoArchive) GetChartModel() *ChartModelArchive {
	if m != nil {
		return m.ChartModel
	}
	return nil
}

func (m *ChartInfoArchive) GetStyle() *TSP.Reference {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *ChartInfoArchive) GetChartType() TSCH.ChartType {
	if m != nil && m.ChartType != nil {
		return *m.ChartType
	}
	return TSCH.ChartType_undefinedChartType
}

func (m *ChartInfoArchive) GetLegendModel() *LegendModelArchive {
	if m != nil {
		return m.LegendModel
	}
	return nil
}

func (m *ChartInfoArchive) GetInnerChartFrame() *TSCH.RectArchive {
	if m != nil {
		return m.InnerChartFrame
	}
	return nil
}

func (m *ChartInfoArchive) GetValueAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.ValueAxisStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetCategoryAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.CategoryAxisStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetValueAxisNonstyles() []*TSP.Reference {
	if m != nil {
		return m.ValueAxisNonstyles
	}
	return nil
}

func (m *ChartInfoArchive) GetCategoryAxisNonstyles() []*TSP.Reference {
	if m != nil {
		return m.CategoryAxisNonstyles
	}
	return nil
}

func (m *ChartInfoArchive) GetSeriesThemeStyles() []*TSP.Reference {
	if m != nil {
		return m.SeriesThemeStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetSeriesPrivateStyles() *TSCH.SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesPrivateStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetSeriesNonStyles() *TSCH.SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesNonStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetNonStyle() *TSP.Reference {
	if m != nil {
		return m.NonStyle
	}
	return nil
}

func (m *ChartInfoArchive) GetMediator() *TSP.Reference {
	if m != nil {
		return m.Mediator
	}
	return nil
}

func (m *ChartInfoArchive) GetCdePreviewOrigin() *TSP.Point {
	if m != nil {
		return m.CdePreviewOrigin
	}
	return nil
}

func (m *ChartInfoArchive) GetChartStylePreset() *TSP.Reference {
	if m != nil {
		return m.ChartStylePreset
	}
	return nil
}

func (m *ChartInfoArchive) GetParagraphStyles() []*TSP.Reference {
	if m != nil {
		return m.ParagraphStyles
	}
	return nil
}

func (m *ChartInfoArchive) GetLastRowSectedInTheCde() int32 {
	if m != nil && m.LastRowSectedInTheCde != nil {
		return *m.LastRowSectedInTheCde
	}
	return 0
}

func (m *ChartInfoArchive) GetLastColumnSectedInTheCde() int32 {
	if m != nil && m.LastColumnSectedInTheCde != nil {
		return *m.LastColumnSectedInTheCde
	}
	return 0
}

func (m *ChartInfoArchive) GetChartStylePresetIndex() int32 {
	if m != nil && m.ChartStylePresetIndex != nil {
		return *m.ChartStylePresetIndex
	}
	return 0
}

func (m *ChartInfoArchive) GetNeedsCalcEngineDeferredImportAction() bool {
	if m != nil && m.NeedsCalcEngineDeferredImportAction != nil {
		return *m.NeedsCalcEngineDeferredImportAction
	}
	return false
}

type LegendModelArchive struct {
	Info                 *TSP.Reference    `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Frame                *TSCH.RectArchive `protobuf:"bytes,2,req,name=frame" json:"frame,omitempty"`
	Style                *TSP.Reference    `protobuf:"bytes,3,req,name=style" json:"style,omitempty"`
	NonStyle             *TSP.Reference    `protobuf:"bytes,4,req,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LegendModelArchive) Reset()         { *m = LegendModelArchive{} }
func (m *LegendModelArchive) String() string { return proto.CompactTextString(m) }
func (*LegendModelArchive) ProtoMessage()    {}
func (*LegendModelArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{1}
}

func (m *LegendModelArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegendModelArchive.Unmarshal(m, b)
}
func (m *LegendModelArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegendModelArchive.Marshal(b, m, deterministic)
}
func (m *LegendModelArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegendModelArchive.Merge(m, src)
}
func (m *LegendModelArchive) XXX_Size() int {
	return xxx_messageInfo_LegendModelArchive.Size(m)
}
func (m *LegendModelArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_LegendModelArchive.DiscardUnknown(m)
}

var xxx_messageInfo_LegendModelArchive proto.InternalMessageInfo

func (m *LegendModelArchive) GetInfo() *TSP.Reference {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *LegendModelArchive) GetFrame() *TSCH.RectArchive {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *LegendModelArchive) GetStyle() *TSP.Reference {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *LegendModelArchive) GetNonStyle() *TSP.Reference {
	if m != nil {
		return m.NonStyle
	}
	return nil
}

type ChartModelArchive struct {
	Info                 *TSP.Reference    `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Grid                 *TSP.Reference    `protobuf:"bytes,2,req,name=grid" json:"grid,omitempty"`
	SeriesTypes          []uint32          `protobuf:"varint,3,rep,name=series_types,json=seriesTypes" json:"series_types,omitempty"`
	ScatterFormat        *uint32           `protobuf:"varint,4,opt,name=scatter_format,json=scatterFormat" json:"scatter_format,omitempty"`
	InlineGrid           *ChartGridArchive `protobuf:"bytes,5,opt,name=inline_grid,json=inlineGrid" json:"inline_grid,omitempty"`
	MultidatasetIndex    *uint32           `protobuf:"varint,6,opt,name=multidataset_index,json=multidatasetIndex" json:"multidataset_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChartModelArchive) Reset()         { *m = ChartModelArchive{} }
func (m *ChartModelArchive) String() string { return proto.CompactTextString(m) }
func (*ChartModelArchive) ProtoMessage()    {}
func (*ChartModelArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{2}
}

func (m *ChartModelArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartModelArchive.Unmarshal(m, b)
}
func (m *ChartModelArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartModelArchive.Marshal(b, m, deterministic)
}
func (m *ChartModelArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartModelArchive.Merge(m, src)
}
func (m *ChartModelArchive) XXX_Size() int {
	return xxx_messageInfo_ChartModelArchive.Size(m)
}
func (m *ChartModelArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartModelArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartModelArchive proto.InternalMessageInfo

func (m *ChartModelArchive) GetInfo() *TSP.Reference {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ChartModelArchive) GetGrid() *TSP.Reference {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *ChartModelArchive) GetSeriesTypes() []uint32 {
	if m != nil {
		return m.SeriesTypes
	}
	return nil
}

func (m *ChartModelArchive) GetScatterFormat() uint32 {
	if m != nil && m.ScatterFormat != nil {
		return *m.ScatterFormat
	}
	return 0
}

func (m *ChartModelArchive) GetInlineGrid() *ChartGridArchive {
	if m != nil {
		return m.InlineGrid
	}
	return nil
}

func (m *ChartModelArchive) GetMultidatasetIndex() uint32 {
	if m != nil && m.MultidatasetIndex != nil {
		return *m.MultidatasetIndex
	}
	return 0
}

type ChartGridArchive struct {
	Direction            *int32                       `protobuf:"varint,1,req,name=direction" json:"direction,omitempty"`
	RowName              []string                     `protobuf:"bytes,2,rep,name=row_name,json=rowName" json:"row_name,omitempty"`
	ColumnName           []string                     `protobuf:"bytes,3,rep,name=column_name,json=columnName" json:"column_name,omitempty"`
	ValueRow             []*ChartGridArchive_ValueRow `protobuf:"bytes,4,rep,name=value_row,json=valueRow" json:"value_row,omitempty"`
	Dirty                *bool                        `protobuf:"varint,6,req,name=dirty" json:"dirty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ChartGridArchive) Reset()         { *m = ChartGridArchive{} }
func (m *ChartGridArchive) String() string { return proto.CompactTextString(m) }
func (*ChartGridArchive) ProtoMessage()    {}
func (*ChartGridArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{3}
}

func (m *ChartGridArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartGridArchive.Unmarshal(m, b)
}
func (m *ChartGridArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartGridArchive.Marshal(b, m, deterministic)
}
func (m *ChartGridArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartGridArchive.Merge(m, src)
}
func (m *ChartGridArchive) XXX_Size() int {
	return xxx_messageInfo_ChartGridArchive.Size(m)
}
func (m *ChartGridArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartGridArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartGridArchive proto.InternalMessageInfo

func (m *ChartGridArchive) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *ChartGridArchive) GetRowName() []string {
	if m != nil {
		return m.RowName
	}
	return nil
}

func (m *ChartGridArchive) GetColumnName() []string {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *ChartGridArchive) GetValueRow() []*ChartGridArchive_ValueRow {
	if m != nil {
		return m.ValueRow
	}
	return nil
}

func (m *ChartGridArchive) GetDirty() bool {
	if m != nil && m.Dirty != nil {
		return *m.Dirty
	}
	return false
}

type ChartGridArchive_ValueRow struct {
	Value                []float64 `protobuf:"fixed64,1,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChartGridArchive_ValueRow) Reset()         { *m = ChartGridArchive_ValueRow{} }
func (m *ChartGridArchive_ValueRow) String() string { return proto.CompactTextString(m) }
func (*ChartGridArchive_ValueRow) ProtoMessage()    {}
func (*ChartGridArchive_ValueRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{3, 0}
}

func (m *ChartGridArchive_ValueRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartGridArchive_ValueRow.Unmarshal(m, b)
}
func (m *ChartGridArchive_ValueRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartGridArchive_ValueRow.Marshal(b, m, deterministic)
}
func (m *ChartGridArchive_ValueRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartGridArchive_ValueRow.Merge(m, src)
}
func (m *ChartGridArchive_ValueRow) XXX_Size() int {
	return xxx_messageInfo_ChartGridArchive_ValueRow.Size(m)
}
func (m *ChartGridArchive_ValueRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartGridArchive_ValueRow.DiscardUnknown(m)
}

var xxx_messageInfo_ChartGridArchive_ValueRow proto.InternalMessageInfo

func (m *ChartGridArchive_ValueRow) GetValue() []float64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChartsNumberFormatArchive struct {
	ValueType                                *TSCH.NumberValueType     `protobuf:"varint,1,req,name=value_type,json=valueType,enum=TSCH.NumberValueType" json:"value_type,omitempty"`
	FormatString                             *string                   `protobuf:"bytes,2,opt,name=format_string,json=formatString" json:"format_string,omitempty"`
	DecimalPlaces                            *uint32                   `protobuf:"varint,3,req,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
	CurrencyCode                             *string                   `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	NegativeStyle                            *TSCH.NegativeNumberStyle `protobuf:"varint,5,req,name=negative_style,json=negativeStyle,enum=TSCH.NegativeNumberStyle" json:"negative_style,omitempty"`
	ShowThousandsSeparator                   *bool                     `protobuf:"varint,6,req,name=show_thousands_separator,json=showThousandsSeparator" json:"show_thousands_separator,omitempty"`
	FractionAccuracy                         *TSCH.FractionAccuracy    `protobuf:"varint,7,req,name=fraction_accuracy,json=fractionAccuracy,enum=TSCH.FractionAccuracy" json:"fraction_accuracy,omitempty"`
	SuffixString                             *string                   `protobuf:"bytes,8,opt,name=suffix_string,json=suffixString" json:"suffix_string,omitempty"`
	Base                                     *uint32                   `protobuf:"varint,9,req,name=base" json:"base,omitempty"`
	BasePlaces                               *uint32                   `protobuf:"varint,10,req,name=base_places,json=basePlaces" json:"base_places,omitempty"`
	BaseUseMinusSign                         *bool                     `protobuf:"varint,11,req,name=base_use_minus_sign,json=baseUseMinusSign" json:"base_use_minus_sign,omitempty"`
	UseAccountingStyle                       *bool                     `protobuf:"varint,12,req,name=use_accounting_style,json=useAccountingStyle" json:"use_accounting_style,omitempty"`
	IsCustom                                 *bool                     `protobuf:"varint,13,req,name=is_custom,json=isCustom" json:"is_custom,omitempty"`
	ScaleFactor                              *float64                  `protobuf:"fixed64,14,req,name=scale_factor,json=scaleFactor" json:"scale_factor,omitempty"`
	InterstitialStrings                      []string                  `protobuf:"bytes,15,rep,name=interstitial_strings,json=interstitialStrings" json:"interstitial_strings,omitempty"`
	InterstitialStringInsertionIndexes       *TSP.IndexSet             `protobuf:"bytes,16,req,name=interstitial_string_insertion_indexes,json=interstitialStringInsertionIndexes" json:"interstitial_string_insertion_indexes,omitempty"`
	IndexFromRightOfLastDigitPlaceholder     *uint32                   `protobuf:"varint,17,req,name=index_from_right_of_last_digit_placeholder,json=indexFromRightOfLastDigitPlaceholder" json:"index_from_right_of_last_digit_placeholder,omitempty"`
	IsTextFormat                             *bool                     `protobuf:"varint,18,req,name=is_text_format,json=isTextFormat" json:"is_text_format,omitempty"`
	MinimumIntegerWidth                      *uint32                   `protobuf:"varint,19,req,name=minimum_integer_width,json=minimumIntegerWidth" json:"minimum_integer_width,omitempty"`
	DecimalWidth                             *uint32                   `protobuf:"varint,20,req,name=decimal_width,json=decimalWidth" json:"decimal_width,omitempty"`
	NumberOfNonSpaceIntegerPlaceholderDigits *uint32                   `protobuf:"varint,21,req,name=number_of_non_space_integer_placeholder_digits,json=numberOfNonSpaceIntegerPlaceholderDigits" json:"number_of_non_space_integer_placeholder_digits,omitempty"`
	NumberOfNonSpaceDecimalPlaceholderDigits *uint32                   `protobuf:"varint,22,req,name=number_of_non_space_decimal_placeholder_digits,json=numberOfNonSpaceDecimalPlaceholderDigits" json:"number_of_non_space_decimal_placeholder_digits,omitempty"`
	FormatName                               *string                   `protobuf:"bytes,23,opt,name=format_name,json=formatName" json:"format_name,omitempty"`
	PrefixString                             *string                   `protobuf:"bytes,24,opt,name=prefix_string,json=prefixString" json:"prefix_string,omitempty"`
	XXX_NoUnkeyedLiteral                     struct{}                  `json:"-"`
	XXX_unrecognized                         []byte                    `json:"-"`
	XXX_sizecache                            int32                     `json:"-"`
}

func (m *ChartsNumberFormatArchive) Reset()         { *m = ChartsNumberFormatArchive{} }
func (m *ChartsNumberFormatArchive) String() string { return proto.CompactTextString(m) }
func (*ChartsNumberFormatArchive) ProtoMessage()    {}
func (*ChartsNumberFormatArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{4}
}

func (m *ChartsNumberFormatArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartsNumberFormatArchive.Unmarshal(m, b)
}
func (m *ChartsNumberFormatArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartsNumberFormatArchive.Marshal(b, m, deterministic)
}
func (m *ChartsNumberFormatArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartsNumberFormatArchive.Merge(m, src)
}
func (m *ChartsNumberFormatArchive) XXX_Size() int {
	return xxx_messageInfo_ChartsNumberFormatArchive.Size(m)
}
func (m *ChartsNumberFormatArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartsNumberFormatArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartsNumberFormatArchive proto.InternalMessageInfo

func (m *ChartsNumberFormatArchive) GetValueType() TSCH.NumberValueType {
	if m != nil && m.ValueType != nil {
		return *m.ValueType
	}
	return TSCH.NumberValueType_numberValueTypeDecimal
}

func (m *ChartsNumberFormatArchive) GetFormatString() string {
	if m != nil && m.FormatString != nil {
		return *m.FormatString
	}
	return ""
}

func (m *ChartsNumberFormatArchive) GetDecimalPlaces() uint32 {
	if m != nil && m.DecimalPlaces != nil {
		return *m.DecimalPlaces
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetCurrencyCode() string {
	if m != nil && m.CurrencyCode != nil {
		return *m.CurrencyCode
	}
	return ""
}

func (m *ChartsNumberFormatArchive) GetNegativeStyle() TSCH.NegativeNumberStyle {
	if m != nil && m.NegativeStyle != nil {
		return *m.NegativeStyle
	}
	return TSCH.NegativeNumberStyle_negativeNumberStyleMinus
}

func (m *ChartsNumberFormatArchive) GetShowThousandsSeparator() bool {
	if m != nil && m.ShowThousandsSeparator != nil {
		return *m.ShowThousandsSeparator
	}
	return false
}

func (m *ChartsNumberFormatArchive) GetFractionAccuracy() TSCH.FractionAccuracy {
	if m != nil && m.FractionAccuracy != nil {
		return *m.FractionAccuracy
	}
	return TSCH.FractionAccuracy_fractionAccuracyConflicting
}

func (m *ChartsNumberFormatArchive) GetSuffixString() string {
	if m != nil && m.SuffixString != nil {
		return *m.SuffixString
	}
	return ""
}

func (m *ChartsNumberFormatArchive) GetBase() uint32 {
	if m != nil && m.Base != nil {
		return *m.Base
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetBasePlaces() uint32 {
	if m != nil && m.BasePlaces != nil {
		return *m.BasePlaces
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetBaseUseMinusSign() bool {
	if m != nil && m.BaseUseMinusSign != nil {
		return *m.BaseUseMinusSign
	}
	return false
}

func (m *ChartsNumberFormatArchive) GetUseAccountingStyle() bool {
	if m != nil && m.UseAccountingStyle != nil {
		return *m.UseAccountingStyle
	}
	return false
}

func (m *ChartsNumberFormatArchive) GetIsCustom() bool {
	if m != nil && m.IsCustom != nil {
		return *m.IsCustom
	}
	return false
}

func (m *ChartsNumberFormatArchive) GetScaleFactor() float64 {
	if m != nil && m.ScaleFactor != nil {
		return *m.ScaleFactor
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetInterstitialStrings() []string {
	if m != nil {
		return m.InterstitialStrings
	}
	return nil
}

func (m *ChartsNumberFormatArchive) GetInterstitialStringInsertionIndexes() *TSP.IndexSet {
	if m != nil {
		return m.InterstitialStringInsertionIndexes
	}
	return nil
}

func (m *ChartsNumberFormatArchive) GetIndexFromRightOfLastDigitPlaceholder() uint32 {
	if m != nil && m.IndexFromRightOfLastDigitPlaceholder != nil {
		return *m.IndexFromRightOfLastDigitPlaceholder
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetIsTextFormat() bool {
	if m != nil && m.IsTextFormat != nil {
		return *m.IsTextFormat
	}
	return false
}

func (m *ChartsNumberFormatArchive) GetMinimumIntegerWidth() uint32 {
	if m != nil && m.MinimumIntegerWidth != nil {
		return *m.MinimumIntegerWidth
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetDecimalWidth() uint32 {
	if m != nil && m.DecimalWidth != nil {
		return *m.DecimalWidth
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetNumberOfNonSpaceIntegerPlaceholderDigits() uint32 {
	if m != nil && m.NumberOfNonSpaceIntegerPlaceholderDigits != nil {
		return *m.NumberOfNonSpaceIntegerPlaceholderDigits
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetNumberOfNonSpaceDecimalPlaceholderDigits() uint32 {
	if m != nil && m.NumberOfNonSpaceDecimalPlaceholderDigits != nil {
		return *m.NumberOfNonSpaceDecimalPlaceholderDigits
	}
	return 0
}

func (m *ChartsNumberFormatArchive) GetFormatName() string {
	if m != nil && m.FormatName != nil {
		return *m.FormatName
	}
	return ""
}

func (m *ChartsNumberFormatArchive) GetPrefixString() string {
	if m != nil && m.PrefixString != nil {
		return *m.PrefixString
	}
	return ""
}

type ChartStyleArchive struct {
	Super                                                              *TSS.StyleArchive                   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartinfodefaultbackgroundfill                                 *TSD.FillArchive                    `protobuf:"bytes,10,opt,name=tschchartinfodefaultbackgroundfill" json:"tschchartinfodefaultbackgroundfill,omitempty"`
	Tschchartinfodefaultbackgroundstroke                               *TSD.StrokeArchive                  `protobuf:"bytes,11,opt,name=tschchartinfodefaultbackgroundstroke" json:"tschchartinfodefaultbackgroundstroke,omitempty"`
	Tschchartinfodefaultgridbackgroundfill                             *TSD.FillArchive                    `protobuf:"bytes,12,opt,name=tschchartinfodefaultgridbackgroundfill" json:"tschchartinfodefaultgridbackgroundfill,omitempty"`
	Tschchartinfodefaultintersetgap                                    *float32                            `protobuf:"fixed32,13,opt,name=tschchartinfodefaultintersetgap" json:"tschchartinfodefaultintersetgap,omitempty"`
	Tschchartinfodefaultinterbargap                                    *float32                            `protobuf:"fixed32,14,opt,name=tschchartinfodefaultinterbargap" json:"tschchartinfodefaultinterbargap,omitempty"`
	Tschchartinfodefaultshowborder                                     *bool                               `protobuf:"varint,15,opt,name=tschchartinfodefaultshowborder" json:"tschchartinfodefaultshowborder,omitempty"`
	Tschchartinfodefaultborderstroke                                   *TSD.StrokeArchive                  `protobuf:"bytes,16,opt,name=tschchartinfodefaultborderstroke" json:"tschchartinfodefaultborderstroke,omitempty"`
	Tschchartinfodefaulttitlecolor                                     *TSP.Color                          `protobuf:"bytes,18,opt,name=tschchartinfodefaulttitlecolor" json:"tschchartinfodefaulttitlecolor,omitempty"`
	Tschchartinfodefaultgridbackgroundopacity                          *float32                            `protobuf:"fixed32,19,opt,name=tschchartinfodefaultgridbackgroundopacity" json:"tschchartinfodefaultgridbackgroundopacity,omitempty"`
	Tschchartinfodefaultcombinelayers                                  *bool                               `protobuf:"varint,20,opt,name=tschchartinfodefaultcombinelayers" json:"tschchartinfodefaultcombinelayers,omitempty"`
	Tschchartinfodefaultbordershadow                                   *TSD.ShadowArchive                  `protobuf:"bytes,21,opt,name=tschchartinfodefaultbordershadow" json:"tschchartinfodefaultbordershadow,omitempty"`
	Tschchartinfodefaultborderopacity                                  *float32                            `protobuf:"fixed32,22,opt,name=tschchartinfodefaultborderopacity" json:"tschchartinfodefaultborderopacity,omitempty"`
	Tschchartinfodefaulttitleparagraphstyleindex                       *int32                              `protobuf:"varint,23,opt,name=tschchartinfodefaulttitleparagraphstyleindex" json:"tschchartinfodefaulttitleparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedmasterfontfamily                     *string                             `protobuf:"bytes,24,opt,name=tschchartinfodefaultdeprecatedmasterfontfamily" json:"tschchartinfodefaultdeprecatedmasterfontfamily,omitempty"`
	Tschchartinfodefaultdeprecatedmasterfontnamedsize                  *int32                              `protobuf:"varint,25,opt,name=tschchartinfodefaultdeprecatedmasterfontnamedsize" json:"tschchartinfodefaultdeprecatedmasterfontnamedsize,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex *int32                              `protobuf:"varint,30,opt,name=tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex" json:"tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex *int32                              `protobuf:"varint,31,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex" json:"tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationshadow              *TSD.ShadowArchive                  `protobuf:"bytes,32,opt,name=tschchartinfodefaultdeprecatedtrendlineequationshadow" json:"tschchartinfodefaultdeprecatedtrendlineequationshadow,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredshadow              *TSD.ShadowArchive                  `protobuf:"bytes,33,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredshadow" json:"tschchartinfodefaultdeprecatedtrendlinersquaredshadow,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationopacity             *float32                            `protobuf:"fixed32,34,opt,name=tschchartinfodefaultdeprecatedtrendlineequationopacity" json:"tschchartinfodefaultdeprecatedtrendlineequationopacity,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredopacity             *float32                            `protobuf:"fixed32,35,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredopacity" json:"tschchartinfodefaultdeprecatedtrendlinersquaredopacity,omitempty"`
	Tschchartinfobardeprecated3Dshadow                                 *TSD.ShadowArchive                  `protobuf:"bytes,308,opt,name=tschchartinfobardeprecated3dshadow" json:"tschchartinfobardeprecated3dshadow,omitempty"`
	Tschchartinfocolumndeprecated3Dshadow                              *TSD.ShadowArchive                  `protobuf:"bytes,309,opt,name=tschchartinfocolumndeprecated3dshadow" json:"tschchartinfocolumndeprecated3dshadow,omitempty"`
	Tschchartinfolinedeprecated3Dshadow                                *TSD.ShadowArchive                  `protobuf:"bytes,310,opt,name=tschchartinfolinedeprecated3dshadow" json:"tschchartinfolinedeprecated3dshadow,omitempty"`
	Tschchartinfoareadeprecated3Dshadow                                *TSD.ShadowArchive                  `protobuf:"bytes,311,opt,name=tschchartinfoareadeprecated3dshadow" json:"tschchartinfoareadeprecated3dshadow,omitempty"`
	Tschchartinfopiedeprecated3Dshadow                                 *TSD.ShadowArchive                  `protobuf:"bytes,312,opt,name=tschchartinfopiedeprecated3dshadow" json:"tschchartinfopiedeprecated3dshadow,omitempty"`
	Tschchartinfodefault3Dlightingpackage                              *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,313,opt,name=tschchartinfodefault3dlightingpackage" json:"tschchartinfodefault3dlightingpackage,omitempty"`
	Tschchartinfocolumn3Dlightingpackage                               *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,314,opt,name=tschchartinfocolumn3dlightingpackage" json:"tschchartinfocolumn3dlightingpackage,omitempty"`
	Tschchartinfobar3Dlightingpackage                                  *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,315,opt,name=tschchartinfobar3dlightingpackage" json:"tschchartinfobar3dlightingpackage,omitempty"`
	Tschchartinfoline3Dlightingpackage                                 *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,316,opt,name=tschchartinfoline3dlightingpackage" json:"tschchartinfoline3dlightingpackage,omitempty"`
	Tschchartinfoarea3Dlightingpackage                                 *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,317,opt,name=tschchartinfoarea3dlightingpackage" json:"tschchartinfoarea3dlightingpackage,omitempty"`
	Tschchartinfopie3Dlightingpackage                                  *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,318,opt,name=tschchartinfopie3dlightingpackage" json:"tschchartinfopie3dlightingpackage,omitempty"`
	Tschchartinfodefaultdeprecated3Dbeveledges                         *bool                               `protobuf:"varint,326,opt,name=tschchartinfodefaultdeprecated3dbeveledges" json:"tschchartinfodefaultdeprecated3dbeveledges,omitempty"`
	Tschchartinfopiedeprecated3Dbeveledges                             *bool                               `protobuf:"varint,327,opt,name=tschchartinfopiedeprecated3dbeveledges" json:"tschchartinfopiedeprecated3dbeveledges,omitempty"`
	Tschchartinfobardeprecated3Dbeveledges                             *bool                               `protobuf:"varint,328,opt,name=tschchartinfobardeprecated3dbeveledges" json:"tschchartinfobardeprecated3dbeveledges,omitempty"`
	Tschchartinfocolumndeprecated3Dbeveledges                          *bool                               `protobuf:"varint,329,opt,name=tschchartinfocolumndeprecated3dbeveledges" json:"tschchartinfocolumndeprecated3dbeveledges,omitempty"`
	Tschchartinfodefaultdeprecated3Dbarshape                           *int32                              `protobuf:"varint,330,opt,name=tschchartinfodefaultdeprecated3dbarshape" json:"tschchartinfodefaultdeprecated3dbarshape,omitempty"`
	Tschchartinfodefault3Dchartopacity                                 *float32                            `protobuf:"fixed32,335,opt,name=tschchartinfodefault3dchartopacity" json:"tschchartinfodefault3dchartopacity,omitempty"`
	XXX_NoUnkeyedLiteral                                               struct{}                            `json:"-"`
	XXX_unrecognized                                                   []byte                              `json:"-"`
	XXX_sizecache                                                      int32                               `json:"-"`
}

func (m *ChartStyleArchive) Reset()         { *m = ChartStyleArchive{} }
func (m *ChartStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartStyleArchive) ProtoMessage()    {}
func (*ChartStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{5}
}

func (m *ChartStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartStyleArchive.Unmarshal(m, b)
}
func (m *ChartStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartStyleArchive.Merge(m, src)
}
func (m *ChartStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartStyleArchive.Size(m)
}
func (m *ChartStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartStyleArchive proto.InternalMessageInfo

func (m *ChartStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultbackgroundfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartinfodefaultbackgroundfill
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultbackgroundstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartinfodefaultbackgroundstroke
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultgridbackgroundfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartinfodefaultgridbackgroundfill
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultintersetgap() float32 {
	if m != nil && m.Tschchartinfodefaultintersetgap != nil {
		return *m.Tschchartinfodefaultintersetgap
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultinterbargap() float32 {
	if m != nil && m.Tschchartinfodefaultinterbargap != nil {
		return *m.Tschchartinfodefaultinterbargap
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultshowborder() bool {
	if m != nil && m.Tschchartinfodefaultshowborder != nil {
		return *m.Tschchartinfodefaultshowborder
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfodefaultborderstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartinfodefaultborderstroke
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaulttitlecolor() *TSP.Color {
	if m != nil {
		return m.Tschchartinfodefaulttitlecolor
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultgridbackgroundopacity() float32 {
	if m != nil && m.Tschchartinfodefaultgridbackgroundopacity != nil {
		return *m.Tschchartinfodefaultgridbackgroundopacity
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultcombinelayers() bool {
	if m != nil && m.Tschchartinfodefaultcombinelayers != nil {
		return *m.Tschchartinfodefaultcombinelayers
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfodefaultbordershadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfodefaultbordershadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultborderopacity() float32 {
	if m != nil && m.Tschchartinfodefaultborderopacity != nil {
		return *m.Tschchartinfodefaultborderopacity
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaulttitleparagraphstyleindex() int32 {
	if m != nil && m.Tschchartinfodefaulttitleparagraphstyleindex != nil {
		return *m.Tschchartinfodefaulttitleparagraphstyleindex
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedmasterfontfamily() string {
	if m != nil && m.Tschchartinfodefaultdeprecatedmasterfontfamily != nil {
		return *m.Tschchartinfodefaultdeprecatedmasterfontfamily
	}
	return ""
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedmasterfontnamedsize() int32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedmasterfontnamedsize != nil {
		return *m.Tschchartinfodefaultdeprecatedmasterfontnamedsize
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() int32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex != nil {
		return *m.Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() int32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex != nil {
		return *m.Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfodefaultdeprecatedtrendlineequationshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfodefaultdeprecatedtrendlinersquaredshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationopacity() float32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedtrendlineequationopacity != nil {
		return *m.Tschchartinfodefaultdeprecatedtrendlineequationopacity
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredopacity() float32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedtrendlinersquaredopacity != nil {
		return *m.Tschchartinfodefaultdeprecatedtrendlinersquaredopacity
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfobardeprecated3Dshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfobardeprecated3Dshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfocolumndeprecated3Dshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfocolumndeprecated3Dshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfolinedeprecated3Dshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfolinedeprecated3Dshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfoareadeprecated3Dshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfoareadeprecated3Dshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfopiedeprecated3Dshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartinfopiedeprecated3Dshadow
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefault3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfodefault3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfocolumn3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfocolumn3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfobar3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfobar3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfoline3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfoline3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfoarea3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfoarea3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfopie3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfopie3Dlightingpackage
	}
	return nil
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecated3Dbeveledges() bool {
	if m != nil && m.Tschchartinfodefaultdeprecated3Dbeveledges != nil {
		return *m.Tschchartinfodefaultdeprecated3Dbeveledges
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfopiedeprecated3Dbeveledges() bool {
	if m != nil && m.Tschchartinfopiedeprecated3Dbeveledges != nil {
		return *m.Tschchartinfopiedeprecated3Dbeveledges
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfobardeprecated3Dbeveledges() bool {
	if m != nil && m.Tschchartinfobardeprecated3Dbeveledges != nil {
		return *m.Tschchartinfobardeprecated3Dbeveledges
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfocolumndeprecated3Dbeveledges() bool {
	if m != nil && m.Tschchartinfocolumndeprecated3Dbeveledges != nil {
		return *m.Tschchartinfocolumndeprecated3Dbeveledges
	}
	return false
}

func (m *ChartStyleArchive) GetTschchartinfodefaultdeprecated3Dbarshape() int32 {
	if m != nil && m.Tschchartinfodefaultdeprecated3Dbarshape != nil {
		return *m.Tschchartinfodefaultdeprecated3Dbarshape
	}
	return 0
}

func (m *ChartStyleArchive) GetTschchartinfodefault3Dchartopacity() float32 {
	if m != nil && m.Tschchartinfodefault3Dchartopacity != nil {
		return *m.Tschchartinfodefault3Dchartopacity
	}
	return 0
}

type ChartNonStyleArchive struct {
	Super                                                  *TSS.StyleArchive                   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartinfodefaulttitle                              *string                             `protobuf:"bytes,10,opt,name=tschchartinfodefaulttitle" json:"tschchartinfodefaulttitle,omitempty"`
	Tschchartinfodefaultshowlegend                         *bool                               `protobuf:"varint,11,opt,name=tschchartinfodefaultshowlegend" json:"tschchartinfodefaultshowlegend,omitempty"`
	Tschchartinfodefaultpiestartangle                      *float32                            `protobuf:"fixed32,12,opt,name=tschchartinfodefaultpiestartangle" json:"tschchartinfodefaultpiestartangle,omitempty"`
	Tschchartinfodefaultshowtitle                          *bool                               `protobuf:"varint,13,opt,name=tschchartinfodefaultshowtitle" json:"tschchartinfodefaultshowtitle,omitempty"`
	Tschchartinfodefaultdeprecatedagainmasterfontnamedsize *int32                              `protobuf:"varint,25,opt,name=tschchartinfodefaultdeprecatedagainmasterfontnamedsize" json:"tschchartinfodefaultdeprecatedagainmasterfontnamedsize,omitempty"`
	Tschchartinfodefault3Drotation                         *TSCH.Chart3DVectorArchive          `protobuf:"bytes,300,opt,name=tschchartinfodefault3drotation" json:"tschchartinfodefault3drotation,omitempty"`
	Tschchartinfodefault3Dscale                            *TSCH.Chart3DVectorArchive          `protobuf:"bytes,301,opt,name=tschchartinfodefault3dscale" json:"tschchartinfodefault3dscale,omitempty"`
	Tschchartinfocolumn3Dscale                             *TSCH.Chart3DVectorArchive          `protobuf:"bytes,302,opt,name=tschchartinfocolumn3dscale" json:"tschchartinfocolumn3dscale,omitempty"`
	Tschchartinfobar3Dscale                                *TSCH.Chart3DVectorArchive          `protobuf:"bytes,303,opt,name=tschchartinfobar3dscale" json:"tschchartinfobar3dscale,omitempty"`
	Tschchartinfoline3Dscale                               *TSCH.Chart3DVectorArchive          `protobuf:"bytes,304,opt,name=tschchartinfoline3dscale" json:"tschchartinfoline3dscale,omitempty"`
	Tschchartinfoarea3Dscale                               *TSCH.Chart3DVectorArchive          `protobuf:"bytes,305,opt,name=tschchartinfoarea3dscale" json:"tschchartinfoarea3dscale,omitempty"`
	Tschchartinfopie3Dscale                                *TSCH.Chart3DVectorArchive          `protobuf:"bytes,306,opt,name=tschchartinfopie3dscale" json:"tschchartinfopie3dscale,omitempty"`
	Tschchartinfodefault3Dviewport                         *TSCH.Chart3DVectorArchive          `protobuf:"bytes,313,opt,name=tschchartinfodefault3dviewport" json:"tschchartinfodefault3dviewport,omitempty"`
	Tschchartinfodefaultdeprecated3Dlightingpackage        *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,320,opt,name=tschchartinfodefaultdeprecated3dlightingpackage" json:"tschchartinfodefaultdeprecated3dlightingpackage,omitempty"`
	Tschchartinfocolumndeprecated3Dlightingpackage         *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,321,opt,name=tschchartinfocolumndeprecated3dlightingpackage" json:"tschchartinfocolumndeprecated3dlightingpackage,omitempty"`
	Tschchartinfobardeprecated3Dlightingpackage            *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,322,opt,name=tschchartinfobardeprecated3dlightingpackage" json:"tschchartinfobardeprecated3dlightingpackage,omitempty"`
	Tschchartinfolinedeprecated3Dlightingpackage           *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,323,opt,name=tschchartinfolinedeprecated3dlightingpackage" json:"tschchartinfolinedeprecated3dlightingpackage,omitempty"`
	Tschchartinfoareadeprecated3Dlightingpackage           *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,324,opt,name=tschchartinfoareadeprecated3dlightingpackage" json:"tschchartinfoareadeprecated3dlightingpackage,omitempty"`
	Tschchartinfopiedeprecated3Dlightingpackage            *TSCH.Chart3DLightingPackageArchive `protobuf:"bytes,325,opt,name=tschchartinfopiedeprecated3dlightingpackage" json:"tschchartinfopiedeprecated3dlightingpackage,omitempty"`
	Tschchartinfodefaultskiphiddendata                     *bool                               `protobuf:"varint,326,opt,name=tschchartinfodefaultskiphiddendata" json:"tschchartinfodefaultskiphiddendata,omitempty"`
	Tschchartinfodefault3Dbeveledges                       *bool                               `protobuf:"varint,327,opt,name=tschchartinfodefault3dbeveledges" json:"tschchartinfodefault3dbeveledges,omitempty"`
	Tschchartinfodefault3Dbarshape                         *int32                              `protobuf:"varint,336,opt,name=tschchartinfodefault3dbarshape" json:"tschchartinfodefault3dbarshape,omitempty"`
	Tschchartinfodefault3Dintersetdepthgap                 *float32                            `protobuf:"fixed32,331,opt,name=tschchartinfodefault3dintersetdepthgap" json:"tschchartinfodefault3dintersetdepthgap,omitempty"`
	XXX_NoUnkeyedLiteral                                   struct{}                            `json:"-"`
	XXX_unrecognized                                       []byte                              `json:"-"`
	XXX_sizecache                                          int32                               `json:"-"`
}

func (m *ChartNonStyleArchive) Reset()         { *m = ChartNonStyleArchive{} }
func (m *ChartNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartNonStyleArchive) ProtoMessage()    {}
func (*ChartNonStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{6}
}

func (m *ChartNonStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartNonStyleArchive.Unmarshal(m, b)
}
func (m *ChartNonStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartNonStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartNonStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartNonStyleArchive.Merge(m, src)
}
func (m *ChartNonStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartNonStyleArchive.Size(m)
}
func (m *ChartNonStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartNonStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartNonStyleArchive proto.InternalMessageInfo

func (m *ChartNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaulttitle() string {
	if m != nil && m.Tschchartinfodefaulttitle != nil {
		return *m.Tschchartinfodefaulttitle
	}
	return ""
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultshowlegend() bool {
	if m != nil && m.Tschchartinfodefaultshowlegend != nil {
		return *m.Tschchartinfodefaultshowlegend
	}
	return false
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultpiestartangle() float32 {
	if m != nil && m.Tschchartinfodefaultpiestartangle != nil {
		return *m.Tschchartinfodefaultpiestartangle
	}
	return 0
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultshowtitle() bool {
	if m != nil && m.Tschchartinfodefaultshowtitle != nil {
		return *m.Tschchartinfodefaultshowtitle
	}
	return false
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultdeprecatedagainmasterfontnamedsize() int32 {
	if m != nil && m.Tschchartinfodefaultdeprecatedagainmasterfontnamedsize != nil {
		return *m.Tschchartinfodefaultdeprecatedagainmasterfontnamedsize
	}
	return 0
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Drotation() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfodefault3Drotation
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfodefault3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfocolumn3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfocolumn3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfobar3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfobar3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfoline3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfoline3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfoarea3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfoarea3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfopie3Dscale() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfopie3Dscale
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Dviewport() *TSCH.Chart3DVectorArchive {
	if m != nil {
		return m.Tschchartinfodefault3Dviewport
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultdeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfodefaultdeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfocolumndeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfocolumndeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfobardeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfobardeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfolinedeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfolinedeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfoareadeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfoareadeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfopiedeprecated3Dlightingpackage() *TSCH.Chart3DLightingPackageArchive {
	if m != nil {
		return m.Tschchartinfopiedeprecated3Dlightingpackage
	}
	return nil
}

func (m *ChartNonStyleArchive) GetTschchartinfodefaultskiphiddendata() bool {
	if m != nil && m.Tschchartinfodefaultskiphiddendata != nil {
		return *m.Tschchartinfodefaultskiphiddendata
	}
	return false
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Dbeveledges() bool {
	if m != nil && m.Tschchartinfodefault3Dbeveledges != nil {
		return *m.Tschchartinfodefault3Dbeveledges
	}
	return false
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Dbarshape() int32 {
	if m != nil && m.Tschchartinfodefault3Dbarshape != nil {
		return *m.Tschchartinfodefault3Dbarshape
	}
	return 0
}

func (m *ChartNonStyleArchive) GetTschchartinfodefault3Dintersetdepthgap() float32 {
	if m != nil && m.Tschchartinfodefault3Dintersetdepthgap != nil {
		return *m.Tschchartinfodefault3Dintersetdepthgap
	}
	return 0
}

type LegendStyleArchive struct {
	Super                                          *TSS.StyleArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschlegendmodeldefaultfill                     *TSD.FillArchive   `protobuf:"bytes,10,opt,name=tschlegendmodeldefaultfill" json:"tschlegendmodeldefaultfill,omitempty"`
	Tschlegendmodeldefaultstroke                   *TSD.StrokeArchive `protobuf:"bytes,11,opt,name=tschlegendmodeldefaultstroke" json:"tschlegendmodeldefaultstroke,omitempty"`
	Tschlegendmodeldefaultshadow                   *TSD.ShadowArchive `protobuf:"bytes,14,opt,name=tschlegendmodeldefaultshadow" json:"tschlegendmodeldefaultshadow,omitempty"`
	Tschlegendmodeldefaultopacity                  *float32           `protobuf:"fixed32,15,opt,name=tschlegendmodeldefaultopacity" json:"tschlegendmodeldefaultopacity,omitempty"`
	Tschlegendmodeldefaultlabelparagraphstyleindex *int32             `protobuf:"varint,16,opt,name=tschlegendmodeldefaultlabelparagraphstyleindex" json:"tschlegendmodeldefaultlabelparagraphstyleindex,omitempty"`
	XXX_NoUnkeyedLiteral                           struct{}           `json:"-"`
	XXX_unrecognized                               []byte             `json:"-"`
	XXX_sizecache                                  int32              `json:"-"`
}

func (m *LegendStyleArchive) Reset()         { *m = LegendStyleArchive{} }
func (m *LegendStyleArchive) String() string { return proto.CompactTextString(m) }
func (*LegendStyleArchive) ProtoMessage()    {}
func (*LegendStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{7}
}

func (m *LegendStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegendStyleArchive.Unmarshal(m, b)
}
func (m *LegendStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegendStyleArchive.Marshal(b, m, deterministic)
}
func (m *LegendStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegendStyleArchive.Merge(m, src)
}
func (m *LegendStyleArchive) XXX_Size() int {
	return xxx_messageInfo_LegendStyleArchive.Size(m)
}
func (m *LegendStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_LegendStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_LegendStyleArchive proto.InternalMessageInfo

func (m *LegendStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *LegendStyleArchive) GetTschlegendmodeldefaultfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschlegendmodeldefaultfill
	}
	return nil
}

func (m *LegendStyleArchive) GetTschlegendmodeldefaultstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschlegendmodeldefaultstroke
	}
	return nil
}

func (m *LegendStyleArchive) GetTschlegendmodeldefaultshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschlegendmodeldefaultshadow
	}
	return nil
}

func (m *LegendStyleArchive) GetTschlegendmodeldefaultopacity() float32 {
	if m != nil && m.Tschlegendmodeldefaultopacity != nil {
		return *m.Tschlegendmodeldefaultopacity
	}
	return 0
}

func (m *LegendStyleArchive) GetTschlegendmodeldefaultlabelparagraphstyleindex() int32 {
	if m != nil && m.Tschlegendmodeldefaultlabelparagraphstyleindex != nil {
		return *m.Tschlegendmodeldefaultlabelparagraphstyleindex
	}
	return 0
}

type LegendNonStyleArchive struct {
	Super                *TSS.StyleArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LegendNonStyleArchive) Reset()         { *m = LegendNonStyleArchive{} }
func (m *LegendNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*LegendNonStyleArchive) ProtoMessage()    {}
func (*LegendNonStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{8}
}

func (m *LegendNonStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegendNonStyleArchive.Unmarshal(m, b)
}
func (m *LegendNonStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegendNonStyleArchive.Marshal(b, m, deterministic)
}
func (m *LegendNonStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegendNonStyleArchive.Merge(m, src)
}
func (m *LegendNonStyleArchive) XXX_Size() int {
	return xxx_messageInfo_LegendNonStyleArchive.Size(m)
}
func (m *LegendNonStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_LegendNonStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_LegendNonStyleArchive proto.InternalMessageInfo

func (m *LegendNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartAxisStyleArchive struct {
	Super                                         *TSS.StyleArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartaxisvalueshowmajorgridlines          *bool              `protobuf:"varint,10,opt,name=tschchartaxisvalueshowmajorgridlines" json:"tschchartaxisvalueshowmajorgridlines,omitempty"`
	Tschchartaxisvalueshowminorgridlines          *bool              `protobuf:"varint,11,opt,name=tschchartaxisvalueshowminorgridlines" json:"tschchartaxisvalueshowminorgridlines,omitempty"`
	Tschchartaxisvaluemajorgridlinestroke         *TSD.StrokeArchive `protobuf:"bytes,12,opt,name=tschchartaxisvaluemajorgridlinestroke" json:"tschchartaxisvaluemajorgridlinestroke,omitempty"`
	Tschchartaxisvalueminorgridlinestroke         *TSD.StrokeArchive `protobuf:"bytes,13,opt,name=tschchartaxisvalueminorgridlinestroke" json:"tschchartaxisvalueminorgridlinestroke,omitempty"`
	Tschchartaxisvaluetickmarklocation            *int32             `protobuf:"varint,14,opt,name=tschchartaxisvaluetickmarklocation" json:"tschchartaxisvaluetickmarklocation,omitempty"`
	Tschchartaxisvalueshowmajortickmarks          *bool              `protobuf:"varint,15,opt,name=tschchartaxisvalueshowmajortickmarks" json:"tschchartaxisvalueshowmajortickmarks,omitempty"`
	Tschchartaxisvalueshowminortickmarks          *bool              `protobuf:"varint,16,opt,name=tschchartaxisvalueshowminortickmarks" json:"tschchartaxisvalueshowminortickmarks,omitempty"`
	Tschchartaxisvaluelabelsorientation           *float32           `protobuf:"fixed32,17,opt,name=tschchartaxisvaluelabelsorientation" json:"tschchartaxisvaluelabelsorientation,omitempty"`
	Tschchartaxisvalueshowminimumlabel            *bool              `protobuf:"varint,18,opt,name=tschchartaxisvalueshowminimumlabel" json:"tschchartaxisvalueshowminimumlabel,omitempty"`
	Tschchartaxisvaluemajorgridlineshadow         *TSD.ShadowArchive `protobuf:"bytes,21,opt,name=tschchartaxisvaluemajorgridlineshadow" json:"tschchartaxisvaluemajorgridlineshadow,omitempty"`
	Tschchartaxisvalueminorgridlineshadow         *TSD.ShadowArchive `protobuf:"bytes,22,opt,name=tschchartaxisvalueminorgridlineshadow" json:"tschchartaxisvalueminorgridlineshadow,omitempty"`
	Tschchartaxisvaluemajorgridlineopacity        *float32           `protobuf:"fixed32,23,opt,name=tschchartaxisvaluemajorgridlineopacity" json:"tschchartaxisvaluemajorgridlineopacity,omitempty"`
	Tschchartaxisvalueminorgridlineopacity        *float32           `protobuf:"fixed32,24,opt,name=tschchartaxisvalueminorgridlineopacity" json:"tschchartaxisvalueminorgridlineopacity,omitempty"`
	Tschchartaxisvalueshowaxis                    *bool              `protobuf:"varint,25,opt,name=tschchartaxisvalueshowaxis" json:"tschchartaxisvalueshowaxis,omitempty"`
	Tschchartaxiscategoryshowmajorgridlines       *bool              `protobuf:"varint,50,opt,name=tschchartaxiscategoryshowmajorgridlines" json:"tschchartaxiscategoryshowmajorgridlines,omitempty"`
	Tschchartaxiscategoryshowminorgridlines       *bool              `protobuf:"varint,51,opt,name=tschchartaxiscategoryshowminorgridlines" json:"tschchartaxiscategoryshowminorgridlines,omitempty"`
	Tschchartaxiscategorymajorgridlinestroke      *TSD.StrokeArchive `protobuf:"bytes,52,opt,name=tschchartaxiscategorymajorgridlinestroke" json:"tschchartaxiscategorymajorgridlinestroke,omitempty"`
	Tschchartaxiscategoryminorgridlinestroke      *TSD.StrokeArchive `protobuf:"bytes,53,opt,name=tschchartaxiscategoryminorgridlinestroke" json:"tschchartaxiscategoryminorgridlinestroke,omitempty"`
	Tschchartaxiscategorytickmarklocation         *int32             `protobuf:"varint,54,opt,name=tschchartaxiscategorytickmarklocation" json:"tschchartaxiscategorytickmarklocation,omitempty"`
	Tschchartaxiscategoryshowmajortickmarks       *bool              `protobuf:"varint,55,opt,name=tschchartaxiscategoryshowmajortickmarks" json:"tschchartaxiscategoryshowmajortickmarks,omitempty"`
	Tschchartaxiscategoryshowminortickmarks       *bool              `protobuf:"varint,56,opt,name=tschchartaxiscategoryshowminortickmarks" json:"tschchartaxiscategoryshowminortickmarks,omitempty"`
	Tschchartaxiscategorylabelsorientation        *float32           `protobuf:"fixed32,57,opt,name=tschchartaxiscategorylabelsorientation" json:"tschchartaxiscategorylabelsorientation,omitempty"`
	Tschchartaxiscategoryhorizontalspacing        *int32             `protobuf:"varint,58,opt,name=tschchartaxiscategoryhorizontalspacing" json:"tschchartaxiscategoryhorizontalspacing,omitempty"`
	Tschchartaxiscategoryverticalspacing          *int32             `protobuf:"varint,59,opt,name=tschchartaxiscategoryverticalspacing" json:"tschchartaxiscategoryverticalspacing,omitempty"`
	Tschchartaxiscategoryshowlastlabel            *bool              `protobuf:"varint,60,opt,name=tschchartaxiscategoryshowlastlabel" json:"tschchartaxiscategoryshowlastlabel,omitempty"`
	Tschchartaxiscategorymajorgridlineshadow      *TSD.ShadowArchive `protobuf:"bytes,63,opt,name=tschchartaxiscategorymajorgridlineshadow" json:"tschchartaxiscategorymajorgridlineshadow,omitempty"`
	Tschchartaxiscategoryminorgridlineshadow      *TSD.ShadowArchive `protobuf:"bytes,64,opt,name=tschchartaxiscategoryminorgridlineshadow" json:"tschchartaxiscategoryminorgridlineshadow,omitempty"`
	Tschchartaxiscategorymajorgridlineopacity     *float32           `protobuf:"fixed32,65,opt,name=tschchartaxiscategorymajorgridlineopacity" json:"tschchartaxiscategorymajorgridlineopacity,omitempty"`
	Tschchartaxiscategoryminorgridlineopacity     *float32           `protobuf:"fixed32,66,opt,name=tschchartaxiscategoryminorgridlineopacity" json:"tschchartaxiscategoryminorgridlineopacity,omitempty"`
	Tschchartaxiscategoryshowaxis                 *bool              `protobuf:"varint,67,opt,name=tschchartaxiscategoryshowaxis" json:"tschchartaxiscategoryshowaxis,omitempty"`
	Tschchartaxisdefaultlabelsorientation         *float32           `protobuf:"fixed32,102,opt,name=tschchartaxisdefaultlabelsorientation" json:"tschchartaxisdefaultlabelsorientation,omitempty"`
	Tschchartaxisdefaulttitleparagraphstyleindex  *int32             `protobuf:"varint,110,opt,name=tschchartaxisdefaulttitleparagraphstyleindex" json:"tschchartaxisdefaulttitleparagraphstyleindex,omitempty"`
	Tschchartaxisdefaultlabelparagraphstyleindex  *int32             `protobuf:"varint,111,opt,name=tschchartaxisdefaultlabelparagraphstyleindex" json:"tschchartaxisdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartaxisvaluetitleparagraphstyleindex    *int32             `protobuf:"varint,112,opt,name=tschchartaxisvaluetitleparagraphstyleindex" json:"tschchartaxisvaluetitleparagraphstyleindex,omitempty"`
	Tschchartaxisvaluelabelparagraphstyleindex    *int32             `protobuf:"varint,113,opt,name=tschchartaxisvaluelabelparagraphstyleindex" json:"tschchartaxisvaluelabelparagraphstyleindex,omitempty"`
	Tschchartaxiscategorytitleparagraphstyleindex *int32             `protobuf:"varint,114,opt,name=tschchartaxiscategorytitleparagraphstyleindex" json:"tschchartaxiscategorytitleparagraphstyleindex,omitempty"`
	Tschchartaxiscategorylabelparagraphstyleindex *int32             `protobuf:"varint,115,opt,name=tschchartaxiscategorylabelparagraphstyleindex" json:"tschchartaxiscategorylabelparagraphstyleindex,omitempty"`
	Tschchartaxisvalue3Dgridlinestroke            *TSD.StrokeArchive `protobuf:"bytes,331,opt,name=tschchartaxisvalue3dgridlinestroke" json:"tschchartaxisvalue3dgridlinestroke,omitempty"`
	Tschchartaxiscategory3Dgridlinestroke         *TSD.StrokeArchive `protobuf:"bytes,332,opt,name=tschchartaxiscategory3dgridlinestroke" json:"tschchartaxiscategory3dgridlinestroke,omitempty"`
	Tschchartaxisvalue3Dgridlineopacity           *float32           `protobuf:"fixed32,333,opt,name=tschchartaxisvalue3dgridlineopacity" json:"tschchartaxisvalue3dgridlineopacity,omitempty"`
	Tschchartaxiscategory3Dgridlineopacity        *float32           `protobuf:"fixed32,334,opt,name=tschchartaxiscategory3dgridlineopacity" json:"tschchartaxiscategory3dgridlineopacity,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{}           `json:"-"`
	XXX_unrecognized                              []byte             `json:"-"`
	XXX_sizecache                                 int32              `json:"-"`
}

func (m *ChartAxisStyleArchive) Reset()         { *m = ChartAxisStyleArchive{} }
func (m *ChartAxisStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartAxisStyleArchive) ProtoMessage()    {}
func (*ChartAxisStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{9}
}

func (m *ChartAxisStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartAxisStyleArchive.Unmarshal(m, b)
}
func (m *ChartAxisStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartAxisStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartAxisStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartAxisStyleArchive.Merge(m, src)
}
func (m *ChartAxisStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartAxisStyleArchive.Size(m)
}
func (m *ChartAxisStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartAxisStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartAxisStyleArchive proto.InternalMessageInfo

func (m *ChartAxisStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowmajorgridlines() bool {
	if m != nil && m.Tschchartaxisvalueshowmajorgridlines != nil {
		return *m.Tschchartaxisvalueshowmajorgridlines
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowminorgridlines() bool {
	if m != nil && m.Tschchartaxisvalueshowminorgridlines != nil {
		return *m.Tschchartaxisvalueshowminorgridlines
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxisvaluemajorgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxisvalueminorgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluetickmarklocation() int32 {
	if m != nil && m.Tschchartaxisvaluetickmarklocation != nil {
		return *m.Tschchartaxisvaluetickmarklocation
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowmajortickmarks() bool {
	if m != nil && m.Tschchartaxisvalueshowmajortickmarks != nil {
		return *m.Tschchartaxisvalueshowmajortickmarks
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowminortickmarks() bool {
	if m != nil && m.Tschchartaxisvalueshowminortickmarks != nil {
		return *m.Tschchartaxisvalueshowminortickmarks
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluelabelsorientation() float32 {
	if m != nil && m.Tschchartaxisvaluelabelsorientation != nil {
		return *m.Tschchartaxisvaluelabelsorientation
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowminimumlabel() bool {
	if m != nil && m.Tschchartaxisvalueshowminimumlabel != nil {
		return *m.Tschchartaxisvalueshowminimumlabel
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartaxisvaluemajorgridlineshadow
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartaxisvalueminorgridlineshadow
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineopacity() float32 {
	if m != nil && m.Tschchartaxisvaluemajorgridlineopacity != nil {
		return *m.Tschchartaxisvaluemajorgridlineopacity
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineopacity() float32 {
	if m != nil && m.Tschchartaxisvalueminorgridlineopacity != nil {
		return *m.Tschchartaxisvalueminorgridlineopacity
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalueshowaxis() bool {
	if m != nil && m.Tschchartaxisvalueshowaxis != nil {
		return *m.Tschchartaxisvalueshowaxis
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowmajorgridlines() bool {
	if m != nil && m.Tschchartaxiscategoryshowmajorgridlines != nil {
		return *m.Tschchartaxiscategoryshowmajorgridlines
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowminorgridlines() bool {
	if m != nil && m.Tschchartaxiscategoryshowminorgridlines != nil {
		return *m.Tschchartaxiscategoryshowminorgridlines
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxiscategorymajorgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxiscategoryminorgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorytickmarklocation() int32 {
	if m != nil && m.Tschchartaxiscategorytickmarklocation != nil {
		return *m.Tschchartaxiscategorytickmarklocation
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowmajortickmarks() bool {
	if m != nil && m.Tschchartaxiscategoryshowmajortickmarks != nil {
		return *m.Tschchartaxiscategoryshowmajortickmarks
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowminortickmarks() bool {
	if m != nil && m.Tschchartaxiscategoryshowminortickmarks != nil {
		return *m.Tschchartaxiscategoryshowminortickmarks
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorylabelsorientation() float32 {
	if m != nil && m.Tschchartaxiscategorylabelsorientation != nil {
		return *m.Tschchartaxiscategorylabelsorientation
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryhorizontalspacing() int32 {
	if m != nil && m.Tschchartaxiscategoryhorizontalspacing != nil {
		return *m.Tschchartaxiscategoryhorizontalspacing
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryverticalspacing() int32 {
	if m != nil && m.Tschchartaxiscategoryverticalspacing != nil {
		return *m.Tschchartaxiscategoryverticalspacing
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowlastlabel() bool {
	if m != nil && m.Tschchartaxiscategoryshowlastlabel != nil {
		return *m.Tschchartaxiscategoryshowlastlabel
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartaxiscategorymajorgridlineshadow
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartaxiscategoryminorgridlineshadow
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineopacity() float32 {
	if m != nil && m.Tschchartaxiscategorymajorgridlineopacity != nil {
		return *m.Tschchartaxiscategorymajorgridlineopacity
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineopacity() float32 {
	if m != nil && m.Tschchartaxiscategoryminorgridlineopacity != nil {
		return *m.Tschchartaxiscategoryminorgridlineopacity
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategoryshowaxis() bool {
	if m != nil && m.Tschchartaxiscategoryshowaxis != nil {
		return *m.Tschchartaxiscategoryshowaxis
	}
	return false
}

func (m *ChartAxisStyleArchive) GetTschchartaxisdefaultlabelsorientation() float32 {
	if m != nil && m.Tschchartaxisdefaultlabelsorientation != nil {
		return *m.Tschchartaxisdefaultlabelsorientation
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisdefaulttitleparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxisdefaulttitleparagraphstyleindex != nil {
		return *m.Tschchartaxisdefaulttitleparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisdefaultlabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxisdefaultlabelparagraphstyleindex != nil {
		return *m.Tschchartaxisdefaultlabelparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluetitleparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxisvaluetitleparagraphstyleindex != nil {
		return *m.Tschchartaxisvaluetitleparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvaluelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxisvaluelabelparagraphstyleindex != nil {
		return *m.Tschchartaxisvaluelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorytitleparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxiscategorytitleparagraphstyleindex != nil {
		return *m.Tschchartaxiscategorytitleparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategorylabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartaxiscategorylabelparagraphstyleindex != nil {
		return *m.Tschchartaxiscategorylabelparagraphstyleindex
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxisvalue3Dgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartaxiscategory3Dgridlinestroke
	}
	return nil
}

func (m *ChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlineopacity() float32 {
	if m != nil && m.Tschchartaxisvalue3Dgridlineopacity != nil {
		return *m.Tschchartaxisvalue3Dgridlineopacity
	}
	return 0
}

func (m *ChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlineopacity() float32 {
	if m != nil && m.Tschchartaxiscategory3Dgridlineopacity != nil {
		return *m.Tschchartaxiscategory3Dgridlineopacity
	}
	return 0
}

type ChartAxisNonStyleArchive struct {
	Super                                    *TSS.StyleArchive                 `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartaxisdefaultusermin              *TSCH.ChartsNSNumberDoubleArchive `protobuf:"bytes,11,opt,name=tschchartaxisdefaultusermin" json:"tschchartaxisdefaultusermin,omitempty"`
	Tschchartaxisdefaultusermax              *TSCH.ChartsNSNumberDoubleArchive `protobuf:"bytes,12,opt,name=tschchartaxisdefaultusermax" json:"tschchartaxisdefaultusermax,omitempty"`
	Tschchartaxisdefaultnumberformat         *ChartsNumberFormatArchive        `protobuf:"bytes,13,opt,name=tschchartaxisdefaultnumberformat" json:"tschchartaxisdefaultnumberformat,omitempty"`
	Tschchartaxisdefaultshowlabels           *bool                             `protobuf:"varint,14,opt,name=tschchartaxisdefaultshowlabels" json:"tschchartaxisdefaultshowlabels,omitempty"`
	Tschchartaxisvaluenumberofminorgridlines *int32                            `protobuf:"varint,50,opt,name=tschchartaxisvaluenumberofminorgridlines" json:"tschchartaxisvaluenumberofminorgridlines,omitempty"`
	Tschchartaxisvaluescale                  *int32                            `protobuf:"varint,51,opt,name=tschchartaxisvaluescale" json:"tschchartaxisvaluescale,omitempty"`
	Tschchartaxisvaluenumberofdecades        *int32                            `protobuf:"varint,52,opt,name=tschchartaxisvaluenumberofdecades" json:"tschchartaxisvaluenumberofdecades,omitempty"`
	Tschchartaxisvalueshowlabels             *bool                             `protobuf:"varint,53,opt,name=tschchartaxisvalueshowlabels" json:"tschchartaxisvalueshowlabels,omitempty"`
	Tschchartaxisvalueshowtitle              *bool                             `protobuf:"varint,54,opt,name=tschchartaxisvalueshowtitle" json:"tschchartaxisvalueshowtitle,omitempty"`
	Tschchartaxisvaluenumberofmajorgridlines *int32                            `protobuf:"varint,55,opt,name=tschchartaxisvaluenumberofmajorgridlines" json:"tschchartaxisvaluenumberofmajorgridlines,omitempty"`
	Tschchartaxisvaluetitle                  *string                           `protobuf:"bytes,56,opt,name=tschchartaxisvaluetitle" json:"tschchartaxisvaluetitle,omitempty"`
	Tschchartaxiscategoryshowlabels          *bool                             `protobuf:"varint,100,opt,name=tschchartaxiscategoryshowlabels" json:"tschchartaxiscategoryshowlabels,omitempty"`
	Tschchartaxiscategoryshowserieslabels    *bool                             `protobuf:"varint,101,opt,name=tschchartaxiscategoryshowserieslabels" json:"tschchartaxiscategoryshowserieslabels,omitempty"`
	Tschchartaxiscategoryshowtitle           *bool                             `protobuf:"varint,102,opt,name=tschchartaxiscategoryshowtitle" json:"tschchartaxiscategoryshowtitle,omitempty"`
	Tschchartaxiscategorytitle               *string                           `protobuf:"bytes,103,opt,name=tschchartaxiscategorytitle" json:"tschchartaxiscategorytitle,omitempty"`
	Tschchartaxisdefaultnumberformattype     *int32                            `protobuf:"varint,120,opt,name=tschchartaxisdefaultnumberformattype" json:"tschchartaxisdefaultnumberformattype,omitempty"`
	Tschchartaxisdefault3Dlabelposition      *int32                            `protobuf:"varint,336,opt,name=tschchartaxisdefault3dlabelposition" json:"tschchartaxisdefault3dlabelposition,omitempty"`
	Tschchartaxiscategoryplottoedges         *bool                             `protobuf:"varint,116,opt,name=tschchartaxiscategoryplottoedges" json:"tschchartaxiscategoryplottoedges,omitempty"`
	XXX_NoUnkeyedLiteral                     struct{}                          `json:"-"`
	XXX_unrecognized                         []byte                            `json:"-"`
	XXX_sizecache                            int32                             `json:"-"`
}

func (m *ChartAxisNonStyleArchive) Reset()         { *m = ChartAxisNonStyleArchive{} }
func (m *ChartAxisNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartAxisNonStyleArchive) ProtoMessage()    {}
func (*ChartAxisNonStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{10}
}

func (m *ChartAxisNonStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartAxisNonStyleArchive.Unmarshal(m, b)
}
func (m *ChartAxisNonStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartAxisNonStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartAxisNonStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartAxisNonStyleArchive.Merge(m, src)
}
func (m *ChartAxisNonStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartAxisNonStyleArchive.Size(m)
}
func (m *ChartAxisNonStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartAxisNonStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartAxisNonStyleArchive proto.InternalMessageInfo

func (m *ChartAxisNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefaultusermin() *TSCH.ChartsNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartaxisdefaultusermin
	}
	return nil
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefaultusermax() *TSCH.ChartsNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartaxisdefaultusermax
	}
	return nil
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformat() *ChartsNumberFormatArchive {
	if m != nil {
		return m.Tschchartaxisdefaultnumberformat
	}
	return nil
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefaultshowlabels() bool {
	if m != nil && m.Tschchartaxisdefaultshowlabels != nil {
		return *m.Tschchartaxisdefaultshowlabels
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofminorgridlines() int32 {
	if m != nil && m.Tschchartaxisvaluenumberofminorgridlines != nil {
		return *m.Tschchartaxisvaluenumberofminorgridlines
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvaluescale() int32 {
	if m != nil && m.Tschchartaxisvaluescale != nil {
		return *m.Tschchartaxisvaluescale
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofdecades() int32 {
	if m != nil && m.Tschchartaxisvaluenumberofdecades != nil {
		return *m.Tschchartaxisvaluenumberofdecades
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvalueshowlabels() bool {
	if m != nil && m.Tschchartaxisvalueshowlabels != nil {
		return *m.Tschchartaxisvalueshowlabels
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvalueshowtitle() bool {
	if m != nil && m.Tschchartaxisvalueshowtitle != nil {
		return *m.Tschchartaxisvalueshowtitle
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofmajorgridlines() int32 {
	if m != nil && m.Tschchartaxisvaluenumberofmajorgridlines != nil {
		return *m.Tschchartaxisvaluenumberofmajorgridlines
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisvaluetitle() string {
	if m != nil && m.Tschchartaxisvaluetitle != nil {
		return *m.Tschchartaxisvaluetitle
	}
	return ""
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowlabels() bool {
	if m != nil && m.Tschchartaxiscategoryshowlabels != nil {
		return *m.Tschchartaxiscategoryshowlabels
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowserieslabels() bool {
	if m != nil && m.Tschchartaxiscategoryshowserieslabels != nil {
		return *m.Tschchartaxiscategoryshowserieslabels
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowtitle() bool {
	if m != nil && m.Tschchartaxiscategoryshowtitle != nil {
		return *m.Tschchartaxiscategoryshowtitle
	}
	return false
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxiscategorytitle() string {
	if m != nil && m.Tschchartaxiscategorytitle != nil {
		return *m.Tschchartaxiscategorytitle
	}
	return ""
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformattype() int32 {
	if m != nil && m.Tschchartaxisdefaultnumberformattype != nil {
		return *m.Tschchartaxisdefaultnumberformattype
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxisdefault3Dlabelposition() int32 {
	if m != nil && m.Tschchartaxisdefault3Dlabelposition != nil {
		return *m.Tschchartaxisdefault3Dlabelposition
	}
	return 0
}

func (m *ChartAxisNonStyleArchive) GetTschchartaxiscategoryplottoedges() bool {
	if m != nil && m.Tschchartaxiscategoryplottoedges != nil {
		return *m.Tschchartaxiscategoryplottoedges
	}
	return false
}

type ChartSeriesStyleArchive struct {
	Super                                                      *TSS.StyleArchive                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartseriesdefaulttrendlineequationparagraphstyleindex *int32                             `protobuf:"varint,201,opt,name=tschchartseriesdefaulttrendlineequationparagraphstyleindex" json:"tschchartseriesdefaulttrendlineequationparagraphstyleindex,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex *int32                             `protobuf:"varint,202,opt,name=tschchartseriesdefaulttrendlinersquaredparagraphstyleindex" json:"tschchartseriesdefaulttrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartseriesdefaulttrendlineequationopacity             *float32                           `protobuf:"fixed32,205,opt,name=tschchartseriesdefaulttrendlineequationopacity" json:"tschchartseriesdefaulttrendlineequationopacity,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredopacity             *float32                           `protobuf:"fixed32,206,opt,name=tschchartseriesdefaulttrendlinersquaredopacity" json:"tschchartseriesdefaulttrendlinersquaredopacity,omitempty"`
	Tschchartseriesbarfill                                     *TSD.FillArchive                   `protobuf:"bytes,10,opt,name=tschchartseriesbarfill" json:"tschchartseriesbarfill,omitempty"`
	Tschchartseriesbarstroke                                   *TSD.StrokeArchive                 `protobuf:"bytes,11,opt,name=tschchartseriesbarstroke" json:"tschchartseriesbarstroke,omitempty"`
	Tschchartseriesbarvaluelabelposition                       *int32                             `protobuf:"varint,13,opt,name=tschchartseriesbarvaluelabelposition" json:"tschchartseriesbarvaluelabelposition,omitempty"`
	Tschchartserieslinestroke                                  *TSD.StrokeArchive                 `protobuf:"bytes,16,opt,name=tschchartserieslinestroke" json:"tschchartserieslinestroke,omitempty"`
	Tschchartserieslinesymbolfill                              *TSD.FillArchive                   `protobuf:"bytes,17,opt,name=tschchartserieslinesymbolfill" json:"tschchartserieslinesymbolfill,omitempty"`
	Tschchartserieslinesymbolstroke                            *TSD.StrokeArchive                 `protobuf:"bytes,18,opt,name=tschchartserieslinesymbolstroke" json:"tschchartserieslinesymbolstroke,omitempty"`
	Tschchartserieslinesymbolsize                              *float32                           `protobuf:"fixed32,20,opt,name=tschchartserieslinesymbolsize" json:"tschchartserieslinesymbolsize,omitempty"`
	Tschchartserieslinevaluelabelposition                      *int32                             `protobuf:"varint,22,opt,name=tschchartserieslinevaluelabelposition" json:"tschchartserieslinevaluelabelposition,omitempty"`
	Tschchartseriesareafill                                    *TSD.FillArchive                   `protobuf:"bytes,25,opt,name=tschchartseriesareafill" json:"tschchartseriesareafill,omitempty"`
	Tschchartseriesareastroke                                  *TSD.StrokeArchive                 `protobuf:"bytes,26,opt,name=tschchartseriesareastroke" json:"tschchartseriesareastroke,omitempty"`
	Tschchartseriesareavaluelabelposition                      *int32                             `protobuf:"varint,28,opt,name=tschchartseriesareavaluelabelposition" json:"tschchartseriesareavaluelabelposition,omitempty"`
	Tschchartseriesareasymbolfill                              *TSD.FillArchive                   `protobuf:"bytes,29,opt,name=tschchartseriesareasymbolfill" json:"tschchartseriesareasymbolfill,omitempty"`
	Tschchartseriesareasymbolstroke                            *TSD.StrokeArchive                 `protobuf:"bytes,30,opt,name=tschchartseriesareasymbolstroke" json:"tschchartseriesareasymbolstroke,omitempty"`
	Tschchartseriesareasymbolsize                              *float32                           `protobuf:"fixed32,32,opt,name=tschchartseriesareasymbolsize" json:"tschchartseriesareasymbolsize,omitempty"`
	Tschchartseriespiefill                                     *TSD.FillArchive                   `protobuf:"bytes,35,opt,name=tschchartseriespiefill" json:"tschchartseriespiefill,omitempty"`
	Tschchartseriespiestroke                                   *TSD.StrokeArchive                 `protobuf:"bytes,36,opt,name=tschchartseriespiestroke" json:"tschchartseriespiestroke,omitempty"`
	Tschchartseriesscatterstroke                               *TSD.StrokeArchive                 `protobuf:"bytes,40,opt,name=tschchartseriesscatterstroke" json:"tschchartseriesscatterstroke,omitempty"`
	Tschchartseriesscattersymbolfill                           *TSD.FillArchive                   `protobuf:"bytes,41,opt,name=tschchartseriesscattersymbolfill" json:"tschchartseriesscattersymbolfill,omitempty"`
	Tschchartseriesscattersymbolstroke                         *TSD.StrokeArchive                 `protobuf:"bytes,42,opt,name=tschchartseriesscattersymbolstroke" json:"tschchartseriesscattersymbolstroke,omitempty"`
	Tschchartseriesscattersymbolsize                           *float32                           `protobuf:"fixed32,44,opt,name=tschchartseriesscattersymbolsize" json:"tschchartseriesscattersymbolsize,omitempty"`
	Tschchartseriesscattervaluelabelposition                   *int32                             `protobuf:"varint,46,opt,name=tschchartseriesscattervaluelabelposition" json:"tschchartseriesscattervaluelabelposition,omitempty"`
	Tschchartseriesdefaultfill                                 *TSD.FillArchive                   `protobuf:"bytes,50,opt,name=tschchartseriesdefaultfill" json:"tschchartseriesdefaultfill,omitempty"`
	Tschchartseriesdefaultvaluelabelposition                   *int32                             `protobuf:"varint,52,opt,name=tschchartseriesdefaultvaluelabelposition" json:"tschchartseriesdefaultvaluelabelposition,omitempty"`
	Tschchartseriespiedeprecatedserieslabelson                 *bool                              `protobuf:"varint,60,opt,name=tschchartseriespiedeprecatedserieslabelson" json:"tschchartseriespiedeprecatedserieslabelson,omitempty"`
	Tschchartseriescolumnfill                                  *TSD.FillArchive                   `protobuf:"bytes,62,opt,name=tschchartseriescolumnfill" json:"tschchartseriescolumnfill,omitempty"`
	Tschchartseriespieshadow                                   *TSD.ShadowArchive                 `protobuf:"bytes,100,opt,name=tschchartseriespieshadow" json:"tschchartseriespieshadow,omitempty"`
	Tschchartseriesbarshadow                                   *TSD.ShadowArchive                 `protobuf:"bytes,101,opt,name=tschchartseriesbarshadow" json:"tschchartseriesbarshadow,omitempty"`
	Tschchartseriesareashadow                                  *TSD.ShadowArchive                 `protobuf:"bytes,102,opt,name=tschchartseriesareashadow" json:"tschchartseriesareashadow,omitempty"`
	Tschchartseriesscattershadow                               *TSD.ShadowArchive                 `protobuf:"bytes,103,opt,name=tschchartseriesscattershadow" json:"tschchartseriesscattershadow,omitempty"`
	Tschchartseriesmixedlineshadow                             *TSD.ShadowArchive                 `protobuf:"bytes,104,opt,name=tschchartseriesmixedlineshadow" json:"tschchartseriesmixedlineshadow,omitempty"`
	Tschchartseriesmixedareashadow                             *TSD.ShadowArchive                 `protobuf:"bytes,105,opt,name=tschchartseriesmixedareashadow" json:"tschchartseriesmixedareashadow,omitempty"`
	Tschchartseriesmixedcolumnshadow                           *TSD.ShadowArchive                 `protobuf:"bytes,106,opt,name=tschchartseriesmixedcolumnshadow" json:"tschchartseriesmixedcolumnshadow,omitempty"`
	Tschchartserieslineshadow                                  *TSD.ShadowArchive                 `protobuf:"bytes,107,opt,name=tschchartserieslineshadow" json:"tschchartserieslineshadow,omitempty"`
	Tschchartseriesdefaultshadow                               *TSD.ShadowArchive                 `protobuf:"bytes,108,opt,name=tschchartseriesdefaultshadow" json:"tschchartseriesdefaultshadow,omitempty"`
	Tschchartseriesbubblesymbolfill                            *TSD.FillArchive                   `protobuf:"bytes,207,opt,name=tschchartseriesbubblesymbolfill" json:"tschchartseriesbubblesymbolfill,omitempty"`
	Tschchartseriesbubblestroke                                *TSD.StrokeArchive                 `protobuf:"bytes,211,opt,name=tschchartseriesbubblestroke" json:"tschchartseriesbubblestroke,omitempty"`
	Tschchartseriesbubblesymbolstroke                          *TSD.StrokeArchive                 `protobuf:"bytes,212,opt,name=tschchartseriesbubblesymbolstroke" json:"tschchartseriesbubblesymbolstroke,omitempty"`
	Tschchartseriesbubblevaluelabelposition                    *int32                             `protobuf:"varint,213,opt,name=tschchartseriesbubblevaluelabelposition" json:"tschchartseriesbubblevaluelabelposition,omitempty"`
	Tschchartseriesbubbleshadow                                *TSD.ShadowArchive                 `protobuf:"bytes,214,opt,name=tschchartseriesbubbleshadow" json:"tschchartseriesbubbleshadow,omitempty"`
	Tschchartseriesbubblesymbolfilluseseriesstroke             *bool                              `protobuf:"varint,215,opt,name=tschchartseriesbubblesymbolfilluseseriesstroke" json:"tschchartseriesbubblesymbolfilluseseriesstroke,omitempty"`
	Tschchartseries3Dbarshadow                                 *TSD.ShadowArchive                 `protobuf:"bytes,306,opt,name=tschchartseries3dbarshadow" json:"tschchartseries3dbarshadow,omitempty"`
	Tschchartseries3Dcolumnshadow                              *TSD.ShadowArchive                 `protobuf:"bytes,307,opt,name=tschchartseries3dcolumnshadow" json:"tschchartseries3dcolumnshadow,omitempty"`
	Tschchartseries3Dlineshadow                                *TSD.ShadowArchive                 `protobuf:"bytes,308,opt,name=tschchartseries3dlineshadow" json:"tschchartseries3dlineshadow,omitempty"`
	Tschchartseries3Dareashadow                                *TSD.ShadowArchive                 `protobuf:"bytes,309,opt,name=tschchartseries3dareashadow" json:"tschchartseries3dareashadow,omitempty"`
	Tschchartseries3Dpieshadow                                 *TSD.ShadowArchive                 `protobuf:"bytes,310,opt,name=tschchartseries3dpieshadow" json:"tschchartseries3dpieshadow,omitempty"`
	Tschchartseriesdefaultlabelparagraphstyleindex             *int32                             `protobuf:"varint,110,opt,name=tschchartseriesdefaultlabelparagraphstyleindex" json:"tschchartseriesdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartseriesbarlabelparagraphstyleindex                 *int32                             `protobuf:"varint,111,opt,name=tschchartseriesbarlabelparagraphstyleindex" json:"tschchartseriesbarlabelparagraphstyleindex,omitempty"`
	Tschchartserieslinelabelparagraphstyleindex                *int32                             `protobuf:"varint,112,opt,name=tschchartserieslinelabelparagraphstyleindex" json:"tschchartserieslinelabelparagraphstyleindex,omitempty"`
	Tschchartseriesarealabelparagraphstyleindex                *int32                             `protobuf:"varint,113,opt,name=tschchartseriesarealabelparagraphstyleindex" json:"tschchartseriesarealabelparagraphstyleindex,omitempty"`
	Tschchartseriespielabelparagraphstyleindex                 *int32                             `protobuf:"varint,114,opt,name=tschchartseriespielabelparagraphstyleindex" json:"tschchartseriespielabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedlabelparagraphstyleindex               *int32                             `protobuf:"varint,115,opt,name=tschchartseriesmixedlabelparagraphstyleindex" json:"tschchartseriesmixedlabelparagraphstyleindex,omitempty"`
	Tschchartseriesdefaultopacity                              *float32                           `protobuf:"fixed32,116,opt,name=tschchartseriesdefaultopacity" json:"tschchartseriesdefaultopacity,omitempty"`
	Tschchartserieslinesymbolfilluseseriesstroke               *bool                              `protobuf:"varint,117,opt,name=tschchartserieslinesymbolfilluseseriesstroke" json:"tschchartserieslinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesareasymbolfilluseseriesstroke               *bool                              `protobuf:"varint,118,opt,name=tschchartseriesareasymbolfilluseseriesstroke" json:"tschchartseriesareasymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesscattersymbolfilluseseriesstroke            *bool                              `protobuf:"varint,119,opt,name=tschchartseriesscattersymbolfilluseseriesstroke" json:"tschchartseriesscattersymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesstroke          *bool                              `protobuf:"varint,120,opt,name=tschchartseriesmixedlinesymbolfilluseseriesstroke" json:"tschchartseriesmixedlinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesstroke          *bool                              `protobuf:"varint,121,opt,name=tschchartseriesmixedareasymbolfilluseseriesstroke" json:"tschchartseriesmixedareasymbolfilluseseriesstroke,omitempty"`
	Tschchartserieslinesymbolfilluseseriesfill                 *bool                              `protobuf:"varint,122,opt,name=tschchartserieslinesymbolfilluseseriesfill" json:"tschchartserieslinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesareasymbolfilluseseriesfill                 *bool                              `protobuf:"varint,123,opt,name=tschchartseriesareasymbolfilluseseriesfill" json:"tschchartseriesareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesfill            *bool                              `protobuf:"varint,124,opt,name=tschchartseriesmixedlinesymbolfilluseseriesfill" json:"tschchartseriesmixedlinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesfill            *bool                              `protobuf:"varint,125,opt,name=tschchartseriesmixedareasymbolfilluseseriesfill" json:"tschchartseriesmixedareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedcolumnfill                             *TSD.FillArchive                   `protobuf:"bytes,130,opt,name=tschchartseriesmixedcolumnfill" json:"tschchartseriesmixedcolumnfill,omitempty"`
	Tschchartseriesmixedareafill                               *TSD.FillArchive                   `protobuf:"bytes,131,opt,name=tschchartseriesmixedareafill" json:"tschchartseriesmixedareafill,omitempty"`
	Tschchartseriesmixedcolumnstroke                           *TSD.StrokeArchive                 `protobuf:"bytes,132,opt,name=tschchartseriesmixedcolumnstroke" json:"tschchartseriesmixedcolumnstroke,omitempty"`
	Tschchartseriesmixedlinestroke                             *TSD.StrokeArchive                 `protobuf:"bytes,133,opt,name=tschchartseriesmixedlinestroke" json:"tschchartseriesmixedlinestroke,omitempty"`
	Tschchartseriesmixedareastroke                             *TSD.StrokeArchive                 `protobuf:"bytes,134,opt,name=tschchartseriesmixedareastroke" json:"tschchartseriesmixedareastroke,omitempty"`
	Tschchartseriesmixedlinesymbolsize                         *float32                           `protobuf:"fixed32,135,opt,name=tschchartseriesmixedlinesymbolsize" json:"tschchartseriesmixedlinesymbolsize,omitempty"`
	Tschchartseriesmixedareasymbolsize                         *float32                           `protobuf:"fixed32,136,opt,name=tschchartseriesmixedareasymbolsize" json:"tschchartseriesmixedareasymbolsize,omitempty"`
	Tschchartseriesmixedlinesymbolfill                         *TSD.FillArchive                   `protobuf:"bytes,137,opt,name=tschchartseriesmixedlinesymbolfill" json:"tschchartseriesmixedlinesymbolfill,omitempty"`
	Tschchartseriesmixedareasymbolfill                         *TSD.FillArchive                   `protobuf:"bytes,138,opt,name=tschchartseriesmixedareasymbolfill" json:"tschchartseriesmixedareasymbolfill,omitempty"`
	Tschchartseriesmixedlinesymbolstroke                       *TSD.StrokeArchive                 `protobuf:"bytes,139,opt,name=tschchartseriesmixedlinesymbolstroke" json:"tschchartseriesmixedlinesymbolstroke,omitempty"`
	Tschchartseriesmixedareasymbolstroke                       *TSD.StrokeArchive                 `protobuf:"bytes,140,opt,name=tschchartseriesmixedareasymbolstroke" json:"tschchartseriesmixedareasymbolstroke,omitempty"`
	Tschchartseriesmixedcolumnvaluelabelposition               *int32                             `protobuf:"varint,141,opt,name=tschchartseriesmixedcolumnvaluelabelposition" json:"tschchartseriesmixedcolumnvaluelabelposition,omitempty"`
	Tschchartseriesmixedlinevaluelabelposition                 *int32                             `protobuf:"varint,142,opt,name=tschchartseriesmixedlinevaluelabelposition" json:"tschchartseriesmixedlinevaluelabelposition,omitempty"`
	Tschchartseriesmixedareavaluelabelposition                 *int32                             `protobuf:"varint,143,opt,name=tschchartseriesmixedareavaluelabelposition" json:"tschchartseriesmixedareavaluelabelposition,omitempty"`
	Tschchartseriesdefaultoutsidelabelparagraphstyleindex      *int32                             `protobuf:"varint,150,opt,name=tschchartseriesdefaultoutsidelabelparagraphstyleindex" json:"tschchartseriesdefaultoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesbaroutsidelabelparagraphstyleindex          *int32                             `protobuf:"varint,151,opt,name=tschchartseriesbaroutsidelabelparagraphstyleindex" json:"tschchartseriesbaroutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesareaoutsidelabelparagraphstyleindex         *int32                             `protobuf:"varint,153,opt,name=tschchartseriesareaoutsidelabelparagraphstyleindex" json:"tschchartseriesareaoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriespieoutsidelabelparagraphstyleindex          *int32                             `protobuf:"varint,154,opt,name=tschchartseriespieoutsidelabelparagraphstyleindex" json:"tschchartseriespieoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedoutsidelabelparagraphstyleindex        *int32                             `protobuf:"varint,155,opt,name=tschchartseriesmixedoutsidelabelparagraphstyleindex" json:"tschchartseriesmixedoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesstackedbarvaluelabelposition                *int32                             `protobuf:"varint,156,opt,name=tschchartseriesstackedbarvaluelabelposition" json:"tschchartseriesstackedbarvaluelabelposition,omitempty"`
	Tschchartseriesstackedareavaluelabelposition               *int32                             `protobuf:"varint,157,opt,name=tschchartseriesstackedareavaluelabelposition" json:"tschchartseriesstackedareavaluelabelposition,omitempty"`
	Tschchartseriesdefaulttrendlinestroke                      *TSD.StrokeArchive                 `protobuf:"bytes,167,opt,name=tschchartseriesdefaulttrendlinestroke" json:"tschchartseriesdefaulttrendlinestroke,omitempty"`
	Tschchartseriesdefaulttrendlineshadow                      *TSD.ShadowArchive                 `protobuf:"bytes,168,opt,name=tschchartseriesdefaulttrendlineshadow" json:"tschchartseriesdefaulttrendlineshadow,omitempty"`
	Tschchartseriesdefaulterrorbarshadow                       *TSD.ShadowArchive                 `protobuf:"bytes,180,opt,name=tschchartseriesdefaulterrorbarshadow" json:"tschchartseriesdefaulterrorbarshadow,omitempty"`
	Tschchartseriesdefaulterrorbarstroke                       *TSD.StrokeArchive                 `protobuf:"bytes,181,opt,name=tschchartseriesdefaulterrorbarstroke" json:"tschchartseriesdefaulterrorbarstroke,omitempty"`
	Tschchartseriesdefaulterrorbarstrokescatterx               *TSD.StrokeArchive                 `protobuf:"bytes,182,opt,name=tschchartseriesdefaulterrorbarstrokescatterx" json:"tschchartseriesdefaulterrorbarstrokescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarlineend                      *TSD.LineEndArchive                `protobuf:"bytes,183,opt,name=tschchartseriesdefaulterrorbarlineend" json:"tschchartseriesdefaulterrorbarlineend,omitempty"`
	Tschchartseriesdefaulterrorbarlineendscatterx              *TSD.LineEndArchive                `protobuf:"bytes,184,opt,name=tschchartseriesdefaulterrorbarlineendscatterx" json:"tschchartseriesdefaulterrorbarlineendscatterx,omitempty"`
	Tschchartseriesdefaultdeprecated3Dfill                     *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,300,opt,name=tschchartseriesdefaultdeprecated3dfill" json:"tschchartseriesdefaultdeprecated3dfill,omitempty"`
	Tschchartseriesbardeprecated3Dfill                         *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,301,opt,name=tschchartseriesbardeprecated3dfill" json:"tschchartseriesbardeprecated3dfill,omitempty"`
	Tschchartseriescolumndeprecated3Dfill                      *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,302,opt,name=tschchartseriescolumndeprecated3dfill" json:"tschchartseriescolumndeprecated3dfill,omitempty"`
	Tschchartserieslinedeprecated3Dfill                        *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,303,opt,name=tschchartserieslinedeprecated3dfill" json:"tschchartserieslinedeprecated3dfill,omitempty"`
	Tschchartseriesareadeprecated3Dfill                        *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,304,opt,name=tschchartseriesareadeprecated3dfill" json:"tschchartseriesareadeprecated3dfill,omitempty"`
	Tschchartseriespiedeprecated3Dfill                         *TSCH.DEPRECATEDChart3DFillArchive `protobuf:"bytes,305,opt,name=tschchartseriespiedeprecated3dfill" json:"tschchartseriespiedeprecated3dfill,omitempty"`
	Tschchartseries3Dbarfill                                   *TSD.FillArchive                   `protobuf:"bytes,320,opt,name=tschchartseries3dbarfill" json:"tschchartseries3dbarfill,omitempty"`
	Tschchartseries3Dcolumnfill                                *TSD.FillArchive                   `protobuf:"bytes,321,opt,name=tschchartseries3dcolumnfill" json:"tschchartseries3dcolumnfill,omitempty"`
	Tschchartseries3Dlinefill                                  *TSD.FillArchive                   `protobuf:"bytes,322,opt,name=tschchartseries3dlinefill" json:"tschchartseries3dlinefill,omitempty"`
	Tschchartseries3Dareafill                                  *TSD.FillArchive                   `protobuf:"bytes,323,opt,name=tschchartseries3dareafill" json:"tschchartseries3dareafill,omitempty"`
	Tschchartseries3Dpiefill                                   *TSD.FillArchive                   `protobuf:"bytes,324,opt,name=tschchartseries3dpiefill" json:"tschchartseries3dpiefill,omitempty"`
	XXX_NoUnkeyedLiteral                                       struct{}                           `json:"-"`
	XXX_unrecognized                                           []byte                             `json:"-"`
	XXX_sizecache                                              int32                              `json:"-"`
}

func (m *ChartSeriesStyleArchive) Reset()         { *m = ChartSeriesStyleArchive{} }
func (m *ChartSeriesStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSeriesStyleArchive) ProtoMessage()    {}
func (*ChartSeriesStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{11}
}

func (m *ChartSeriesStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSeriesStyleArchive.Unmarshal(m, b)
}
func (m *ChartSeriesStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSeriesStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartSeriesStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSeriesStyleArchive.Merge(m, src)
}
func (m *ChartSeriesStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSeriesStyleArchive.Size(m)
}
func (m *ChartSeriesStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSeriesStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSeriesStyleArchive proto.InternalMessageInfo

func (m *ChartSeriesStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineequationparagraphstyleindex != nil {
		return *m.Tschchartseriesdefaulttrendlineequationparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex != nil {
		return *m.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationopacity() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineequationopacity != nil {
		return *m.Tschchartseriesdefaulttrendlineequationopacity
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredopacity() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlinersquaredopacity != nil {
		return *m.Tschchartseriesdefaulttrendlinersquaredopacity
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbarfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesbarfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbarstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesbarstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbarvaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesbarvaluelabelposition != nil {
		return *m.Tschchartseriesbarvaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartserieslinestroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartserieslinesymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinesymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartserieslinesymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinesymbolsize() float32 {
	if m != nil && m.Tschchartserieslinesymbolsize != nil {
		return *m.Tschchartserieslinesymbolsize
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinevaluelabelposition() int32 {
	if m != nil && m.Tschchartserieslinevaluelabelposition != nil {
		return *m.Tschchartserieslinevaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareafill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesareafill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareastroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesareastroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareavaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesareavaluelabelposition != nil {
		return *m.Tschchartseriesareavaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesareasymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareasymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesareasymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareasymbolsize() float32 {
	if m != nil && m.Tschchartseriesareasymbolsize != nil {
		return *m.Tschchartseriesareasymbolsize
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespiefill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriespiefill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespiestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriespiestroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscatterstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesscatterstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesscattersymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesscattersymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolsize() float32 {
	if m != nil && m.Tschchartseriesscattersymbolsize != nil {
		return *m.Tschchartseriesscattersymbolsize
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattervaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesscattervaluelabelposition != nil {
		return *m.Tschchartseriesscattervaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesdefaultfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultvaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesdefaultvaluelabelposition != nil {
		return *m.Tschchartseriesdefaultvaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespiedeprecatedserieslabelson() bool {
	if m != nil && m.Tschchartseriespiedeprecatedserieslabelson != nil {
		return *m.Tschchartseriespiedeprecatedserieslabelson
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriescolumnfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriescolumnfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespieshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriespieshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbarshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesbarshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareashadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesareashadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattershadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesscattershadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesmixedlineshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareashadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesmixedareashadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesmixedcolumnshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartserieslineshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesdefaultshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesbubblesymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubblestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesbubblestroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesbubblesymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubblevaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesbubblevaluelabelposition != nil {
		return *m.Tschchartseriesbubblevaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubbleshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesbubbleshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartseriesbubblesymbolfilluseseriesstroke != nil {
		return *m.Tschchartseriesbubblesymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dbarshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseries3Dbarshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dcolumnshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseries3Dcolumnshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseries3Dlineshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dareashadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseries3Dareashadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dpieshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseries3Dpieshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultlabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesdefaultlabelparagraphstyleindex != nil {
		return *m.Tschchartseriesdefaultlabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbarlabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesbarlabelparagraphstyleindex != nil {
		return *m.Tschchartseriesbarlabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartserieslinelabelparagraphstyleindex != nil {
		return *m.Tschchartserieslinelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesarealabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesarealabelparagraphstyleindex != nil {
		return *m.Tschchartseriesarealabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespielabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriespielabelparagraphstyleindex != nil {
		return *m.Tschchartseriespielabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesmixedlabelparagraphstyleindex != nil {
		return *m.Tschchartseriesmixedlabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultopacity() float32 {
	if m != nil && m.Tschchartseriesdefaultopacity != nil {
		return *m.Tschchartseriesdefaultopacity
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartserieslinesymbolfilluseseriesstroke != nil {
		return *m.Tschchartserieslinesymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartseriesareasymbolfilluseseriesstroke != nil {
		return *m.Tschchartseriesareasymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartseriesscattersymbolfilluseseriesstroke != nil {
		return *m.Tschchartseriesscattersymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartseriesmixedlinesymbolfilluseseriesstroke != nil {
		return *m.Tschchartseriesmixedlinesymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesstroke() bool {
	if m != nil && m.Tschchartseriesmixedareasymbolfilluseseriesstroke != nil {
		return *m.Tschchartseriesmixedareasymbolfilluseseriesstroke
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesfill() bool {
	if m != nil && m.Tschchartserieslinesymbolfilluseseriesfill != nil {
		return *m.Tschchartserieslinesymbolfilluseseriesfill
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesfill() bool {
	if m != nil && m.Tschchartseriesareasymbolfilluseseriesfill != nil {
		return *m.Tschchartseriesareasymbolfilluseseriesfill
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesfill() bool {
	if m != nil && m.Tschchartseriesmixedlinesymbolfilluseseriesfill != nil {
		return *m.Tschchartseriesmixedlinesymbolfilluseseriesfill
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesfill() bool {
	if m != nil && m.Tschchartseriesmixedareasymbolfilluseseriesfill != nil {
		return *m.Tschchartseriesmixedareasymbolfilluseseriesfill
	}
	return false
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesmixedcolumnfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareafill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesmixedareafill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesmixedcolumnstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesmixedlinestroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareastroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesmixedareastroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolsize() float32 {
	if m != nil && m.Tschchartseriesmixedlinesymbolsize != nil {
		return *m.Tschchartseriesmixedlinesymbolsize
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolsize() float32 {
	if m != nil && m.Tschchartseriesmixedareasymbolsize != nil {
		return *m.Tschchartseriesmixedareasymbolsize
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesmixedlinesymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseriesmixedareasymbolfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesmixedlinesymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesmixedareasymbolstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnvaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesmixedcolumnvaluelabelposition != nil {
		return *m.Tschchartseriesmixedcolumnvaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedlinevaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesmixedlinevaluelabelposition != nil {
		return *m.Tschchartseriesmixedlinevaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedareavaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesmixedareavaluelabelposition != nil {
		return *m.Tschchartseriesmixedareavaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultoutsidelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesdefaultoutsidelabelparagraphstyleindex != nil {
		return *m.Tschchartseriesdefaultoutsidelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbaroutsidelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesbaroutsidelabelparagraphstyleindex != nil {
		return *m.Tschchartseriesbaroutsidelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareaoutsidelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesareaoutsidelabelparagraphstyleindex != nil {
		return *m.Tschchartseriesareaoutsidelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespieoutsidelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriespieoutsidelabelparagraphstyleindex != nil {
		return *m.Tschchartseriespieoutsidelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesmixedoutsidelabelparagraphstyleindex() int32 {
	if m != nil && m.Tschchartseriesmixedoutsidelabelparagraphstyleindex != nil {
		return *m.Tschchartseriesmixedoutsidelabelparagraphstyleindex
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesstackedbarvaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesstackedbarvaluelabelposition != nil {
		return *m.Tschchartseriesstackedbarvaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesstackedareavaluelabelposition() int32 {
	if m != nil && m.Tschchartseriesstackedareavaluelabelposition != nil {
		return *m.Tschchartseriesstackedareavaluelabelposition
	}
	return 0
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinestroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesdefaulttrendlinestroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesdefaulttrendlineshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarshadow() *TSD.ShadowArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarshadow
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstroke() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarstroke
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstrokescatterx() *TSD.StrokeArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarstrokescatterx
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineend() *TSD.LineEndArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarlineend
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineendscatterx() *TSD.LineEndArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarlineendscatterx
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesdefaultdeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartseriesdefaultdeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesbardeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartseriesbardeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriescolumndeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartseriescolumndeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartserieslinedeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartserieslinedeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriesareadeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartseriesareadeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseriespiedeprecated3Dfill() *TSCH.DEPRECATEDChart3DFillArchive {
	if m != nil {
		return m.Tschchartseriespiedeprecated3Dfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dbarfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseries3Dbarfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dcolumnfill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseries3Dcolumnfill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dlinefill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseries3Dlinefill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dareafill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseries3Dareafill
	}
	return nil
}

func (m *ChartSeriesStyleArchive) GetTschchartseries3Dpiefill() *TSD.FillArchive {
	if m != nil {
		return m.Tschchartseries3Dpiefill
	}
	return nil
}

type ChartSeriesNonStyleArchive struct {
	Super                                                    *TSS.StyleArchive                          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartseriesdefaultnumberformat                       *ChartsNumberFormatArchive                 `protobuf:"bytes,10,opt,name=tschchartseriesdefaultnumberformat" json:"tschchartseriesdefaultnumberformat,omitempty"`
	Tschchartseriesdefaultnumberformattype                   *int32                                     `protobuf:"varint,11,opt,name=tschchartseriesdefaultnumberformattype" json:"tschchartseriesdefaultnumberformattype,omitempty"`
	Tschchartseriesbarshowvaluelabels                        *bool                                      `protobuf:"varint,12,opt,name=tschchartseriesbarshowvaluelabels" json:"tschchartseriesbarshowvaluelabels,omitempty"`
	Tschchartserieslinesymboltype                            *int32                                     `protobuf:"varint,19,opt,name=tschchartserieslinesymboltype" json:"tschchartserieslinesymboltype,omitempty"`
	Tschchartserieslineshowsymbol                            *bool                                      `protobuf:"varint,20,opt,name=tschchartserieslineshowsymbol" json:"tschchartserieslineshowsymbol,omitempty"`
	Tschchartserieslineshowvaluelabels                       *bool                                      `protobuf:"varint,21,opt,name=tschchartserieslineshowvaluelabels" json:"tschchartserieslineshowvaluelabels,omitempty"`
	Tschchartseriesareashowvaluelabels                       *bool                                      `protobuf:"varint,27,opt,name=tschchartseriesareashowvaluelabels" json:"tschchartseriesareashowvaluelabels,omitempty"`
	Tschchartserieslinelinetype                              *int32                                     `protobuf:"varint,30,opt,name=tschchartserieslinelinetype" json:"tschchartserieslinelinetype,omitempty"`
	Tschchartseriesareasymboltype                            *int32                                     `protobuf:"varint,31,opt,name=tschchartseriesareasymboltype" json:"tschchartseriesareasymboltype,omitempty"`
	Tschchartseriesareashowsymbol                            *bool                                      `protobuf:"varint,32,opt,name=tschchartseriesareashowsymbol" json:"tschchartseriesareashowsymbol,omitempty"`
	Tschchartseriespieshowvaluelabels                        *bool                                      `protobuf:"varint,37,opt,name=tschchartseriespieshowvaluelabels" json:"tschchartseriespieshowvaluelabels,omitempty"`
	Tschchartseriesscattershowvaluelabels                    *bool                                      `protobuf:"varint,45,opt,name=tschchartseriesscattershowvaluelabels" json:"tschchartseriesscattershowvaluelabels,omitempty"`
	Tschchartseriespiewedgeexplosion                         *float32                                   `protobuf:"fixed32,50,opt,name=tschchartseriespiewedgeexplosion" json:"tschchartseriespiewedgeexplosion,omitempty"`
	Tschchartseriesdefaultshowvaluelabels                    *bool                                      `protobuf:"varint,51,opt,name=tschchartseriesdefaultshowvaluelabels" json:"tschchartseriesdefaultshowvaluelabels,omitempty"`
	Tschchartseriespienumberformat                           *ChartsNumberFormatArchive                 `protobuf:"bytes,52,opt,name=tschchartseriespienumberformat" json:"tschchartseriespienumberformat,omitempty"`
	Tschchartseriespienumberformattype                       *int32                                     `protobuf:"varint,53,opt,name=tschchartseriespienumberformattype" json:"tschchartseriespienumberformattype,omitempty"`
	Tschchartseriespielabelexplosion                         *float32                                   `protobuf:"fixed32,54,opt,name=tschchartseriespielabelexplosion" json:"tschchartseriespielabelexplosion,omitempty"`
	Tschchartseriesmixedlineshowsymbol                       *bool                                      `protobuf:"varint,58,opt,name=tschchartseriesmixedlineshowsymbol" json:"tschchartseriesmixedlineshowsymbol,omitempty"`
	Tschchartseriesmixedareashowsymbol                       *bool                                      `protobuf:"varint,59,opt,name=tschchartseriesmixedareashowsymbol" json:"tschchartseriesmixedareashowsymbol,omitempty"`
	Tschchartseriesmixedlinesymboltype                       *int32                                     `protobuf:"varint,60,opt,name=tschchartseriesmixedlinesymboltype" json:"tschchartseriesmixedlinesymboltype,omitempty"`
	Tschchartseriesmixedareasymboltype                       *int32                                     `protobuf:"varint,61,opt,name=tschchartseriesmixedareasymboltype" json:"tschchartseriesmixedareasymboltype,omitempty"`
	Tschchartseriesmixedshowvaluelabels                      *bool                                      `protobuf:"varint,62,opt,name=tschchartseriesmixedshowvaluelabels" json:"tschchartseriesmixedshowvaluelabels,omitempty"`
	Tschchartseriesmixedlinelinetype                         *int32                                     `protobuf:"varint,63,opt,name=tschchartseriesmixedlinelinetype" json:"tschchartseriesmixedlinelinetype,omitempty"`
	Tschchartseriesdefaultyaxisordinal                       *int32                                     `protobuf:"varint,65,opt,name=tschchartseriesdefaultyaxisordinal" json:"tschchartseriesdefaultyaxisordinal,omitempty"`
	Tschchartseriespieshowserieslabels                       *bool                                      `protobuf:"varint,66,opt,name=tschchartseriespieshowserieslabels" json:"tschchartseriespieshowserieslabels,omitempty"`
	Tschchartseriesscattershowsymbol                         *bool                                      `protobuf:"varint,69,opt,name=tschchartseriesscattershowsymbol" json:"tschchartseriesscattershowsymbol,omitempty"`
	Tschchartseriesscattersymboltype                         *int32                                     `protobuf:"varint,70,opt,name=tschchartseriesscattersymboltype" json:"tschchartseriesscattersymboltype,omitempty"`
	Tschchartseriesscatterlinetype                           *int32                                     `protobuf:"varint,71,opt,name=tschchartseriesscatterlinetype" json:"tschchartseriesscatterlinetype,omitempty"`
	Tschchartseriesscattershowline                           *bool                                      `protobuf:"varint,72,opt,name=tschchartseriesscattershowline" json:"tschchartseriesscattershowline,omitempty"`
	Tschchartseriesstackedpercentnumberformat                *ChartsNumberFormatArchive                 `protobuf:"bytes,90,opt,name=tschchartseriesstackedpercentnumberformat" json:"tschchartseriesstackedpercentnumberformat,omitempty"`
	Tschchartseriesdefaultseriestype                         *int32                                     `protobuf:"varint,126,opt,name=tschchartseriesdefaultseriestype" json:"tschchartseriesdefaultseriestype,omitempty"`
	Tschchartseriesdefaulttrendlinetype                      *int32                                     `protobuf:"varint,160,opt,name=tschchartseriesdefaulttrendlinetype" json:"tschchartseriesdefaulttrendlinetype,omitempty"`
	Tschchartseriesdefaulttrendlineorder                     *int32                                     `protobuf:"varint,161,opt,name=tschchartseriesdefaulttrendlineorder" json:"tschchartseriesdefaulttrendlineorder,omitempty"`
	Tschchartseriesdefaulttrendlineperiod                    *int32                                     `protobuf:"varint,162,opt,name=tschchartseriesdefaulttrendlineperiod" json:"tschchartseriesdefaulttrendlineperiod,omitempty"`
	Tschchartseriesdefaulttrendlineshowlabel                 *bool                                      `protobuf:"varint,163,opt,name=tschchartseriesdefaulttrendlineshowlabel" json:"tschchartseriesdefaulttrendlineshowlabel,omitempty"`
	Tschchartseriesdefaulttrendlinelabelstring               *string                                    `protobuf:"bytes,164,opt,name=tschchartseriesdefaulttrendlinelabelstring" json:"tschchartseriesdefaulttrendlinelabelstring,omitempty"`
	Tschchartseriesdefaulttrendlineshowequation              *bool                                      `protobuf:"varint,165,opt,name=tschchartseriesdefaulttrendlineshowequation" json:"tschchartseriesdefaulttrendlineshowequation,omitempty"`
	Tschchartseriesdefaulttrendlineshowr2Value               *bool                                      `protobuf:"varint,166,opt,name=tschchartseriesdefaulttrendlineshowr2value" json:"tschchartseriesdefaulttrendlineshowr2value,omitempty"`
	Tschchartseriesdefaulterrorbarsetting                    *int32                                     `protobuf:"varint,170,opt,name=tschchartseriesdefaulterrorbarsetting" json:"tschchartseriesdefaulterrorbarsetting,omitempty"`
	Tschchartseriesdefaulterrorbarsettingscatterx            *int32                                     `protobuf:"varint,171,opt,name=tschchartseriesdefaulterrorbarsettingscatterx" json:"tschchartseriesdefaulterrorbarsettingscatterx,omitempty"`
	Tschchartseriesdefaulterrorbartype                       *int32                                     `protobuf:"varint,172,opt,name=tschchartseriesdefaulterrorbartype" json:"tschchartseriesdefaulterrorbartype,omitempty"`
	Tschchartseriesdefaulterrorbartypescatterx               *int32                                     `protobuf:"varint,173,opt,name=tschchartseriesdefaulterrorbartypescatterx" json:"tschchartseriesdefaulterrorbartypescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvalue                 *float32                                   `protobuf:"fixed32,174,opt,name=tschchartseriesdefaulterrorbarfixedvalue" json:"tschchartseriesdefaulterrorbarfixedvalue,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvaluescatterx         *float32                                   `protobuf:"fixed32,175,opt,name=tschchartseriesdefaulterrorbarfixedvaluescatterx" json:"tschchartseriesdefaulterrorbarfixedvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvalue               *float32                                   `protobuf:"fixed32,176,opt,name=tschchartseriesdefaulterrorbarpercentvalue" json:"tschchartseriesdefaulterrorbarpercentvalue,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvaluescatterx       *float32                                   `protobuf:"fixed32,177,opt,name=tschchartseriesdefaulterrorbarpercentvaluescatterx" json:"tschchartseriesdefaulterrorbarpercentvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvalue                *float32                                   `protobuf:"fixed32,178,opt,name=tschchartseriesdefaulterrorbarstddevvalue" json:"tschchartseriesdefaulterrorbarstddevvalue,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvaluescatterx        *float32                                   `protobuf:"fixed32,179,opt,name=tschchartseriesdefaulterrorbarstddevvaluescatterx" json:"tschchartseriesdefaulterrorbarstddevvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedata         *TSCH.ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,190,opt,name=tschchartseriesdefaulterrorbarcustompositivedata" json:"tschchartseriesdefaulterrorbarcustompositivedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedatascatterx *TSCH.ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,191,opt,name=tschchartseriesdefaulterrorbarcustompositivedatascatterx" json:"tschchartseriesdefaulterrorbarcustompositivedatascatterx,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedata         *TSCH.ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,192,opt,name=tschchartseriesdefaulterrorbarcustomnegativedata" json:"tschchartseriesdefaulterrorbarcustomnegativedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedatascatterx *TSCH.ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,193,opt,name=tschchartseriesdefaulterrorbarcustomnegativedatascatterx" json:"tschchartseriesdefaulterrorbarcustomnegativedatascatterx,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsetx           *float32                                   `protobuf:"fixed32,194,opt,name=tschchartseriesdefaulttrendlineequationoffsetx" json:"tschchartseriesdefaulttrendlineequationoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsety           *float32                                   `protobuf:"fixed32,195,opt,name=tschchartseriesdefaulttrendlineequationoffsety" json:"tschchartseriesdefaulttrendlineequationoffsety,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsetx           *float32                                   `protobuf:"fixed32,196,opt,name=tschchartseriesdefaulttrendlinersquaredoffsetx" json:"tschchartseriesdefaulttrendlinersquaredoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsety           *float32                                   `protobuf:"fixed32,197,opt,name=tschchartseriesdefaulttrendlinersquaredoffsety" json:"tschchartseriesdefaulttrendlinersquaredoffsety,omitempty"`
	Tschchartseriesdefaultshowtrendline                      *bool                                      `protobuf:"varint,198,opt,name=tschchartseriesdefaultshowtrendline" json:"tschchartseriesdefaultshowtrendline,omitempty"`
	Tschchartseriesdefaultshowerrorbar                       *bool                                      `protobuf:"varint,199,opt,name=tschchartseriesdefaultshowerrorbar" json:"tschchartseriesdefaultshowerrorbar,omitempty"`
	Tschchartseriesdefaultshowerrorbarscatterx               *bool                                      `protobuf:"varint,200,opt,name=tschchartseriesdefaultshowerrorbarscatterx" json:"tschchartseriesdefaultshowerrorbarscatterx,omitempty"`
	Tschchartseriesbubblesizedimension                       *int32                                     `protobuf:"varint,208,opt,name=tschchartseriesbubblesizedimension" json:"tschchartseriesbubblesizedimension,omitempty"`
	Tschchartseriesbubbleshowvaluelabels                     *bool                                      `protobuf:"varint,209,opt,name=tschchartseriesbubbleshowvaluelabels" json:"tschchartseriesbubbleshowvaluelabels,omitempty"`
	Tschchartseriesbubblelinetype                            *int32                                     `protobuf:"varint,210,opt,name=tschchartseriesbubblelinetype" json:"tschchartseriesbubblelinetype,omitempty"`
	Tschchartseriesbubbleshownegativedata                    *bool                                      `protobuf:"varint,216,opt,name=tschchartseriesbubbleshownegativedata" json:"tschchartseriesbubbleshownegativedata,omitempty"`
	Tschchartseriesbubbleadjustmentscale                     *float32                                   `protobuf:"fixed32,217,opt,name=tschchartseriesbubbleadjustmentscale" json:"tschchartseriesbubbleadjustmentscale,omitempty"`
	XXX_NoUnkeyedLiteral                                     struct{}                                   `json:"-"`
	XXX_unrecognized                                         []byte                                     `json:"-"`
	XXX_sizecache                                            int32                                      `json:"-"`
}

func (m *ChartSeriesNonStyleArchive) Reset()         { *m = ChartSeriesNonStyleArchive{} }
func (m *ChartSeriesNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSeriesNonStyleArchive) ProtoMessage()    {}
func (*ChartSeriesNonStyleArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9292c39036a678f, []int{12}
}

func (m *ChartSeriesNonStyleArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSeriesNonStyleArchive.Unmarshal(m, b)
}
func (m *ChartSeriesNonStyleArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSeriesNonStyleArchive.Marshal(b, m, deterministic)
}
func (m *ChartSeriesNonStyleArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSeriesNonStyleArchive.Merge(m, src)
}
func (m *ChartSeriesNonStyleArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSeriesNonStyleArchive.Size(m)
}
func (m *ChartSeriesNonStyleArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSeriesNonStyleArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSeriesNonStyleArchive proto.InternalMessageInfo

func (m *ChartSeriesNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformat() *ChartsNumberFormatArchive {
	if m != nil {
		return m.Tschchartseriesdefaultnumberformat
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformattype() int32 {
	if m != nil && m.Tschchartseriesdefaultnumberformattype != nil {
		return *m.Tschchartseriesdefaultnumberformattype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbarshowvaluelabels() bool {
	if m != nil && m.Tschchartseriesbarshowvaluelabels != nil {
		return *m.Tschchartseriesbarshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartserieslinesymboltype() int32 {
	if m != nil && m.Tschchartserieslinesymboltype != nil {
		return *m.Tschchartserieslinesymboltype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartserieslineshowsymbol() bool {
	if m != nil && m.Tschchartserieslineshowsymbol != nil {
		return *m.Tschchartserieslineshowsymbol
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartserieslineshowvaluelabels() bool {
	if m != nil && m.Tschchartserieslineshowvaluelabels != nil {
		return *m.Tschchartserieslineshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesareashowvaluelabels() bool {
	if m != nil && m.Tschchartseriesareashowvaluelabels != nil {
		return *m.Tschchartseriesareashowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartserieslinelinetype() int32 {
	if m != nil && m.Tschchartserieslinelinetype != nil {
		return *m.Tschchartserieslinelinetype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesareasymboltype() int32 {
	if m != nil && m.Tschchartseriesareasymboltype != nil {
		return *m.Tschchartseriesareasymboltype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesareashowsymbol() bool {
	if m != nil && m.Tschchartseriesareashowsymbol != nil {
		return *m.Tschchartseriesareashowsymbol
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespieshowvaluelabels() bool {
	if m != nil && m.Tschchartseriespieshowvaluelabels != nil {
		return *m.Tschchartseriespieshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowvaluelabels() bool {
	if m != nil && m.Tschchartseriesscattershowvaluelabels != nil {
		return *m.Tschchartseriesscattershowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespiewedgeexplosion() float32 {
	if m != nil && m.Tschchartseriespiewedgeexplosion != nil {
		return *m.Tschchartseriespiewedgeexplosion
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowvaluelabels() bool {
	if m != nil && m.Tschchartseriesdefaultshowvaluelabels != nil {
		return *m.Tschchartseriesdefaultshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespienumberformat() *ChartsNumberFormatArchive {
	if m != nil {
		return m.Tschchartseriespienumberformat
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespienumberformattype() int32 {
	if m != nil && m.Tschchartseriespienumberformattype != nil {
		return *m.Tschchartseriespienumberformattype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespielabelexplosion() float32 {
	if m != nil && m.Tschchartseriespielabelexplosion != nil {
		return *m.Tschchartseriespielabelexplosion
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlineshowsymbol() bool {
	if m != nil && m.Tschchartseriesmixedlineshowsymbol != nil {
		return *m.Tschchartseriesmixedlineshowsymbol
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedareashowsymbol() bool {
	if m != nil && m.Tschchartseriesmixedareashowsymbol != nil {
		return *m.Tschchartseriesmixedareashowsymbol
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlinesymboltype() int32 {
	if m != nil && m.Tschchartseriesmixedlinesymboltype != nil {
		return *m.Tschchartseriesmixedlinesymboltype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedareasymboltype() int32 {
	if m != nil && m.Tschchartseriesmixedareasymboltype != nil {
		return *m.Tschchartseriesmixedareasymboltype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedshowvaluelabels() bool {
	if m != nil && m.Tschchartseriesmixedshowvaluelabels != nil {
		return *m.Tschchartseriesmixedshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlinelinetype() int32 {
	if m != nil && m.Tschchartseriesmixedlinelinetype != nil {
		return *m.Tschchartseriesmixedlinelinetype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultyaxisordinal() int32 {
	if m != nil && m.Tschchartseriesdefaultyaxisordinal != nil {
		return *m.Tschchartseriesdefaultyaxisordinal
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriespieshowserieslabels() bool {
	if m != nil && m.Tschchartseriespieshowserieslabels != nil {
		return *m.Tschchartseriespieshowserieslabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowsymbol() bool {
	if m != nil && m.Tschchartseriesscattershowsymbol != nil {
		return *m.Tschchartseriesscattershowsymbol
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesscattersymboltype() int32 {
	if m != nil && m.Tschchartseriesscattersymboltype != nil {
		return *m.Tschchartseriesscattersymboltype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesscatterlinetype() int32 {
	if m != nil && m.Tschchartseriesscatterlinetype != nil {
		return *m.Tschchartseriesscatterlinetype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowline() bool {
	if m != nil && m.Tschchartseriesscattershowline != nil {
		return *m.Tschchartseriesscattershowline
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesstackedpercentnumberformat() *ChartsNumberFormatArchive {
	if m != nil {
		return m.Tschchartseriesstackedpercentnumberformat
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultseriestype() int32 {
	if m != nil && m.Tschchartseriesdefaultseriestype != nil {
		return *m.Tschchartseriesdefaultseriestype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinetype() int32 {
	if m != nil && m.Tschchartseriesdefaulttrendlinetype != nil {
		return *m.Tschchartseriesdefaulttrendlinetype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineorder() int32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineorder != nil {
		return *m.Tschchartseriesdefaulttrendlineorder
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineperiod() int32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineperiod != nil {
		return *m.Tschchartseriesdefaulttrendlineperiod
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowlabel() bool {
	if m != nil && m.Tschchartseriesdefaulttrendlineshowlabel != nil {
		return *m.Tschchartseriesdefaulttrendlineshowlabel
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinelabelstring() string {
	if m != nil && m.Tschchartseriesdefaulttrendlinelabelstring != nil {
		return *m.Tschchartseriesdefaulttrendlinelabelstring
	}
	return ""
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowequation() bool {
	if m != nil && m.Tschchartseriesdefaulttrendlineshowequation != nil {
		return *m.Tschchartseriesdefaulttrendlineshowequation
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowr2Value() bool {
	if m != nil && m.Tschchartseriesdefaulttrendlineshowr2Value != nil {
		return *m.Tschchartseriesdefaulttrendlineshowr2Value
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsetting() int32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarsetting != nil {
		return *m.Tschchartseriesdefaulterrorbarsetting
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsettingscatterx() int32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarsettingscatterx != nil {
		return *m.Tschchartseriesdefaulterrorbarsettingscatterx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartype() int32 {
	if m != nil && m.Tschchartseriesdefaulterrorbartype != nil {
		return *m.Tschchartseriesdefaulterrorbartype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartypescatterx() int32 {
	if m != nil && m.Tschchartseriesdefaulterrorbartypescatterx != nil {
		return *m.Tschchartseriesdefaulterrorbartypescatterx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvalue() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarfixedvalue != nil {
		return *m.Tschchartseriesdefaulterrorbarfixedvalue
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvaluescatterx() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarfixedvaluescatterx != nil {
		return *m.Tschchartseriesdefaulterrorbarfixedvaluescatterx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvalue() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarpercentvalue != nil {
		return *m.Tschchartseriesdefaulterrorbarpercentvalue
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvaluescatterx() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarpercentvaluescatterx != nil {
		return *m.Tschchartseriesdefaulterrorbarpercentvaluescatterx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvalue() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarstddevvalue != nil {
		return *m.Tschchartseriesdefaulterrorbarstddevvalue
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvaluescatterx() float32 {
	if m != nil && m.Tschchartseriesdefaulterrorbarstddevvaluescatterx != nil {
		return *m.Tschchartseriesdefaulterrorbarstddevvaluescatterx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedata() *TSCH.ChartsNSArrayOfNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarcustompositivedata
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedatascatterx() *TSCH.ChartsNSArrayOfNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarcustompositivedatascatterx
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedata() *TSCH.ChartsNSArrayOfNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarcustomnegativedata
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedatascatterx() *TSCH.ChartsNSArrayOfNSNumberDoubleArchive {
	if m != nil {
		return m.Tschchartseriesdefaulterrorbarcustomnegativedatascatterx
	}
	return nil
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsetx() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineequationoffsetx != nil {
		return *m.Tschchartseriesdefaulttrendlineequationoffsetx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsety() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlineequationoffsety != nil {
		return *m.Tschchartseriesdefaulttrendlineequationoffsety
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsetx() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlinersquaredoffsetx != nil {
		return *m.Tschchartseriesdefaulttrendlinersquaredoffsetx
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsety() float32 {
	if m != nil && m.Tschchartseriesdefaulttrendlinersquaredoffsety != nil {
		return *m.Tschchartseriesdefaulttrendlinersquaredoffsety
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowtrendline() bool {
	if m != nil && m.Tschchartseriesdefaultshowtrendline != nil {
		return *m.Tschchartseriesdefaultshowtrendline
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbar() bool {
	if m != nil && m.Tschchartseriesdefaultshowerrorbar != nil {
		return *m.Tschchartseriesdefaultshowerrorbar
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbarscatterx() bool {
	if m != nil && m.Tschchartseriesdefaultshowerrorbarscatterx != nil {
		return *m.Tschchartseriesdefaultshowerrorbarscatterx
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbubblesizedimension() int32 {
	if m != nil && m.Tschchartseriesbubblesizedimension != nil {
		return *m.Tschchartseriesbubblesizedimension
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshowvaluelabels() bool {
	if m != nil && m.Tschchartseriesbubbleshowvaluelabels != nil {
		return *m.Tschchartseriesbubbleshowvaluelabels
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbubblelinetype() int32 {
	if m != nil && m.Tschchartseriesbubblelinetype != nil {
		return *m.Tschchartseriesbubblelinetype
	}
	return 0
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshownegativedata() bool {
	if m != nil && m.Tschchartseriesbubbleshownegativedata != nil {
		return *m.Tschchartseriesbubbleshownegativedata
	}
	return false
}

func (m *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleadjustmentscale() float32 {
	if m != nil && m.Tschchartseriesbubbleadjustmentscale != nil {
		return *m.Tschchartseriesbubbleadjustmentscale
	}
	return 0
}

func init() {
	proto.RegisterType((*ChartInfoArchive)(nil), "TSCH.PreUFF.ChartInfoArchive")
	proto.RegisterType((*LegendModelArchive)(nil), "TSCH.PreUFF.LegendModelArchive")
	proto.RegisterType((*ChartModelArchive)(nil), "TSCH.PreUFF.ChartModelArchive")
	proto.RegisterType((*ChartGridArchive)(nil), "TSCH.PreUFF.ChartGridArchive")
	proto.RegisterType((*ChartGridArchive_ValueRow)(nil), "TSCH.PreUFF.ChartGridArchive.ValueRow")
	proto.RegisterType((*ChartsNumberFormatArchive)(nil), "TSCH.PreUFF.ChartsNumberFormatArchive")
	proto.RegisterType((*ChartStyleArchive)(nil), "TSCH.PreUFF.ChartStyleArchive")
	proto.RegisterType((*ChartNonStyleArchive)(nil), "TSCH.PreUFF.ChartNonStyleArchive")
	proto.RegisterType((*LegendStyleArchive)(nil), "TSCH.PreUFF.LegendStyleArchive")
	proto.RegisterType((*LegendNonStyleArchive)(nil), "TSCH.PreUFF.LegendNonStyleArchive")
	proto.RegisterType((*ChartAxisStyleArchive)(nil), "TSCH.PreUFF.ChartAxisStyleArchive")
	proto.RegisterType((*ChartAxisNonStyleArchive)(nil), "TSCH.PreUFF.ChartAxisNonStyleArchive")
	proto.RegisterType((*ChartSeriesStyleArchive)(nil), "TSCH.PreUFF.ChartSeriesStyleArchive")
	proto.RegisterType((*ChartSeriesNonStyleArchive)(nil), "TSCH.PreUFF.ChartSeriesNonStyleArchive")
}

func init() { proto.RegisterFile("TSCHPreUFFArchives.proto", fileDescriptor_e9292c39036a678f) }

var fileDescriptor_e9292c39036a678f = []byte{
	// 5936 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5d, 0x59, 0x78, 0xdd, 0xc6,
	0x75, 0xfe, 0x40, 0x49, 0x31, 0x39, 0x14, 0x25, 0x72, 0xb4, 0x41, 0xf2, 0x22, 0x9a, 0xb2, 0x63,
	0x46, 0xb1, 0xa9, 0x44, 0xf4, 0x22, 0x3b, 0x8e, 0x6d, 0x89, 0x14, 0x6d, 0xa5, 0x96, 0xc4, 0x5e,
	0x52, 0x72, 0xbc, 0xc4, 0xd7, 0xb8, 0xc0, 0xdc, 0x4b, 0x58, 0xf7, 0x02, 0xd7, 0x00, 0x2e, 0x17,
	0xa5, 0xcb, 0xf7, 0xb5, 0x69, 0x9a, 0xb6, 0x69, 0xfa, 0x92, 0xaf, 0xe9, 0xfa, 0x7d, 0xdd, 0xd3,
	0x25, 0x5e, 0x63, 0x3b, 0xe9, 0x96, 0xc4, 0x4b, 0xf6, 0x66, 0xe9, 0xde, 0xbe, 0xf4, 0xa9, 0x2f,
	0x7d, 0xe8, 0x6b, 0x9f, 0xfb, 0xe1, 0x0c, 0x80, 0x3b, 0x00, 0xce, 0x0c, 0x06, 0x37, 0xc9, 0x93,
	0x2d, 0xcc, 0x7f, 0xfe, 0x73, 0xe6, 0xcc, 0xcc, 0x99, 0x33, 0xdb, 0x25, 0x31, 0xd7, 0xd7, 0x96,
	0x1e, 0x5b, 0x0d, 0xd8, 0x95, 0x95, 0x95, 0xb3, 0x81, 0xbd, 0xe1, 0x6e, 0xb2, 0x70, 0xa1, 0x1f,
	0xf8, 0x91, 0x4f, 0x27, 0xe3, 0x92, 0x05, 0x5e, 0x74, 0x6c, 0x66, 0x7d, 0x6d, 0xf5, 0x22, 0x0b,
	0x43, 0xab, 0x93, 0x96, 0xc7, 0x9f, 0x96, 0xf3, 0x22, 0xf1, 0xa7, 0xb5, 0xc2, 0xa7, 0xa3, 0x31,
	0x4b, 0xf6, 0x6d, 0xc9, 0xef, 0xf5, 0x7c, 0x2f, 0x29, 0x3a, 0x18, 0x17, 0x2d, 0x16, 0x38, 0xe6,
	0xfe, 0x8b, 0x90, 0xe9, 0xa5, 0x0d, 0x2b, 0x88, 0x2e, 0x78, 0x6d, 0x3f, 0x29, 0xa3, 0x27, 0xc9,
	0x9e, 0x70, 0xd0, 0x67, 0x81, 0x69, 0xcc, 0x8e, 0xcd, 0x4f, 0x9e, 0x3e, 0xb8, 0xb0, 0xbe, 0xb6,
	0xbc, 0xb0, 0x1c, 0x58, 0x5b, 0x56, 0xab, 0xcb, 0x12, 0x50, 0x83, 0x43, 0xe8, 0xc3, 0x64, 0xd2,
	0x8e, 0xe5, 0x9b, 0x3d, 0xdf, 0x61, 0x5d, 0x73, 0x0c, 0x24, 0x6e, 0x59, 0x10, 0x6a, 0xb3, 0x00,
	0xfc, 0x17, 0xe3, 0xe2, 0x54, 0x96, 0xd8, 0xd9, 0x27, 0x7a, 0x1b, 0xd9, 0x13, 0x46, 0x3b, 0x5d,
	0x66, 0xee, 0x9a, 0x35, 0xe6, 0x27, 0x4f, 0xef, 0x5b, 0x58, 0x5f, 0x5b, 0x5d, 0x68, 0xb0, 0x36,
	0x0b, 0x98, 0x67, 0xc7, 0x6a, 0xe2, 0x42, 0xba, 0x40, 0xb8, 0x4c, 0x33, 0xda, 0xe9, 0x33, 0x73,
	0xf7, 0xec, 0xd8, 0xfc, 0xbe, 0xd3, 0xfb, 0xb9, 0x16, 0xa0, 0x5f, 0xdf, 0xe9, 0xb3, 0xc6, 0x84,
	0x9d, 0xfe, 0x2f, 0x3d, 0x47, 0xf6, 0x76, 0x59, 0x87, 0x79, 0x4e, 0x62, 0xd7, 0x1e, 0x20, 0x3f,
	0x9e, 0xb3, 0xeb, 0x71, 0x00, 0xe4, 0x0c, 0x9b, 0xec, 0x0e, 0xbf, 0xd1, 0x0f, 0x93, 0x19, 0xd7,
	0xf3, 0x58, 0xd0, 0xe4, 0x9a, 0xdb, 0x81, 0xd5, 0x63, 0xe6, 0x7b, 0xa0, 0x82, 0x33, 0x9c, 0xa8,
	0xc1, 0xec, 0x28, 0x15, 0xdd, 0x0f, 0x58, 0x30, 0x66, 0x25, 0x46, 0xd2, 0x07, 0xc8, 0xcc, 0xa6,
	0xd5, 0x1d, 0xb0, 0xa6, 0xb5, 0xed, 0x86, 0x4d, 0xa8, 0x46, 0x68, 0xde, 0x30, 0xbb, 0x0b, 0xa9,
	0xe4, 0x7e, 0x00, 0x9e, 0xdd, 0x76, 0xc3, 0x35, 0x80, 0xd1, 0x47, 0xc8, 0x41, 0xdb, 0x8a, 0x58,
	0xc7, 0x0f, 0x76, 0x72, 0xe2, 0xe3, 0xa8, 0x38, 0x4d, 0xb1, 0x79, 0x06, 0x41, 0xbb, 0xe7, 0x7b,
	0x09, 0xc3, 0x04, 0xce, 0x90, 0x19, 0x70, 0x29, 0x45, 0xd2, 0x15, 0x72, 0x24, 0x6f, 0xc3, 0x90,
	0x84, 0xa0, 0x24, 0x87, 0x44, 0x33, 0x86, 0x3c, 0x0f, 0x91, 0x03, 0x21, 0x0b, 0x5c, 0x16, 0x36,
	0xa3, 0x0d, 0xd6, 0x63, 0x69, 0x55, 0x26, 0x51, 0x8e, 0x19, 0x0e, 0x5d, 0x8f, 0x91, 0x49, 0x4d,
	0xae, 0x90, 0x43, 0x89, 0x7c, 0x3f, 0x70, 0x37, 0xad, 0x28, 0x63, 0xd8, 0x0b, 0x6d, 0x7a, 0x2b,
	0x6f, 0x8a, 0xb5, 0xbe, 0x15, 0x84, 0x2c, 0x23, 0x3a, 0x1b, 0x04, 0xd6, 0x4e, 0xda, 0x34, 0x89,
	0xfe, 0x55, 0x2e, 0x9e, 0xd0, 0x5e, 0x24, 0x89, 0xae, 0xb8, 0x5e, 0x29, 0xe5, 0x94, 0x2e, 0xe5,
	0x7e, 0x2e, 0x7b, 0xc9, 0xf7, 0x12, 0xba, 0xf7, 0x93, 0x89, 0x8c, 0xc7, 0xdc, 0x87, 0x76, 0xe5,
	0x71, 0x2f, 0x41, 0xd3, 0x93, 0x64, 0xbc, 0xc7, 0x1c, 0xd7, 0x8a, 0xfc, 0xc0, 0xdc, 0x8f, 0x63,
	0xd3, 0x72, 0x7a, 0x86, 0x50, 0xdb, 0x61, 0xcd, 0x7e, 0xc0, 0x36, 0x5d, 0xb6, 0xd5, 0xf4, 0x03,
	0xb7, 0xe3, 0x7a, 0xe6, 0x34, 0x48, 0x11, 0x90, 0x5a, 0xf5, 0x5d, 0x2f, 0x6a, 0x4c, 0xdb, 0x0e,
	0x5b, 0xe5, 0xa0, 0xcb, 0x80, 0xa1, 0x0f, 0x12, 0xca, 0x7b, 0x2e, 0x18, 0x15, 0x33, 0x84, 0x2c,
	0x32, 0x67, 0x50, 0x7d, 0xd3, 0x80, 0x04, 0xeb, 0x56, 0x01, 0x47, 0xef, 0x27, 0xd3, 0x7d, 0x2b,
	0xb0, 0x3a, 0x81, 0xd5, 0xdf, 0x48, 0xdd, 0x43, 0xf1, 0xde, 0x9b, 0xe1, 0x12, 0x5f, 0xdc, 0x4f,
	0x8e, 0x75, 0xad, 0x30, 0x6a, 0x06, 0xfe, 0x56, 0x33, 0x64, 0x76, 0xc4, 0x9c, 0xa6, 0xeb, 0xc5,
	0xad, 0xdf, 0xb4, 0x1d, 0x66, 0x1e, 0x98, 0x35, 0xe6, 0xf7, 0x34, 0x0e, 0xc5, 0x88, 0x86, 0xbf,
	0xb5, 0x06, 0xe5, 0x17, 0xbc, 0xf5, 0x0d, 0xb6, 0xe4, 0x30, 0xfa, 0x30, 0xb9, 0x19, 0x44, 0x6d,
	0xbf, 0x3b, 0xe8, 0x79, 0x88, 0xf4, 0x41, 0x90, 0x36, 0x63, 0xd0, 0x12, 0x60, 0x0a, 0x04, 0xf7,
	0x11, 0xb3, 0x5c, 0xe9, 0xa6, 0xeb, 0x39, 0x6c, 0xdb, 0x3c, 0xc4, 0x35, 0x17, 0xab, 0x7a, 0x21,
	0x2e, 0xa4, 0x57, 0xc8, 0xbc, 0xc7, 0x98, 0x13, 0x36, 0x6d, 0xab, 0x6b, 0x37, 0x99, 0xd7, 0x71,
	0x3d, 0xd6, 0x74, 0xe2, 0x4a, 0x06, 0xb1, 0x05, 0xbd, 0xbe, 0x1f, 0x44, 0x4d, 0xcb, 0x8e, 0x5c,
	0xdf, 0x33, 0x0f, 0xcf, 0x1a, 0xf3, 0xe3, 0x8d, 0x13, 0x80, 0x5f, 0xb2, 0xba, 0xf6, 0x79, 0x40,
	0x2f, 0x27, 0xe0, 0x0b, 0x80, 0x3d, 0x0b, 0xd0, 0xb9, 0xd7, 0x0d, 0x42, 0xcb, 0x81, 0x86, 0xce,
	0x91, 0xdd, 0xae, 0xd7, 0xf6, 0x4d, 0x03, 0x6d, 0x0d, 0x28, 0xa3, 0x77, 0x90, 0x3d, 0x3c, 0xe6,
	0x8c, 0xc9, 0x62, 0x0e, 0x2f, 0x17, 0x43, 0xe8, 0x98, 0x3c, 0x84, 0xe6, 0x7a, 0xe8, 0x6e, 0x14,
	0x99, 0xf5, 0xd0, 0xb9, 0xcf, 0x8e, 0x91, 0x99, 0x52, 0xdc, 0xd6, 0xb2, 0x7a, 0x8e, 0xec, 0xee,
	0x04, 0xae, 0x93, 0x18, 0x5d, 0xc2, 0xc4, 0x65, 0xf4, 0x56, 0xb2, 0x37, 0x0d, 0x09, 0x3b, 0x7d,
	0x16, 0x9a, 0xbb, 0x66, 0x77, 0xcd, 0x4f, 0x35, 0x26, 0x93, 0xb1, 0x1f, 0x7f, 0xa2, 0xb7, 0x93,
	0x7d, 0xa1, 0x6d, 0x45, 0x11, 0x0b, 0x9a, 0x6d, 0x3f, 0xe8, 0x59, 0x91, 0xb9, 0x7b, 0xd6, 0x98,
	0x9f, 0x6a, 0x4c, 0x25, 0x5f, 0x57, 0xe0, 0x23, 0x7d, 0x88, 0x4c, 0xba, 0x5e, 0x37, 0x6e, 0x2a,
	0x50, 0xca, 0xc3, 0xfc, 0xcd, 0xe5, 0xe9, 0xe7, 0xd1, 0xc0, 0x75, 0xb2, 0xd9, 0x87, 0x4b, 0xc4,
	0x9f, 0xe8, 0x5d, 0x84, 0xf6, 0x06, 0xdd, 0xc8, 0x75, 0xac, 0xc8, 0x1a, 0x76, 0x94, 0xf7, 0x80,
	0xaa, 0x19, 0xb1, 0x04, 0x3a, 0xc9, 0xdc, 0xff, 0x18, 0xc9, 0x74, 0x29, 0xf0, 0xd1, 0x9b, 0xc8,
	0x84, 0xe3, 0x06, 0x8c, 0x77, 0x8d, 0x78, 0xca, 0xdc, 0xd3, 0x18, 0x7e, 0xa0, 0x47, 0xc9, 0x78,
	0x3c, 0x0e, 0x3c, 0xde, 0x90, 0xbb, 0xe6, 0x27, 0x1a, 0x37, 0x04, 0xfe, 0xd6, 0xa5, 0xb8, 0xdd,
	0x8e, 0x93, 0xc9, 0xa4, 0x9f, 0x43, 0xe9, 0x2e, 0x28, 0x25, 0xfc, 0x13, 0x00, 0x96, 0xc8, 0x04,
	0x0f, 0xe2, 0x81, 0xbf, 0x65, 0xee, 0x86, 0xc1, 0xf7, 0x5e, 0x65, 0xdd, 0x16, 0xae, 0xc6, 0xf0,
	0x86, 0xbf, 0xd5, 0x18, 0xdf, 0x4c, 0xfe, 0x8f, 0x1e, 0x24, 0x7b, 0x1c, 0x37, 0x88, 0x76, 0x60,
	0xea, 0x1a, 0x6f, 0xf0, 0x7f, 0x1c, 0x9b, 0x25, 0xe3, 0x57, 0x05, 0x04, 0xa0, 0x4d, 0x63, 0x76,
	0xd7, 0xbc, 0xd1, 0xe0, 0xff, 0x98, 0xfb, 0xbf, 0x09, 0x72, 0x14, 0xf8, 0xc3, 0x4b, 0x83, 0x5e,
	0x2b, 0xf5, 0x78, 0x5a, 0xe9, 0xbb, 0x09, 0xe1, 0xa6, 0xc1, 0x84, 0x6c, 0xc0, 0x84, 0x7c, 0x88,
	0xdb, 0xc6, 0xe1, 0xc0, 0xce, 0xa7, 0xe5, 0xcd, 0xf4, 0x7f, 0xe9, 0x09, 0x32, 0xc5, 0x5b, 0xb3,
	0x19, 0x46, 0x81, 0xeb, 0x75, 0xcc, 0xb1, 0x59, 0x63, 0x7e, 0xa2, 0xb1, 0x97, 0x7f, 0x5c, 0x83,
	0x6f, 0x71, 0xd3, 0x3b, 0xcc, 0x76, 0x7b, 0x56, 0xb7, 0xd9, 0xef, 0x5a, 0x36, 0xf4, 0x8f, 0xb1,
	0xb8, 0xe9, 0x93, 0xaf, 0xab, 0xf0, 0x31, 0xe6, 0xb2, 0x07, 0x41, 0xdc, 0xad, 0x76, 0x9a, 0xb6,
	0xef, 0x30, 0xe8, 0x20, 0x13, 0x8d, 0xbd, 0xe9, 0xc7, 0x25, 0xdf, 0x61, 0xf4, 0x11, 0xb2, 0xcf,
	0x63, 0x1d, 0x2b, 0x72, 0x37, 0x93, 0x69, 0xc3, 0xdc, 0x03, 0xa6, 0x1e, 0x4d, 0x4c, 0x4d, 0xca,
	0xb8, 0xc9, 0xd0, 0xf5, 0x1b, 0x53, 0xa9, 0x00, 0x8f, 0xd5, 0x67, 0x88, 0x19, 0x6e, 0xf8, 0x5b,
	0xcd, 0x68, 0xc3, 0x1f, 0x84, 0x96, 0xe7, 0x84, 0xcd, 0x90, 0xc5, 0x01, 0x2f, 0x8e, 0xdd, 0xdc,
	0xa3, 0x87, 0xe3, 0xf2, 0xf5, 0xb4, 0x78, 0x2d, 0x2d, 0xa5, 0x4b, 0x64, 0xa6, 0x1d, 0xf0, 0x88,
	0xd1, 0xb4, 0x6c, 0x7b, 0x10, 0x58, 0xf6, 0x8e, 0x79, 0x03, 0xa8, 0x3f, 0xcc, 0xd5, 0xaf, 0x24,
	0xc5, 0x67, 0x93, 0xd2, 0xc6, 0x74, 0xbb, 0xf0, 0x25, 0xae, 0x65, 0x38, 0x68, 0xb7, 0xdd, 0xed,
	0xd4, 0x63, 0xe3, 0xbc, 0x96, 0xfc, 0x63, 0xe2, 0x31, 0x4a, 0x76, 0xb7, 0xac, 0x90, 0x99, 0x13,
	0xe0, 0x27, 0xf8, 0xff, 0xb8, 0x73, 0xc5, 0xff, 0x4d, 0x5d, 0x48, 0xa0, 0x88, 0xc4, 0x9f, 0x12,
	0xff, 0xdd, 0x45, 0x0e, 0x00, 0x60, 0x10, 0xb2, 0x66, 0xcf, 0xf5, 0x06, 0x61, 0x33, 0x74, 0x3b,
	0x9e, 0x39, 0x09, 0x75, 0x9a, 0x8e, 0x8b, 0xae, 0x84, 0xec, 0x62, 0x5c, 0xb0, 0xe6, 0x76, 0x3c,
	0xfa, 0x01, 0x72, 0x30, 0x46, 0x5a, 0xb6, 0xed, 0x0f, 0xbc, 0xc8, 0xf5, 0x3a, 0x89, 0x3f, 0xf7,
	0x02, 0x9e, 0x0e, 0x42, 0x76, 0x36, 0x2b, 0xe2, 0x9e, 0xbb, 0x91, 0x4c, 0xb8, 0x61, 0xd3, 0x1e,
	0x84, 0x91, 0xdf, 0x33, 0xa7, 0x00, 0x36, 0xee, 0x86, 0x4b, 0xf0, 0x6f, 0x08, 0x01, 0xb6, 0xd5,
	0x65, 0xcd, 0xb6, 0x65, 0xc7, 0xae, 0xdc, 0x37, 0x3b, 0x36, 0x6f, 0x34, 0x26, 0xe1, 0xdb, 0x0a,
	0x7c, 0xa2, 0x1f, 0x24, 0x07, 0x5d, 0x2f, 0x62, 0x41, 0x18, 0xb9, 0x91, 0x6b, 0x75, 0x13, 0x07,
	0x84, 0xe6, 0x7e, 0x18, 0x27, 0x07, 0xc4, 0x32, 0xee, 0x87, 0x90, 0x3e, 0x47, 0x6e, 0x47, 0x44,
	0x9a, 0xae, 0x17, 0xb2, 0x00, 0xda, 0x01, 0xc6, 0x37, 0x0b, 0xcd, 0x69, 0x88, 0x4e, 0x53, 0x10,
	0x9d, 0x60, 0x68, 0xaf, 0xb1, 0xa8, 0x31, 0x57, 0xa6, 0xbc, 0x90, 0x4a, 0x5e, 0xe0, 0x82, 0xf4,
	0xa3, 0xe4, 0x24, 0x70, 0x34, 0xdb, 0x81, 0xdf, 0x6b, 0x06, 0x6e, 0x67, 0x23, 0x6a, 0xfa, 0xed,
	0x26, 0x4c, 0x5a, 0x8e, 0xdb, 0x71, 0x23, 0xee, 0xf0, 0x0d, 0xbf, 0xeb, 0xb0, 0xc0, 0x9c, 0x01,
	0xaf, 0xdf, 0x06, 0x12, 0x2b, 0x81, 0xdf, 0x6b, 0xc4, 0xf8, 0xcb, 0xed, 0xc7, 0xad, 0x30, 0x5a,
	0x8e, 0xc1, 0xab, 0x43, 0x2c, 0xbd, 0x8d, 0xec, 0x73, 0xc3, 0x66, 0xc4, 0xb6, 0xa3, 0x34, 0xe2,
	0x51, 0xf0, 0xd9, 0x5e, 0x37, 0x5c, 0x67, 0xdb, 0x51, 0x12, 0xf0, 0x4e, 0x93, 0x43, 0x3d, 0xd7,
	0x73, 0x7b, 0x83, 0x5e, 0x33, 0xb6, 0xb6, 0xc3, 0x82, 0xe6, 0x96, 0xeb, 0x44, 0x1b, 0xe6, 0x01,
	0x50, 0x75, 0x20, 0x29, 0xbc, 0xc0, 0xcb, 0x9e, 0x88, 0x8b, 0xe2, 0x3e, 0x94, 0x0e, 0x28, 0x8e,
	0x3d, 0x08, 0xd8, 0xbd, 0xc9, 0x47, 0x0e, 0x7a, 0x8e, 0x2c, 0x78, 0x30, 0x0a, 0xe2, 0xea, 0xc0,
	0x44, 0xd1, 0xb7, 0x6c, 0x96, 0x29, 0x11, 0x6a, 0xc5, 0xeb, 0x19, 0x9a, 0x87, 0x80, 0x65, 0x9e,
	0x4b, 0x5d, 0x6e, 0xc7, 0xb9, 0x50, 0x2c, 0x92, 0xa8, 0x16, 0xaa, 0x06, 0x55, 0x0d, 0x65, 0x1a,
	0x72, 0x63, 0x3d, 0xaf, 0xe1, 0x30, 0xae, 0x61, 0x59, 0x88, 0x03, 0x39, 0x0d, 0xc7, 0xc9, 0x64,
	0x12, 0x5e, 0x20, 0xa0, 0x1e, 0x81, 0xa1, 0x42, 0xf8, 0x27, 0x08, 0xa8, 0x27, 0xc8, 0x54, 0x3f,
	0x60, 0xc2, 0x68, 0x32, 0xf9, 0x68, 0xe2, 0x1f, 0x79, 0x93, 0xcf, 0xfd, 0xc5, 0xf1, 0x64, 0xee,
	0x83, 0x6e, 0x9c, 0x06, 0xbc, 0x3b, 0xf2, 0x8b, 0xa2, 0x78, 0x36, 0x5e, 0x5b, 0x10, 0x11, 0xe9,
	0x8a, 0xe8, 0x39, 0x32, 0x17, 0x85, 0xf6, 0x06, 0x64, 0x19, 0xf1, 0x8c, 0xe8, 0xb0, 0xb6, 0x35,
	0xe8, 0x46, 0x2d, 0xcb, 0xbe, 0xd6, 0x09, 0xfc, 0x81, 0xe7, 0xb4, 0xdd, 0x6e, 0xd7, 0x24, 0x30,
	0x53, 0x4d, 0xc3, 0xd2, 0x6a, 0xc5, 0xed, 0x66, 0x2b, 0x10, 0x0d, 0x59, 0xda, 0x26, 0xb7, 0xa9,
	0x51, 0x61, 0x14, 0xf8, 0xd7, 0x98, 0x39, 0x09, 0x3a, 0x28, 0xe8, 0x58, 0x83, 0x4f, 0xa9, 0x16,
	0x2d, 0x79, 0xba, 0x41, 0xde, 0x8b, 0xe1, 0xe2, 0x99, 0xb6, 0x50, 0x9b, 0xbd, 0x92, 0xda, 0x68,
	0xca, 0xd3, 0xc7, 0xc8, 0x71, 0x0c, 0xc9, 0xc7, 0x23, 0x8b, 0x3a, 0x56, 0x1f, 0x52, 0xf3, 0xb1,
	0x46, 0x15, 0x4c, 0xc9, 0xd4, 0xb2, 0x82, 0x98, 0x69, 0x5f, 0x05, 0x13, 0x87, 0xd1, 0x15, 0x72,
	0x0b, 0x06, 0x89, 0x83, 0x7d, 0xcb, 0x0f, 0xe2, 0xd1, 0xbd, 0x1f, 0xd2, 0xc0, 0x0a, 0x14, 0x7d,
	0x96, 0xcc, 0xa2, 0xde, 0x86, 0xd2, 0xa4, 0xa5, 0xa6, 0xa5, 0x2d, 0x55, 0x29, 0x4b, 0x1b, 0xb8,
	0x9d, 0x91, 0x1b, 0x75, 0x99, 0xed, 0x77, 0xfd, 0xc0, 0xa4, 0xc2, 0x62, 0x61, 0x29, 0xfe, 0xd2,
	0xa8, 0x90, 0xa0, 0xcf, 0x90, 0xf7, 0x55, 0xb7, 0x9c, 0xdf, 0xb7, 0x6c, 0x37, 0xda, 0x81, 0x84,
	0x7e, 0xac, 0xa1, 0x2f, 0x40, 0x1f, 0x27, 0xb7, 0x62, 0x60, 0xdb, 0xef, 0xb5, 0x5c, 0x8f, 0x75,
	0xad, 0x1d, 0x16, 0x84, 0x90, 0xe8, 0x8f, 0x37, 0xaa, 0x81, 0x15, 0xfe, 0xdd, 0xb0, 0x1c, 0x7f,
	0x0b, 0x32, 0xff, 0xcc, 0xbf, 0xf0, 0x49, 0xc7, 0xbf, 0x00, 0x94, 0x59, 0xcb, 0x31, 0xa9, 0x0f,
	0x0e, 0x83, 0x0f, 0xaa, 0x81, 0xb4, 0x45, 0xee, 0x94, 0xfa, 0x3e, 0x5b, 0x47, 0xc1, 0xcc, 0xca,
	0x53, 0xd1, 0x23, 0xb0, 0x66, 0xa9, 0x25, 0x43, 0xdb, 0x64, 0x01, 0xc3, 0x3b, 0xac, 0x1f, 0xb0,
	0x78, 0x8d, 0xee, 0xf4, 0xac, 0x30, 0x62, 0x41, 0xdb, 0xf7, 0xa2, 0xb6, 0xd5, 0x73, 0xbb, 0x3b,
	0x49, 0x18, 0xac, 0x29, 0x45, 0xbb, 0xe4, 0x83, 0xba, 0x12, 0x71, 0x3c, 0x76, 0x42, 0xf7, 0x3a,
	0x33, 0x8f, 0x42, 0x85, 0xea, 0x0b, 0xd2, 0xcf, 0x18, 0xe4, 0x9c, 0x5a, 0x2a, 0x0a, 0x98, 0xe7,
	0xc4, 0xa9, 0x3d, 0x7b, 0x61, 0x60, 0xc5, 0x93, 0x36, 0xe6, 0xd0, 0x5b, 0x40, 0xff, 0x8f, 0x81,
	0xa9, 0x8e, 0x41, 0x41, 0xf8, 0xc2, 0xc0, 0x0a, 0x98, 0x83, 0x19, 0x74, 0xbc, 0x96, 0x41, 0x0a,
	0x26, 0xfa, 0x29, 0x83, 0xdc, 0x53, 0xb3, 0x5e, 0xc9, 0xf8, 0x98, 0x95, 0x8e, 0x8f, 0xd1, 0x08,
	0xeb, 0x98, 0x92, 0xd6, 0x28, 0x31, 0xe5, 0xd6, 0x1f, 0xd9, 0x94, 0x3c, 0x21, 0xdd, 0x24, 0xf7,
	0xd6, 0xac, 0x43, 0x3a, 0xa8, 0xe7, 0x60, 0x50, 0x8f, 0x28, 0x5d, 0x43, 0x6f, 0x6a, 0x70, 0xaa,
	0xf7, 0x44, 0x2d, 0xbd, 0x05, 0x69, 0x6a, 0x17, 0xf2, 0x8f, 0x96, 0x15, 0x0c, 0xa5, 0x16, 0x53,
	0x37, 0xbf, 0x3e, 0x26, 0xf5, 0xb3, 0x86, 0x38, 0x75, 0xc9, 0xed, 0x39, 0x14, 0x5f, 0xb4, 0x22,
	0x7a, 0xde, 0x90, 0xeb, 0xd1, 0x63, 0xa0, 0x8c, 0x9c, 0xc8, 0x01, 0xe3, 0x3a, 0x23, 0x8a, 0xde,
	0x94, 0x2b, 0xd2, 0x91, 0x2f, 0xa9, 0xb1, 0x02, 0x66, 0x21, 0x6a, 0xbe, 0xa4, 0xab, 0x06, 0x97,
	0x2f, 0xb5, 0x4e, 0xdf, 0xc5, 0x2a, 0xf3, 0x65, 0xdd, 0xd6, 0x41, 0xc5, 0xe9, 0xf5, 0x42, 0xeb,
	0x24, 0x9d, 0x67, 0xd1, 0xe9, 0xc6, 0xeb, 0x0f, 0xd7, 0xeb, 0xf4, 0x2d, 0xfb, 0x9a, 0xd5, 0x61,
	0xe6, 0x5f, 0x73, 0x3d, 0x27, 0x84, 0x9d, 0xf4, 0xc5, 0xe5, 0xc7, 0x13, 0xd0, 0x2a, 0x07, 0xe1,
	0xcd, 0x25, 0xa3, 0xa4, 0xdb, 0x85, 0xe4, 0x94, 0xb7, 0x6b, 0x59, 0xf5, 0xdf, 0xd4, 0x50, 0xad,
	0xc5, 0x48, 0x83, 0xc2, 0x44, 0xdd, 0xb2, 0x82, 0xb2, 0xda, 0xbf, 0xad, 0xa1, 0xb6, 0x9a, 0x8e,
	0x46, 0x85, 0xe6, 0x8c, 0x3b, 0x57, 0x59, 0xe9, 0xdf, 0xd5, 0x50, 0xaa, 0xc1, 0x57, 0xd2, 0x1a,
	0xf7, 0xb5, 0xb2, 0xd6, 0xbf, 0x1f, 0x59, 0x2b, 0xca, 0x57, 0xf2, 0x6f, 0xdf, 0x45, 0xaa, 0xfa,
	0x95, 0x91, 0xfd, 0x8b, 0xd1, 0xd1, 0x26, 0x39, 0xa9, 0x0e, 0x83, 0x8b, 0x4e, 0x8b, 0x6d, 0xb2,
	0x2e, 0x73, 0x3a, 0x2c, 0x34, 0xbf, 0x31, 0x06, 0x49, 0x63, 0x0d, 0x11, 0xfa, 0x44, 0x61, 0x8d,
	0x53, 0x18, 0x50, 0x02, 0xf9, 0x37, 0x39, 0xb9, 0x26, 0xbc, 0x44, 0x5c, 0x88, 0xa3, 0x02, 0xf1,
	0xb7, 0x30, 0x62, 0x29, 0x9c, 0x7e, 0xac, 0x90, 0x9b, 0x97, 0x03, 0xa7, 0xc0, 0xfd, 0x6d, 0xce,
	0xad, 0x2f, 0x41, 0x9f, 0x26, 0xf3, 0x95, 0xee, 0xb3, 0xe2, 0xdc, 0xb8, 0xcf, 0xcc, 0xef, 0x8c,
	0x41, 0xee, 0xa2, 0x2d, 0x40, 0x2f, 0xe3, 0x6b, 0xe3, 0x45, 0x07, 0xbe, 0xa4, 0xf3, 0xdf, 0x0f,
	0xc6, 0x60, 0x02, 0xd4, 0x80, 0xce, 0x7d, 0x95, 0x92, 0x83, 0xd0, 0xc9, 0xd2, 0x93, 0x98, 0xda,
	0xcb, 0xf5, 0x07, 0xc9, 0x51, 0x69, 0x72, 0x0d, 0xab, 0xf4, 0x89, 0x86, 0x1c, 0xa0, 0x5a, 0x24,
	0xf2, 0xa3, 0x44, 0x58, 0x84, 0x2b, 0x16, 0x89, 0x1c, 0x25, 0x5b, 0x64, 0xf4, 0x5d, 0x16, 0x46,
	0x56, 0x10, 0x59, 0x5e, 0x07, 0xb6, 0xda, 0xa4, 0x8b, 0x8c, 0x1c, 0x90, 0x2e, 0x93, 0x9b, 0x65,
	0xfa, 0x78, 0xbd, 0xa6, 0xc0, 0x28, 0x35, 0xa8, 0x3a, 0x81, 0xb1, 0x3a, 0x96, 0xeb, 0xc9, 0x73,
	0xfc, 0x11, 0xa5, 0xa9, 0x8d, 0xfb, 0x74, 0xd1, 0x09, 0xfc, 0x08, 0x32, 0x2c, 0xf3, 0x0b, 0x3c,
	0xc8, 0x1c, 0xcb, 0x05, 0x99, 0xab, 0xcc, 0x8e, 0xfc, 0x20, 0x6d, 0xdd, 0x0a, 0x0a, 0xfa, 0x31,
	0x72, 0x23, 0x8e, 0x80, 0x1d, 0x48, 0xf3, 0xc5, 0x6a, 0x0d, 0x2a, 0x79, 0xfa, 0x34, 0x39, 0x86,
	0xce, 0x59, 0x9c, 0xfd, 0xa5, 0x6a, 0x76, 0x85, 0x38, 0xbd, 0x42, 0x8e, 0x94, 0x67, 0x26, 0xce,
	0xfc, 0x72, 0x35, 0xb3, 0x4c, 0x96, 0x3e, 0x41, 0x4c, 0x64, 0xee, 0xe1, 0xbc, 0xaf, 0x54, 0xf3,
	0x4a, 0x85, 0x4b, 0xc4, 0x7c, 0x7a, 0xe1, 0xc4, 0xaf, 0xd6, 0x25, 0x16, 0x84, 0x4b, 0x8e, 0x80,
	0x29, 0x84, 0xf3, 0xbe, 0x56, 0xd7, 0x11, 0x43, 0x59, 0x79, 0x07, 0xdc, 0x74, 0xd9, 0x56, 0xdf,
	0x0f, 0xa2, 0x34, 0x6f, 0x1a, 0xa1, 0x03, 0xa6, 0x14, 0xf1, 0xea, 0xf1, 0x54, 0x55, 0xdc, 0x2c,
	0x4e, 0xae, 0x5f, 0xab, 0x31, 0xb9, 0xd6, 0x25, 0xa7, 0x9f, 0x36, 0x0a, 0xdb, 0x06, 0xe5, 0x69,
	0xa2, 0x68, 0xcf, 0x5b, 0x35, 0xec, 0xa9, 0xc9, 0x4d, 0x3f, 0x69, 0x90, 0xf7, 0xab, 0x66, 0xc4,
	0xa2, 0x2d, 0x6f, 0xd7, 0xb0, 0xa5, 0x0e, 0x71, 0xbc, 0x94, 0xbd, 0x53, 0xb9, 0x80, 0x28, 0x5a,
	0xf2, 0x4e, 0x0d, 0x4b, 0x6a, 0x31, 0x97, 0x4d, 0x29, 0x2e, 0x32, 0x8a, 0xa6, 0xbc, 0x3b, 0xb2,
	0x29, 0x15, 0xcc, 0xe5, 0xe6, 0x29, 0x64, 0x42, 0x45, 0x4b, 0xbe, 0x3e, 0x72, 0xf3, 0xa8, 0x89,
	0x65, 0x29, 0x45, 0x78, 0xcd, 0xed, 0x6f, 0xb8, 0x8e, 0xc3, 0x3c, 0xc7, 0x8a, 0xac, 0x34, 0x33,
	0xd4, 0x80, 0xd2, 0x9f, 0xc2, 0xf7, 0x13, 0xb1, 0x5c, 0xb0, 0x12, 0x48, 0x1f, 0x95, 0x85, 0x92,
	0x2c, 0x87, 0xfa, 0x21, 0xcf, 0xa1, 0x2a, 0x60, 0xa5, 0x74, 0x32, 0x43, 0xa4, 0x9b, 0xdf, 0x0e,
	0xeb, 0x47, 0x1b, 0x1d, 0xab, 0x6f, 0x7e, 0x97, 0x67, 0x4f, 0x9a, 0xf0, 0xb9, 0xff, 0xdd, 0x95,
	0x5e, 0x50, 0x18, 0x2d, 0x7f, 0x5a, 0xe5, 0x33, 0x1d, 0xcf, 0x63, 0xe0, 0xb2, 0x55, 0xa2, 0x4b,
	0x79, 0xcc, 0xa1, 0x90, 0xa1, 0x57, 0xc9, 0x4d, 0x78, 0x69, 0xe5, 0xb1, 0x86, 0x52, 0x4e, 0xc1,
	0xcb, 0x17, 0xdd, 0xfb, 0xa4, 0x6b, 0x6e, 0xa5, 0x5c, 0x9a, 0x6d, 0x95, 0xcb, 0xd3, 0x7c, 0x76,
	0x3f, 0x34, 0x88, 0x1a, 0x94, 0x6e, 0xda, 0x96, 0x01, 0x5d, 0xab, 0xc5, 0xba, 0xd8, 0xc6, 0xe1,
	0x34, 0x74, 0x9c, 0x9a, 0x52, 0x73, 0x8f, 0x90, 0x43, 0xbc, 0xb9, 0x47, 0xcd, 0x98, 0xe7, 0x3e,
	0x7b, 0x0b, 0x39, 0x04, 0x03, 0x38, 0xbb, 0x6e, 0x56, 0xbb, 0xd3, 0x34, 0x84, 0x4d, 0x02, 0x6b,
	0xdb, 0x0d, 0xe1, 0x86, 0x40, 0x9c, 0x79, 0xf6, 0xac, 0xe7, 0xfd, 0xa0, 0x13, 0xb8, 0xb0, 0xb3,
	0x15, 0x42, 0xf7, 0x19, 0x6f, 0x68, 0x61, 0x15, 0x9c, 0xae, 0x27, 0x72, 0x4e, 0x2a, 0x39, 0x73,
	0x58, 0xba, 0x21, 0x6c, 0xa4, 0x64, 0xb8, 0xbc, 0x5e, 0xde, 0x27, 0xf7, 0x4a, 0xfb, 0xa4, 0x1e,
	0x81, 0x44, 0x53, 0xce, 0x1a, 0xae, 0x69, 0xaa, 0x96, 0xa6, 0x32, 0x01, 0xbd, 0x24, 0x04, 0xcc,
	0x0c, 0x18, 0xb9, 0xf6, 0xb5, 0x9e, 0x15, 0x5c, 0xeb, 0xfa, 0x36, 0x4f, 0xb1, 0xf7, 0x41, 0xe7,
	0xd2, 0x40, 0x56, 0xb4, 0x65, 0x0a, 0x0f, 0x93, 0xd3, 0x32, 0x2d, 0x6c, 0x45, 0x5b, 0x0e, 0x39,
	0xa7, 0x2b, 0xdb, 0x72, 0xc8, 0xb9, 0x2a, 0x6c, 0xf0, 0x65, 0x38, 0x18, 0x26, 0xa1, 0x1f, 0xb8,
	0xcc, 0x4b, 0xd6, 0x16, 0x33, 0x30, 0x58, 0x75, 0xa0, 0xb8, 0x27, 0x13, 0xcd, 0x6e, 0x6f, 0xd0,
	0x03, 0x09, 0x38, 0x7d, 0x1b, 0x6f, 0x68, 0x20, 0x75, 0x7a, 0x5b, 0xd5, 0x71, 0x96, 0x1e, 0x81,
	0x4e, 0x6f, 0xe3, 0x9a, 0x0e, 0xd7, 0xd2, 0x54, 0x26, 0xa0, 0x57, 0x85, 0x79, 0x0b, 0x37, 0x29,
	0x8d, 0x92, 0x47, 0x0a, 0xd3, 0x96, 0x12, 0x2d, 0xe1, 0x15, 0x0d, 0x48, 0x79, 0x4d, 0x29, 0x2f,
	0x82, 0xa6, 0x0f, 0x09, 0x0b, 0xb7, 0x5c, 0x4b, 0xc5, 0xff, 0x80, 0x85, 0xed, 0x78, 0x43, 0x81,
	0xa0, 0x1f, 0x25, 0x77, 0xe4, 0x4a, 0xd3, 0x3b, 0xb1, 0x48, 0x70, 0x3b, 0x0d, 0x64, 0xba, 0x70,
	0x35, 0x73, 0x3e, 0xc4, 0x2d, 0x56, 0x31, 0xe7, 0xa3, 0x9c, 0x27, 0x6c, 0xf9, 0x88, 0x50, 0x2c,
	0xd0, 0xdd, 0x2d, 0x0d, 0x3f, 0xda, 0x1c, 0x72, 0x7d, 0x48, 0xb8, 0xbb, 0xa7, 0xae, 0x3e, 0x24,
	0xe2, 0xad, 0x17, 0x7a, 0x7b, 0x8a, 0x2d, 0x05, 0xbd, 0x7b, 0x21, 0xe8, 0xe9, 0x81, 0xab, 0x5b,
	0x7a, 0x18, 0xa6, 0xee, 0xd3, 0x69, 0xe9, 0x61, 0xa4, 0xaa, 0x6c, 0xe9, 0x21, 0xf3, 0x19, 0x9d,
	0x96, 0x1e, 0x32, 0x17, 0x47, 0x4d, 0x0a, 0x2d, 0x87, 0xc1, 0xfb, 0x91, 0x51, 0x23, 0x45, 0x4b,
	0x79, 0x37, 0xfc, 0xc0, 0xbd, 0xee, 0x7b, 0x91, 0xd5, 0x0d, 0xe3, 0xf1, 0xe5, 0x75, 0xcc, 0x07,
	0xc0, 0xc5, 0x9a, 0xe8, 0xd2, 0x3c, 0x90, 0x22, 0x37, 0x59, 0x5c, 0xa9, 0x21, 0xeb, 0x87, 0x80,
	0x55, 0x0b, 0x5b, 0x8a, 0xda, 0xa2, 0xbb, 0xba, 0x56, 0xc8, 0x33, 0x27, 0xf3, 0x41, 0x24, 0x6a,
	0xa3, 0x48, 0xcd, 0xd1, 0xc3, 0xc3, 0xe9, 0xc3, 0xd2, 0x70, 0xaa, 0xcd, 0xa1, 0x39, 0x7a, 0xb8,
	0xbe, 0x47, 0xea, 0xea, 0x43, 0x22, 0xb8, 0x78, 0x17, 0x44, 0x6a, 0x5b, 0x1a, 0x6c, 0xcf, 0x16,
	0xee, 0x82, 0x54, 0x09, 0xc8, 0xd9, 0xb1, 0x50, 0x7e, 0x4e, 0xc5, 0x8e, 0x45, 0x73, 0x71, 0x23,
	0xb4, 0xd8, 0x82, 0x10, 0xd0, 0x97, 0x0a, 0x1b, 0xa1, 0x18, 0xa8, 0x14, 0x3f, 0xc4, 0x14, 0x3b,
	0x37, 0x68, 0xda, 0x60, 0x9f, 0x1e, 0x38, 0x77, 0x13, 0x44, 0x00, 0x4a, 0x6f, 0x82, 0x78, 0x85,
	0x9b, 0x20, 0x1a, 0x32, 0x32, 0x1d, 0xd2, 0x25, 0x85, 0x2f, 0xd7, 0x21, 0x93, 0xa1, 0xcf, 0x0a,
	0x47, 0x34, 0x42, 0x96, 0x28, 0xa9, 0x45, 0x1f, 0x34, 0xd4, 0x90, 0xc0, 0xf9, 0xa5, 0x35, 0x78,
	0x41, 0xc6, 0x2f, 0xb5, 0xdf, 0x21, 0x77, 0x49, 0x02, 0xbe, 0xa4, 0x0a, 0x01, 0xa8, 0xa8, 0x27,
	0x24, 0xd5, 0x22, 0xad, 0x48, 0xa8, 0xd0, 0x22, 0xad, 0x8b, 0x8d, 0x65, 0xa4, 0x8b, 0x4e, 0x61,
	0x4e, 0xfd, 0xee, 0x98, 0x74, 0x52, 0xd5, 0x10, 0xcf, 0x9d, 0xfd, 0x8b, 0x56, 0x95, 0xf4, 0xfc,
	0xc3, 0x98, 0xe6, 0x5a, 0x45, 0xc6, 0x40, 0x7f, 0x1a, 0xcb, 0xd9, 0x87, 0xa8, 0x34, 0x2e, 0x7c,
	0x6f, 0x4c, 0x96, 0xb4, 0x97, 0xb0, 0xb9, 0x8d, 0x14, 0x5c, 0x77, 0xca, 0xfa, 0xfd, 0x31, 0xc5,
	0x1c, 0x58, 0x82, 0xcf, 0xfd, 0xf7, 0x24, 0x31, 0xb3, 0x65, 0xf1, 0xc8, 0xc7, 0x51, 0xb6, 0x70,
	0x2e, 0x21, 0x8c, 0xbe, 0x41, 0xc8, 0x82, 0x9e, 0xeb, 0x25, 0x7b, 0x1f, 0xb7, 0x0a, 0xbb, 0x68,
	0xe1, 0xa5, 0x35, 0x7e, 0x7b, 0x7d, 0xd9, 0x1f, 0x08, 0xcf, 0xf3, 0x54, 0x2c, 0x4a, 0x25, 0xd6,
	0x76, 0xfe, 0x61, 0xd5, 0x68, 0x4a, 0xac, 0x6d, 0x1a, 0x08, 0xfb, 0x68, 0x42, 0x31, 0xbf, 0xcc,
	0x9b, 0xdc, 0x70, 0xe6, 0x8b, 0x59, 0xe4, 0x4d, 0x03, 0xf6, 0xe6, 0xa0, 0x51, 0xc9, 0x97, 0x3b,
	0x8e, 0x13, 0x30, 0x7c, 0xc2, 0x8e, 0x03, 0x30, 0xac, 0x6b, 0xc5, 0xe3, 0x38, 0x14, 0x45, 0x9f,
	0x2a, 0xcc, 0xb1, 0xd0, 0x97, 0xb8, 0x26, 0xbf, 0x5d, 0x48, 0xb6, 0x4f, 0x17, 0xce, 0x40, 0x2b,
	0xf0, 0xf4, 0x8c, 0x70, 0x68, 0x31, 0x5c, 0x3f, 0xc0, 0xa1, 0xc5, 0x22, 0x50, 0xc9, 0x8a, 0x73,
	0x87, 0x84, 0x25, 0x2d, 0x0e, 0xb3, 0x2d, 0x87, 0x85, 0x90, 0xa0, 0xef, 0x69, 0x54, 0x03, 0xe9,
	0x39, 0xbe, 0x1d, 0x56, 0x5e, 0xc7, 0x24, 0x9e, 0xba, 0x07, 0x3c, 0xa5, 0xc4, 0xd0, 0x47, 0x0a,
	0x1d, 0x29, 0x2b, 0xe7, 0xc7, 0x8c, 0xf7, 0x02, 0x85, 0x0a, 0x52, 0xe1, 0xe9, 0xfc, 0x82, 0xe9,
	0xbe, 0x4a, 0x4f, 0xe7, 0x57, 0x4c, 0xa8, 0xa7, 0xb9, 0x65, 0x67, 0xe0, 0x60, 0x57, 0x56, 0x9c,
	0xbb, 0x45, 0x5c, 0xce, 0xfc, 0xc0, 0x3d, 0x0e, 0xd4, 0xad, 0x0a, 0x26, 0x5d, 0x7b, 0xc4, 0x10,
	0xfe, 0xde, 0x29, 0xe1, 0x63, 0xc0, 0xa7, 0x07, 0x2e, 0xf5, 0x73, 0x11, 0xc8, 0x2b, 0xd8, 0x46,
	0xfa, 0x79, 0x09, 0x55, 0x5a, 0xed, 0xe6, 0xa6, 0x31, 0xb3, 0x03, 0x4e, 0x52, 0x20, 0x4a, 0xf9,
	0x39, 0x32, 0x26, 0xe1, 0x7d, 0xd0, 0x36, 0x92, 0x9f, 0x4b, 0xb0, 0xa5, 0x98, 0x3f, 0xbc, 0x69,
	0x04, 0xb3, 0x9e, 0x1f, 0xba, 0x90, 0x6b, 0x25, 0xfb, 0xe6, 0x3a, 0x58, 0xfa, 0x91, 0x42, 0x28,
	0x4a, 0x2b, 0xd1, 0xef, 0xfa, 0x51, 0xe4, 0xf3, 0x2d, 0xfd, 0xa8, 0xb0, 0xa3, 0x2f, 0xc1, 0xcd,
	0xfd, 0xd6, 0x25, 0x72, 0x84, 0xbf, 0x0e, 0x80, 0x06, 0x19, 0x2d, 0xca, 0xff, 0x3c, 0x79, 0x20,
	0x53, 0xc4, 0x1b, 0x36, 0xcd, 0xe4, 0x74, 0xae, 0xb0, 0x7e, 0xdb, 0x80, 0xaa, 0xff, 0x08, 0x14,
	0x1a, 0x06, 0xa8, 0xae, 0xac, 0x7e, 0x47, 0xcf, 0x00, 0xd5, 0x5d, 0xd5, 0x8e, 0x70, 0xd8, 0xa8,
	0x36, 0x3f, 0x9b, 0xe4, 0x0d, 0x98, 0x8e, 0x6b, 0x8a, 0x69, 0x28, 0x2a, 0x5e, 0xbf, 0xfc, 0xbe,
	0x9e, 0xa2, 0xe2, 0xbd, 0xcb, 0xc7, 0xc8, 0xe1, 0x82, 0x44, 0xcb, 0x0a, 0x94, 0x87, 0x20, 0x12,
	0x3c, 0xbd, 0x24, 0x9c, 0x97, 0x67, 0x25, 0x95, 0x87, 0x1f, 0x52, 0x99, 0xdc, 0x28, 0xcd, 0xca,
	0x84, 0xa4, 0x38, 0x1d, 0x52, 0x53, 0x85, 0x51, 0xaa, 0xc0, 0xd2, 0x55, 0xe1, 0xda, 0x4c, 0x12,
	0x9a, 0x86, 0x89, 0x9f, 0xfc, 0x39, 0x83, 0x5c, 0x88, 0x5e, 0x15, 0xd6, 0x6a, 0x42, 0xe1, 0x4e,
	0xaf, 0xe5, 0x77, 0xc1, 0x8d, 0x33, 0x12, 0x37, 0xaa, 0xc5, 0xe8, 0x33, 0x42, 0x2c, 0x2f, 0x02,
	0x12, 0x7b, 0xa9, 0xd4, 0xde, 0x2a, 0xd1, 0xdc, 0x0a, 0xb3, 0x04, 0x71, 0xaf, 0xf3, 0x07, 0xcb,
	0x63, 0x0d, 0x35, 0x28, 0x37, 0x4b, 0x0c, 0x01, 0x48, 0x13, 0x1d, 0x2e, 0xec, 0x50, 0xa9, 0xc0,
	0xf4, 0x23, 0xc2, 0xfc, 0xc7, 0x81, 0x56, 0xc0, 0x2c, 0xf0, 0xe5, 0x51, 0x89, 0x2f, 0x65, 0x02,
	0x48, 0x7b, 0xc7, 0x45, 0x89, 0xff, 0x8e, 0x69, 0xb7, 0xf7, 0x50, 0x08, 0xa9, 0x73, 0x5c, 0x88,
	0xd4, 0xf9, 0x26, 0xb4, 0xce, 0x38, 0x18, 0xe9, 0x45, 0xa0, 0x72, 0xd8, 0x8b, 0x6e, 0xd6, 0xec,
	0x45, 0x79, 0x31, 0xa4, 0x17, 0x0d, 0x01, 0x89, 0x17, 0x6e, 0xd1, 0xee, 0x45, 0x45, 0x51, 0xa4,
	0x17, 0x09, 0x90, 0xb8, 0x17, 0xcd, 0xa2, 0xbd, 0x28, 0x0f, 0x42, 0x22, 0x50, 0xdf, 0x65, 0x50,
	0xe9, 0x13, 0x9a, 0x11, 0x28, 0xc1, 0x23, 0x11, 0x08, 0x2e, 0x98, 0x41, 0x35, 0x6f, 0xd3, 0x8e,
	0x40, 0x99, 0x4c, 0x7a, 0xf4, 0x2a, 0x94, 0x25, 0xcf, 0xb8, 0x13, 0xce, 0x79, 0xf5, 0x91, 0xae,
	0x4c, 0x8e, 0x3e, 0x23, 0x4c, 0xec, 0xf9, 0xf2, 0x61, 0x83, 0xbf, 0x4f, 0x52, 0xf7, 0x4a, 0x49,
	0xda, 0x12, 0x56, 0xd3, 0x08, 0x26, 0xb1, 0xfd, 0xa4, 0xc6, 0x62, 0x5a, 0x2a, 0x9d, 0x4b, 0x4d,
	0x30, 0x54, 0xdc, 0xf8, 0x77, 0x42, 0xe3, 0x57, 0xe2, 0x72, 0xb9, 0x74, 0x0e, 0x83, 0x0c, 0xaa,
	0x85, 0x42, 0x2e, 0x5d, 0x81, 0x4f, 0x8f, 0xf9, 0xcb, 0xf3, 0x21, 0xf8, 0xf8, 0xb4, 0xea, 0x98,
	0x1f, 0x97, 0x41, 0xac, 0x4d, 0x4a, 0x11, 0x6b, 0xef, 0x46, 0xad, 0x95, 0xe2, 0x73, 0x7b, 0x46,
	0x59, 0x5f, 0x1c, 0xde, 0x22, 0x11, 0x73, 0x69, 0xdf, 0x4b, 0xf6, 0x7a, 0x6b, 0x48, 0xd0, 0x4b,
	0xa5, 0x68, 0xc8, 0x2f, 0x34, 0x81, 0x33, 0x1e, 0x92, 0x38, 0x43, 0x2e, 0x22, 0x19, 0x6f, 0x7c,
	0x0f, 0xd7, 0x91, 0xee, 0xe1, 0x4a, 0x65, 0x24, 0x19, 0x04, 0xe7, 0x63, 0xda, 0x7c, 0x99, 0x8c,
	0x2c, 0xfa, 0x73, 0xc2, 0xb6, 0x94, 0x50, 0x2e, 0xa4, 0x88, 0x08, 0x9c, 0xb4, 0xa3, 0xbe, 0x8c,
	0x21, 0x93, 0xa3, 0x4f, 0x09, 0x2b, 0x23, 0x5e, 0xde, 0x73, 0xb7, 0x99, 0xb8, 0x27, 0xbe, 0x21,
	0x65, 0xae, 0x90, 0x94, 0x71, 0x0b, 0xae, 0x70, 0xeb, 0x71, 0x0b, 0xfe, 0x78, 0xb6, 0x14, 0x07,
	0x00, 0xc1, 0xfb, 0x48, 0xc2, 0xfe, 0xbc, 0xc6, 0x2b, 0x46, 0x89, 0xac, 0x2c, 0x5f, 0xe3, 0xc4,
	0xd7, 0xb4, 0x5b, 0x30, 0x77, 0xb2, 0x7b, 0x13, 0x3e, 0x1e, 0x13, 0xd2, 0xae, 0x76, 0x0b, 0xe6,
	0xaf, 0xd3, 0x3c, 0x5d, 0x9a, 0x69, 0x5b, 0x83, 0x56, 0xab, 0x2b, 0x66, 0x82, 0x3f, 0x30, 0x24,
	0x43, 0xac, 0x4a, 0x92, 0x5e, 0x11, 0x36, 0x2c, 0x72, 0x10, 0x1e, 0xcb, 0xff, 0xd9, 0x90, 0x06,
	0x73, 0x95, 0x1c, 0xb5, 0x84, 0x9d, 0x99, 0xb2, 0xe6, 0x84, 0xfc, 0x5f, 0xe4, 0xe4, 0xd5, 0xd2,
	0xf4, 0x49, 0xe1, 0x50, 0x50, 0x04, 0x21, 0xd1, 0xf2, 0x5f, 0xf9, 0xf2, 0x4c, 0x17, 0x2f, 0x77,
	0x0a, 0x6f, 0xc8, 0x7f, 0x33, 0xa4, 0x2d, 0xa9, 0x92, 0x43, 0x56, 0x5e, 0xc5, 0xe6, 0x18, 0x84,
	0x2c, 0x19, 0xc3, 0xdc, 0x43, 0xff, 0x6e, 0x40, 0x24, 0xae, 0x29, 0x46, 0xd7, 0x4a, 0x73, 0x53,
	0x7a, 0x71, 0x2e, 0x36, 0xff, 0x35, 0xf9, 0x5b, 0x2a, 0x85, 0x18, 0x7d, 0xb2, 0x94, 0x92, 0x2d,
	0xe6, 0x47, 0xe3, 0x17, 0xe5, 0xbc, 0x6a, 0x49, 0xc4, 0xdf, 0x8b, 0x62, 0x80, 0x52, 0x3c, 0xcd,
	0x53, 0xc9, 0xa1, 0xb4, 0x42, 0x6c, 0x7a, 0xa3, 0x0e, 0xad, 0x10, 0x99, 0x30, 0xef, 0x0e, 0x67,
	0xa7, 0x37, 0xeb, 0x78, 0x77, 0x38, 0x41, 0xb5, 0x65, 0xab, 0x72, 0xe9, 0x79, 0x88, 0x37, 0xbc,
	0xed, 0xa6, 0x2f, 0x85, 0x24, 0x02, 0x2d, 0x2b, 0xa8, 0x38, 0xfe, 0xaa, 0x21, 0x41, 0x9f, 0x13,
	0x6e, 0xc1, 0x0e, 0x23, 0xa4, 0x54, 0x01, 0x3f, 0xfd, 0xaa, 0x23, 0x82, 0x68, 0x88, 0xdb, 0xa6,
	0xe2, 0xfc, 0xab, 0x8e, 0x08, 0x9e, 0x2c, 0x49, 0x15, 0x04, 0xa8, 0x8f, 0x14, 0x12, 0xb9, 0x43,
	0x48, 0x71, 0x62, 0x55, 0x9f, 0x7c, 0xd5, 0x92, 0x41, 0x16, 0x50, 0x85, 0x3b, 0x98, 0x11, 0xba,
	0x80, 0x2a, 0xdc, 0xc1, 0x2c, 0x5b, 0x9a, 0xdf, 0x4b, 0x28, 0xc6, 0xab, 0x01, 0x84, 0xab, 0x5a,
	0x32, 0x88, 0x8e, 0xfc, 0x4a, 0xb3, 0xa8, 0x63, 0x13, 0xd5, 0xa1, 0x94, 0xa1, 0x1b, 0xc2, 0xd3,
	0x02, 0xc9, 0xe2, 0xa6, 0xa8, 0x66, 0x0b, 0xd4, 0xd4, 0x15, 0xcb, 0xfd, 0x04, 0x40, 0x31, 0x69,
	0x92, 0xea, 0xda, 0x06, 0x5d, 0xf5, 0x05, 0x65, 0xda, 0xd4, 0x0e, 0xdc, 0x91, 0x6b, 0x53, 0x7b,
	0xb1, 0x3c, 0x2e, 0x24, 0xd6, 0x41, 0x4e, 0x72, 0x1d, 0x5d, 0x44, 0x28, 0x24, 0x10, 0x7e, 0x89,
	0x3d, 0xc0, 0xff, 0x71, 0x94, 0x5f, 0x21, 0x81, 0xf4, 0x02, 0x95, 0x8b, 0x41, 0xc9, 0xcf, 0xa0,
	0xbd, 0xa0, 0x4a, 0x4c, 0xa6, 0x49, 0x55, 0x9d, 0x9f, 0x95, 0x6b, 0x52, 0xd5, 0xe9, 0x49, 0x3c,
	0x05, 0x17, 0x56, 0x5f, 0xbf, 0x20, 0xcb, 0x0d, 0x2b, 0x04, 0xe9, 0x95, 0x52, 0x3e, 0x9b, 0x59,
	0x03, 0xc4, 0xbf, 0x28, 0x23, 0x56, 0x8a, 0xd1, 0xa6, 0x32, 0xb1, 0xe7, 0x5d, 0xf4, 0x13, 0x86,
	0xc6, 0xef, 0xbf, 0x48, 0x84, 0xe9, 0xd3, 0x8a, 0x15, 0x0f, 0xa7, 0xff, 0x25, 0x39, 0x7d, 0x85,
	0xa8, 0x8c, 0x5c, 0xd8, 0xfb, 0xfb, 0x64, 0x4d, 0x72, 0x61, 0x07, 0xf0, 0x72, 0x69, 0x7f, 0xa5,
	0xd0, 0xd3, 0x60, 0xf7, 0xe3, 0x97, 0x8d, 0xc2, 0x6b, 0x50, 0x29, 0x54, 0x46, 0x58, 0xd8, 0x4b,
	0xfb, 0x94, 0x82, 0xb0, 0xb0, 0xa3, 0x66, 0x55, 0x59, 0x08, 0x3d, 0xe3, 0x57, 0x8c, 0xca, 0x1f,
	0x73, 0x92, 0x0a, 0xcb, 0x54, 0x14, 0x76, 0x2d, 0x7f, 0xb5, 0x96, 0x8a, 0xc2, 0xde, 0x65, 0xa7,
	0xb4, 0xff, 0x5f, 0x74, 0x1e, 0x6f, 0xca, 0x5f, 0x33, 0x34, 0x7e, 0x30, 0x4a, 0x41, 0x20, 0x53,
	0x54, 0xda, 0x29, 0xfd, 0x74, 0x4d, 0x45, 0xa5, 0xfd, 0x52, 0x1b, 0x4f, 0x29, 0xf8, 0xb8, 0x40,
	0x56, 0x44, 0xbf, 0x6e, 0xc8, 0x73, 0x0a, 0x99, 0x50, 0xee, 0xed, 0x79, 0xa1, 0xd6, 0x88, 0x8a,
	0xcf, 0x18, 0x68, 0x62, 0xa4, 0x10, 0x91, 0x29, 0x90, 0x6c, 0x83, 0xff, 0x86, 0x42, 0x81, 0x64,
	0x33, 0x7c, 0x20, 0xfc, 0x08, 0x4b, 0x3e, 0xe1, 0x19, 0x44, 0xa1, 0xeb, 0xc8, 0x93, 0xbc, 0xdf,
	0xe4, 0xba, 0x46, 0x93, 0xa6, 0xbd, 0xd2, 0x34, 0xdd, 0xb2, 0x82, 0x2a, 0x95, 0x9f, 0x33, 0x0a,
	0x3f, 0x0c, 0xa4, 0x2b, 0x49, 0x7d, 0x72, 0x1a, 0x99, 0x15, 0xab, 0xf4, 0xfd, 0x36, 0xd7, 0x37,
	0x82, 0x28, 0x52, 0xbf, 0xbe, 0xcb, 0xaa, 0xf4, 0xfd, 0x0e, 0x5e, 0xbf, 0x6a, 0x49, 0xfa, 0x02,
	0x59, 0xc4, 0xda, 0xbc, 0x4a, 0xe1, 0xef, 0x72, 0x85, 0xa3, 0xc8, 0x52, 0xab, 0xb4, 0xe8, 0x08,
	0x23, 0xcb, 0xbe, 0xc6, 0x1c, 0xfc, 0xe0, 0xf0, 0xf7, 0x0c, 0x74, 0xd5, 0xa1, 0x92, 0x41, 0x86,
	0x70, 0x02, 0x97, 0x74, 0xff, 0xdf, 0xc7, 0x87, 0xb0, 0x52, 0x28, 0x77, 0x55, 0x0d, 0x3f, 0xc5,
	0x4d, 0x22, 0xd2, 0xe7, 0x0d, 0x8d, 0xab, 0x6a, 0x2a, 0x06, 0x1d, 0x55, 0x7c, 0xc5, 0xfc, 0xe7,
	0x86, 0xc6, 0x9b, 0x0a, 0x15, 0x03, 0x12, 0x66, 0x13, 0x20, 0x0b, 0x02, 0x3f, 0x18, 0xee, 0x7c,
	0xbc, 0x2e, 0xd7, 0xa4, 0x45, 0xa0, 0xa1, 0x88, 0x7b, 0xef, 0x0d, 0xfd, 0x78, 0x8e, 0x12, 0xd0,
	0xad, 0x52, 0x67, 0x40, 0x71, 0xc9, 0x72, 0x64, 0xdb, 0x7c, 0x53, 0xae, 0xb0, 0x16, 0x11, 0x7d,
	0x5e, 0xd6, 0x6a, 0x29, 0x1e, 0xae, 0x14, 0x78, 0x8e, 0xf9, 0x25, 0xae, 0xf1, 0x00, 0x68, 0x7c,
	0xdc, 0xf5, 0xd8, 0x79, 0xcf, 0xa9, 0x68, 0xb6, 0x02, 0x05, 0xbd, 0x2e, 0x5c, 0x01, 0x55, 0x01,
	0xb3, 0x5a, 0x7e, 0x59, 0xa1, 0xb3, 0x1e, 0x15, 0xfd, 0xb8, 0x70, 0xeb, 0x31, 0x27, 0x20, 0x3e,
	0xad, 0x85, 0x4c, 0x23, 0xf9, 0x6d, 0x85, 0x39, 0x7e, 0x27, 0x6f, 0xf9, 0xfc, 0x6a, 0xe3, 0xfc,
	0xd2, 0xd9, 0xf5, 0xf3, 0xcb, 0xc9, 0x93, 0x5d, 0xfc, 0xd7, 0x1d, 0x95, 0x94, 0x34, 0x2c, 0xa5,
	0x38, 0x85, 0x27, 0xd7, 0xa0, 0xf8, 0x45, 0x7d, 0xc5, 0x1a, 0x74, 0x74, 0xa7, 0xd4, 0xb2, 0xe5,
	0x37, 0xe7, 0xa0, 0xf7, 0x25, 0x7d, 0xbd, 0x7a, 0x8c, 0x74, 0x20, 0xdc, 0x60, 0x1a, 0x2e, 0x03,
	0x4b, 0x8a, 0x5f, 0xd6, 0x57, 0xac, 0xc3, 0x87, 0xa8, 0x2d, 0x3e, 0xe2, 0x06, 0xb5, 0xaf, 0x8c,
	0xae, 0x16, 0xe3, 0x43, 0x5a, 0xb7, 0xf0, 0x62, 0x1b, 0xb4, 0xbe, 0x3a, 0x7a, 0xeb, 0x22, 0x74,
	0xf4, 0x62, 0xe9, 0x80, 0x0b, 0xf6, 0x6e, 0x41, 0x55, 0xf2, 0x2b, 0x09, 0xe5, 0x5c, 0x59, 0x2a,
	0x42, 0xd7, 0x90, 0xad, 0x53, 0x61, 0x4d, 0xf9, 0x96, 0x8c, 0x51, 0x25, 0x45, 0x2f, 0x97, 0x8e,
	0x5c, 0xf8, 0x76, 0x2d, 0x50, 0xbe, 0x3d, 0xa6, 0x79, 0x4a, 0x38, 0x94, 0x41, 0x09, 0xb3, 0xe5,
	0xe9, 0x3b, 0xfa, 0x84, 0xd9, 0xda, 0x14, 0xf3, 0x62, 0x7a, 0x65, 0xe0, 0x5d, 0x7d, 0x2f, 0x26,
	0x22, 0x73, 0xdf, 0x5b, 0x20, 0xc7, 0x84, 0xab, 0x71, 0x23, 0xdf, 0x81, 0xde, 0x2c, 0xf5, 0x28,
	0xec, 0xee, 0x30, 0xa9, 0x75, 0x77, 0x58, 0x83, 0x31, 0xf7, 0x8a, 0x49, 0x8a, 0x82, 0xfb, 0x8c,
	0x93, 0x85, 0x57, 0x4c, 0x4a, 0x74, 0xee, 0xde, 0xae, 0x70, 0xb2, 0xea, 0x6f, 0x09, 0xef, 0x4a,
	0xe1, 0xd2, 0xf5, 0x78, 0xa3, 0x1a, 0xa8, 0xbc, 0x71, 0x04, 0xc6, 0xf1, 0x3f, 0xb0, 0xa0, 0x06,
	0xc9, 0x58, 0x36, 0xfc, 0x2d, 0x0e, 0x4a, 0x7e, 0x7f, 0x55, 0x0d, 0xca, 0xbd, 0xa5, 0xca, 0x03,
	0xc4, 0xaa, 0x1d, 0x2a, 0xbc, 0xa5, 0x92, 0x22, 0x11, 0x3e, 0x7e, 0x10, 0x91, 0xe7, 0xbb, 0x11,
	0xe5, 0x43, 0x90, 0xb9, 0xfb, 0xc9, 0xc2, 0x5e, 0xbb, 0xeb, 0x31, 0xf0, 0x14, 0xff, 0x2d, 0x50,
	0x15, 0x44, 0x79, 0x33, 0x07, 0x38, 0x8e, 0xa3, 0xde, 0xce, 0x83, 0x64, 0x2c, 0x43, 0x6f, 0xcf,
	0xa2, 0xde, 0xce, 0x83, 0x90, 0x7e, 0x04, 0x07, 0x2a, 0x79, 0xe7, 0xdc, 0x8e, 0xf6, 0xa3, 0x32,
	0x10, 0xb9, 0x7f, 0x95, 0x9d, 0xa4, 0xe7, 0x19, 0xef, 0x2a, 0xdc, 0x4c, 0x56, 0x81, 0x91, 0xfb,
	0x2c, 0x7d, 0x97, 0x6d, 0x31, 0xa7, 0xc3, 0xd8, 0x76, 0xbf, 0xeb, 0x87, 0x71, 0x2a, 0x7f, 0x1a,
	0xbd, 0xcf, 0x52, 0xc2, 0x21, 0x16, 0x0a, 0x37, 0xf5, 0x45, 0x0b, 0x17, 0x51, 0x0b, 0x71, 0x30,
	0xf5, 0x4a, 0x5b, 0x5a, 0x7d, 0x97, 0xe5, 0x22, 0xcb, 0xdd, 0xb5, 0x22, 0x4b, 0x05, 0x1b, 0xd2,
	0xa7, 0x0b, 0x08, 0xe8, 0x46, 0xf7, 0x14, 0xde, 0xdb, 0x4b, 0x91, 0xb8, 0x87, 0xa1, 0x6e, 0x43,
	0x0f, 0xdf, 0x2b, 0xf3, 0x70, 0x1e, 0x87, 0xd8, 0x26, 0xdc, 0x79, 0xc8, 0x3a, 0xe7, 0x03, 0xe8,
	0x78, 0x43, 0x90, 0x32, 0xbe, 0x42, 0x67, 0xff, 0x90, 0x9c, 0xaf, 0xd0, 0xe3, 0x2f, 0x55, 0xed,
	0xbf, 0x81, 0xef, 0x1e, 0x44, 0x7d, 0x87, 0x20, 0x95, 0xf6, 0x0d, 0xf9, 0x3e, 0x2c, 0xe7, 0x2b,
	0x8c, 0xeb, 0xd5, 0x52, 0xca, 0x05, 0xa8, 0x62, 0xff, 0x7c, 0x88, 0xff, 0xbd, 0x18, 0x0d, 0x28,
	0xd2, 0xba, 0x59, 0x3d, 0xb2, 0xb0, 0xf5, 0x30, 0xd8, 0x57, 0x89, 0x43, 0x6a, 0x9b, 0x0c, 0x89,
	0x1d, 0x6b, 0xdb, 0x0d, 0xfd, 0xc0, 0x71, 0x3d, 0xab, 0x0b, 0x4f, 0x36, 0xf7, 0x34, 0x34, 0x90,
	0x78, 0x4f, 0x2e, 0x3d, 0x64, 0x38, 0x87, 0xb6, 0x2e, 0x82, 0x54, 0xdc, 0x7d, 0x1b, 0xf6, 0x95,
	0xf3, 0x85, 0x6b, 0xf9, 0x12, 0x5c, 0xd5, 0x3d, 0x3a, 0xf0, 0xdb, 0x0a, 0xea, 0xb7, 0x12, 0x2e,
	0xf7, 0xba, 0x22, 0x87, 0xc9, 0x5a, 0xe0, 0xd1, 0xc2, 0x6f, 0xf6, 0xa0, 0x28, 0x39, 0x0f, 0xbc,
	0x0f, 0x71, 0x3d, 0x66, 0x3e, 0x56, 0x78, 0xa5, 0x81, 0xa2, 0xe8, 0x27, 0x0c, 0xe1, 0x91, 0x6c,
	0x6e, 0xdb, 0xa3, 0xcf, 0x02, 0x9b, 0x79, 0xf9, 0xbc, 0xe8, 0xa9, 0x5a, 0xd1, 0x4b, 0x9f, 0x18,
	0x71, 0x71, 0x1a, 0x61, 0xe1, 0x1f, 0xe0, 0x98, 0x9f, 0x43, 0x5d, 0x5c, 0xc2, 0xe5, 0x1e, 0x79,
	0xe0, 0x7b, 0x1d, 0x40, 0xf7, 0x07, 0x46, 0xe1, 0x91, 0x87, 0x1c, 0x4b, 0xd7, 0x64, 0x9b, 0x15,
	0x19, 0x8c, 0xff, 0x6a, 0xff, 0x1f, 0x1a, 0xe8, 0x35, 0x77, 0x14, 0x4c, 0xaf, 0x54, 0xee, 0xea,
	0xf4, 0x59, 0xe0, 0xfa, 0x8e, 0xf9, 0x47, 0x06, 0x7a, 0x4b, 0x19, 0x47, 0xe7, 0x7e, 0x64, 0x53,
	0xb6, 0xd5, 0x93, 0x3c, 0x21, 0x32, 0xff, 0x98, 0x5f, 0x8a, 0xd1, 0x16, 0x40, 0xb6, 0x95, 0x8b,
	0x58, 0x3e, 0xfe, 0xf8, 0x5f, 0xc0, 0xf8, 0x13, 0x03, 0x5e, 0xf9, 0xd4, 0x10, 0x41, 0x76, 0x07,
	0x31, 0x63, 0xd2, 0x87, 0x18, 0xe6, 0x9f, 0xf2, 0x0a, 0xd4, 0x91, 0xd1, 0xa8, 0x43, 0x0c, 0x0f,
	0x4e, 0xf3, 0xbf, 0x5b, 0xf4, 0x67, 0x06, 0x7a, 0x38, 0xaa, 0x10, 0x91, 0x37, 0x6c, 0xb6, 0x51,
	0xc4, 0xa2, 0x28, 0xf6, 0xcf, 0x5f, 0x2a, 0x1b, 0xb6, 0x80, 0xa6, 0xac, 0x6a, 0x8f, 0x27, 0x01,
	0x66, 0x7b, 0x3c, 0x7f, 0x65, 0x14, 0xde, 0xf9, 0xea, 0x48, 0x21, 0x07, 0x5d, 0x05, 0x01, 0x18,
	0x3d, 0x5f, 0x30, 0x54, 0xa1, 0x5d, 0x84, 0xca, 0xfd, 0x2d, 0xa2, 0x32, 0xa3, 0x5f, 0xc4, 0x8f,
	0x22, 0x14, 0x22, 0xf2, 0x1e, 0x9f, 0xa2, 0xdb, 0xf1, 0xf4, 0xc5, 0x9b, 0xf3, 0x25, 0x7e, 0x40,
	0xa7, 0x2d, 0x40, 0xaf, 0x91, 0x0f, 0xe8, 0x62, 0xb3, 0x3a, 0xbc, 0xcc, 0x95, 0xd4, 0x16, 0xac,
	0x76, 0x55, 0x12, 0x3b, 0x79, 0x5d, 0x5e, 0xe1, 0x6a, 0x6a, 0x88, 0x20, 0xe7, 0x19, 0x0a, 0x74,
	0x56, 0x9f, 0x57, 0xb9, 0xa2, 0x11, 0x44, 0x73, 0xbf, 0x28, 0x2c, 0xd9, 0x34, 0x75, 0x1c, 0xb6,
	0xc9, 0x2b, 0xf4, 0x9a, 0x51, 0xf8, 0x11, 0x86, 0x2a, 0x09, 0xe4, 0xb8, 0x44, 0x0e, 0xce, 0xaa,
	0xf3, 0x45, 0xae, 0xa6, 0xbe, 0x24, 0xfd, 0x9c, 0x51, 0xd5, 0x1b, 0xf8, 0x9f, 0xa4, 0xe2, 0x87,
	0x04, 0x9b, 0x0c, 0x7e, 0x1f, 0xf0, 0x2b, 0x7c, 0xab, 0xf5, 0x64, 0xfe, 0xcd, 0x33, 0xfc, 0xc9,
	0xc7, 0xcb, 0x6d, 0xfc, 0xf1, 0x73, 0x6d, 0x25, 0xf4, 0xf3, 0x06, 0x39, 0x53, 0x57, 0x28, 0x73,
	0xc8, 0x57, 0xeb, 0x5b, 0x38, 0xb2, 0x32, 0x6d, 0x1f, 0xa6, 0x7f, 0x2a, 0x0d, 0x7c, 0xf8, 0xb5,
	0x9f, 0x90, 0x0f, 0x45, 0x25, 0xda, 0x3e, 0x14, 0x85, 0x32, 0x1f, 0xbe, 0xf5, 0x13, 0xf2, 0x21,
	0xa6, 0xac, 0xce, 0x0b, 0xc7, 0x76, 0x3b, 0x64, 0xd1, 0xb6, 0xf9, 0x76, 0xcd, 0x17, 0x8e, 0x5c,
	0xac, 0xb6, 0xa2, 0x1d, 0xf3, 0x9d, 0x51, 0x14, 0xd5, 0x7a, 0x4a, 0x99, 0xd4, 0xe8, 0xdd, 0x9a,
	0x4f, 0x29, 0xb5, 0x6b, 0x94, 0x97, 0xd8, 0x31, 0xbf, 0x3e, 0x8a, 0xa2, 0x1d, 0x79, 0x1a, 0x0a,
	0x4f, 0xa4, 0x53, 0x29, 0xf3, 0x1b, 0x06, 0xba, 0x80, 0xc3, 0xb0, 0xf2, 0xa9, 0x19, 0xf2, 0x9b,
	0xa4, 0xdb, 0x98, 0xdf, 0x34, 0xd0, 0x55, 0x12, 0x02, 0x95, 0xcf, 0x37, 0x22, 0x2a, 0xeb, 0xe2,
	0xdf, 0x52, 0xa6, 0x42, 0x98, 0x08, 0x62, 0x71, 0x72, 0xe1, 0xda, 0xbd, 0xce, 0x1c, 0xb7, 0xc7,
	0x3c, 0xd8, 0x52, 0xf8, 0x21, 0x9e, 0x4c, 0x20, 0x50, 0x24, 0x13, 0x4f, 0xef, 0x85, 0xe7, 0x97,
	0xc5, 0xff, 0x68, 0x14, 0x7e, 0xbe, 0x4f, 0x01, 0xa6, 0xe7, 0x4b, 0x5b, 0x68, 0x1c, 0x97, 0xad,
	0x15, 0xfe, 0xc9, 0x40, 0x77, 0xe2, 0xf2, 0x28, 0x24, 0xef, 0x1b, 0xaa, 0xcb, 0x45, 0xb3, 0xff,
	0x30, 0xd0, 0x4d, 0x25, 0x1c, 0x2d, 0xad, 0xb2, 0xe5, 0x3c, 0x3f, 0x08, 0xa3, 0x1e, 0xf3, 0x22,
	0xfe, 0x0b, 0x0f, 0xff, 0xc9, 0xfb, 0xa9, 0x16, 0xf8, 0xdc, 0xa9, 0xa7, 0xee, 0xea, 0xb8, 0xd1,
	0xc6, 0xa0, 0xb5, 0x60, 0xfb, 0xbd, 0x53, 0xd7, 0xdd, 0x5e, 0xcb, 0x6a, 0x59, 0xfe, 0x29, 0xc7,
	0xb7, 0x6d, 0xdf, 0xdb, 0x3c, 0xe5, 0x3e, 0xe1, 0x07, 0xd7, 0x4e, 0xc5, 0xa1, 0xec, 0x14, 0x5f,
	0xe6, 0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x03, 0x8e, 0x71, 0x5f, 0x7c, 0x00, 0x00,
}
