// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TSCHArchives.proto

package TSCH

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	TSD "github.com/zimbabao/docconv/iWork/TSD"
	TSK "github.com/zimbabao/docconv/iWork/TSK"
	TSP "github.com/zimbabao/docconv/iWork/TSP"
	TSS "github.com/zimbabao/docconv/iWork/TSS"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChartDrawableArchive struct {
	Super                        *TSD.DrawableArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}             `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *ChartDrawableArchive) Reset()         { *m = ChartDrawableArchive{} }
func (m *ChartDrawableArchive) String() string { return proto.CompactTextString(m) }
func (*ChartDrawableArchive) ProtoMessage()    {}
func (*ChartDrawableArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{0}
}

var extRange_ChartDrawableArchive = []proto.ExtensionRange{
	{Start: 10000, End: 536870911},
}

func (*ChartDrawableArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartDrawableArchive
}

func (m *ChartDrawableArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartDrawableArchive.Unmarshal(m, b)
}
func (m *ChartDrawableArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartDrawableArchive.Marshal(b, m, deterministic)
}
func (m *ChartDrawableArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartDrawableArchive.Merge(m, src)
}
func (m *ChartDrawableArchive) XXX_Size() int {
	return xxx_messageInfo_ChartDrawableArchive.Size(m)
}
func (m *ChartDrawableArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartDrawableArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartDrawableArchive proto.InternalMessageInfo

func (m *ChartDrawableArchive) GetSuper() *TSD.DrawableArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartArchive struct {
	ChartType                           *ChartType                   `protobuf:"varint,1,opt,name=chart_type,json=chartType,enum=TSCH.ChartType" json:"chart_type,omitempty"`
	ScatterFormat                       *ScatterFormat               `protobuf:"varint,2,opt,name=scatter_format,json=scatterFormat,enum=TSCH.ScatterFormat" json:"scatter_format,omitempty"`
	LegendFrame                         *RectArchive                 `protobuf:"bytes,3,opt,name=legend_frame,json=legendFrame" json:"legend_frame,omitempty"`
	Preset                              *TSP.Reference               `protobuf:"bytes,4,opt,name=preset" json:"preset,omitempty"`
	SeriesDirection                     *SeriesDirection             `protobuf:"varint,5,opt,name=series_direction,json=seriesDirection,enum=TSCH.SeriesDirection" json:"series_direction,omitempty"`
	ContainsDefaultData                 *bool                        `protobuf:"varint,6,opt,name=contains_default_data,json=containsDefaultData" json:"contains_default_data,omitempty"`
	Grid                                *ChartGridArchive            `protobuf:"bytes,7,opt,name=grid" json:"grid,omitempty"`
	Mediator                            *TSP.Reference               `protobuf:"bytes,8,opt,name=mediator" json:"mediator,omitempty"`
	ChartStyle                          *TSP.Reference               `protobuf:"bytes,9,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	ChartNonStyle                       *TSP.Reference               `protobuf:"bytes,10,opt,name=chart_non_style,json=chartNonStyle" json:"chart_non_style,omitempty"`
	LegendStyle                         *TSP.Reference               `protobuf:"bytes,11,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	LegendNonStyle                      *TSP.Reference               `protobuf:"bytes,12,opt,name=legend_non_style,json=legendNonStyle" json:"legend_non_style,omitempty"`
	ValueAxisStyles                     []*TSP.Reference             `protobuf:"bytes,13,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	ValueAxisNonstyles                  []*TSP.Reference             `protobuf:"bytes,14,rep,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisStyles                  []*TSP.Reference             `protobuf:"bytes,15,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	CategoryAxisNonstyles               []*TSP.Reference             `protobuf:"bytes,16,rep,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles                   []*TSP.Reference             `protobuf:"bytes,17,rep,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles                 *SparseReferenceArrayArchive `protobuf:"bytes,18,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonStyles                     *SparseReferenceArrayArchive `protobuf:"bytes,19,opt,name=series_non_styles,json=seriesNonStyles" json:"series_non_styles,omitempty"`
	ParagraphStyles                     []*TSP.Reference             `protobuf:"bytes,20,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	MultidatasetIndex                   *uint32                      `protobuf:"varint,21,opt,name=multidataset_index,json=multidatasetIndex" json:"multidataset_index,omitempty"`
	NeedsCalcEngineDeferredImportAction *bool                        `protobuf:"varint,22,opt,name=needs_calc_engine_deferred_import_action,json=needsCalcEngineDeferredImportAction" json:"needs_calc_engine_deferred_import_action,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                     `json:"-"`
	proto.XXX_InternalExtensions        `json:"-"`
	XXX_unrecognized                    []byte `json:"-"`
	XXX_sizecache                       int32  `json:"-"`
}

func (m *ChartArchive) Reset()         { *m = ChartArchive{} }
func (m *ChartArchive) String() string { return proto.CompactTextString(m) }
func (*ChartArchive) ProtoMessage()    {}
func (*ChartArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{1}
}

var extRange_ChartArchive = []proto.ExtensionRange{
	{Start: 10000, End: 536870911},
}

func (*ChartArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartArchive
}

func (m *ChartArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartArchive.Unmarshal(m, b)
}
func (m *ChartArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartArchive.Marshal(b, m, deterministic)
}
func (m *ChartArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartArchive.Merge(m, src)
}
func (m *ChartArchive) XXX_Size() int {
	return xxx_messageInfo_ChartArchive.Size(m)
}
func (m *ChartArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartArchive proto.InternalMessageInfo

func (m *ChartArchive) GetChartType() ChartType {
	if m != nil && m.ChartType != nil {
		return *m.ChartType
	}
	return ChartType_undefinedChartType
}

func (m *ChartArchive) GetScatterFormat() ScatterFormat {
	if m != nil && m.ScatterFormat != nil {
		return *m.ScatterFormat
	}
	return ScatterFormat_scatter_format_unknown
}

func (m *ChartArchive) GetLegendFrame() *RectArchive {
	if m != nil {
		return m.LegendFrame
	}
	return nil
}

func (m *ChartArchive) GetPreset() *TSP.Reference {
	if m != nil {
		return m.Preset
	}
	return nil
}

func (m *ChartArchive) GetSeriesDirection() SeriesDirection {
	if m != nil && m.SeriesDirection != nil {
		return *m.SeriesDirection
	}
	return SeriesDirection_series_direction_unknown
}

func (m *ChartArchive) GetContainsDefaultData() bool {
	if m != nil && m.ContainsDefaultData != nil {
		return *m.ContainsDefaultData
	}
	return false
}

func (m *ChartArchive) GetGrid() *ChartGridArchive {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *ChartArchive) GetMediator() *TSP.Reference {
	if m != nil {
		return m.Mediator
	}
	return nil
}

func (m *ChartArchive) GetChartStyle() *TSP.Reference {
	if m != nil {
		return m.ChartStyle
	}
	return nil
}

func (m *ChartArchive) GetChartNonStyle() *TSP.Reference {
	if m != nil {
		return m.ChartNonStyle
	}
	return nil
}

func (m *ChartArchive) GetLegendStyle() *TSP.Reference {
	if m != nil {
		return m.LegendStyle
	}
	return nil
}

func (m *ChartArchive) GetLegendNonStyle() *TSP.Reference {
	if m != nil {
		return m.LegendNonStyle
	}
	return nil
}

func (m *ChartArchive) GetValueAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.ValueAxisStyles
	}
	return nil
}

func (m *ChartArchive) GetValueAxisNonstyles() []*TSP.Reference {
	if m != nil {
		return m.ValueAxisNonstyles
	}
	return nil
}

func (m *ChartArchive) GetCategoryAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.CategoryAxisStyles
	}
	return nil
}

func (m *ChartArchive) GetCategoryAxisNonstyles() []*TSP.Reference {
	if m != nil {
		return m.CategoryAxisNonstyles
	}
	return nil
}

func (m *ChartArchive) GetSeriesThemeStyles() []*TSP.Reference {
	if m != nil {
		return m.SeriesThemeStyles
	}
	return nil
}

func (m *ChartArchive) GetSeriesPrivateStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesPrivateStyles
	}
	return nil
}

func (m *ChartArchive) GetSeriesNonStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesNonStyles
	}
	return nil
}

func (m *ChartArchive) GetParagraphStyles() []*TSP.Reference {
	if m != nil {
		return m.ParagraphStyles
	}
	return nil
}

func (m *ChartArchive) GetMultidatasetIndex() uint32 {
	if m != nil && m.MultidatasetIndex != nil {
		return *m.MultidatasetIndex
	}
	return 0
}

func (m *ChartArchive) GetNeedsCalcEngineDeferredImportAction() bool {
	if m != nil && m.NeedsCalcEngineDeferredImportAction != nil {
		return *m.NeedsCalcEngineDeferredImportAction
	}
	return false
}

var E_ChartArchive_Unity = &proto.ExtensionDesc{
	ExtendedType:  (*ChartDrawableArchive)(nil),
	ExtensionType: (*ChartArchive)(nil),
	Field:         10000,
	Name:          "TSCH.ChartArchive.unity",
	Tag:           "bytes,10000,opt,name=unity",
	Filename:      "TSCHArchives.proto",
}

type ChartPasteboardAdditionsArchive struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChartPasteboardAdditionsArchive) Reset()         { *m = ChartPasteboardAdditionsArchive{} }
func (m *ChartPasteboardAdditionsArchive) String() string { return proto.CompactTextString(m) }
func (*ChartPasteboardAdditionsArchive) ProtoMessage()    {}
func (*ChartPasteboardAdditionsArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{2}
}

func (m *ChartPasteboardAdditionsArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartPasteboardAdditionsArchive.Unmarshal(m, b)
}
func (m *ChartPasteboardAdditionsArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartPasteboardAdditionsArchive.Marshal(b, m, deterministic)
}
func (m *ChartPasteboardAdditionsArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartPasteboardAdditionsArchive.Merge(m, src)
}
func (m *ChartPasteboardAdditionsArchive) XXX_Size() int {
	return xxx_messageInfo_ChartPasteboardAdditionsArchive.Size(m)
}
func (m *ChartPasteboardAdditionsArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartPasteboardAdditionsArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartPasteboardAdditionsArchive proto.InternalMessageInfo

var E_ChartPasteboardAdditionsArchive_PresetIndexForPasteboard = &proto.ExtensionDesc{
	ExtendedType:  (*ChartArchive)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         10000,
	Name:          "TSCH.ChartPasteboardAdditionsArchive.preset_index_for_pasteboard",
	Tag:           "varint,10000,opt,name=preset_index_for_pasteboard",
	Filename:      "TSCHArchives.proto",
}

var E_ChartPasteboardAdditionsArchive_PresetUuidForPasteboard = &proto.ExtensionDesc{
	ExtendedType:  (*ChartArchive)(nil),
	ExtensionType: ([]byte)(nil),
	Field:         10001,
	Name:          "TSCH.ChartPasteboardAdditionsArchive.preset_uuid_for_pasteboard",
	Tag:           "bytes,10001,opt,name=preset_uuid_for_pasteboard",
	Filename:      "TSCHArchives.proto",
}

type ChartGridArchive struct {
	RowName              []string                    `protobuf:"bytes,1,rep,name=row_name,json=rowName" json:"row_name,omitempty"`
	ColumnName           []string                    `protobuf:"bytes,2,rep,name=column_name,json=columnName" json:"column_name,omitempty"`
	GridRow              []*ChartGridArchive_GridRow `protobuf:"bytes,3,rep,name=grid_row,json=gridRow" json:"grid_row,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChartGridArchive) Reset()         { *m = ChartGridArchive{} }
func (m *ChartGridArchive) String() string { return proto.CompactTextString(m) }
func (*ChartGridArchive) ProtoMessage()    {}
func (*ChartGridArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{3}
}

func (m *ChartGridArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartGridArchive.Unmarshal(m, b)
}
func (m *ChartGridArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartGridArchive.Marshal(b, m, deterministic)
}
func (m *ChartGridArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartGridArchive.Merge(m, src)
}
func (m *ChartGridArchive) XXX_Size() int {
	return xxx_messageInfo_ChartGridArchive.Size(m)
}
func (m *ChartGridArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartGridArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartGridArchive proto.InternalMessageInfo

func (m *ChartGridArchive) GetRowName() []string {
	if m != nil {
		return m.RowName
	}
	return nil
}

func (m *ChartGridArchive) GetColumnName() []string {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *ChartGridArchive) GetGridRow() []*ChartGridArchive_GridRow {
	if m != nil {
		return m.GridRow
	}
	return nil
}

type ChartGridArchive_GridRow struct {
	Value                []*ChartGridArchive_GridRow_GridValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ChartGridArchive_GridRow) Reset()         { *m = ChartGridArchive_GridRow{} }
func (m *ChartGridArchive_GridRow) String() string { return proto.CompactTextString(m) }
func (*ChartGridArchive_GridRow) ProtoMessage()    {}
func (*ChartGridArchive_GridRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{3, 0}
}

func (m *ChartGridArchive_GridRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartGridArchive_GridRow.Unmarshal(m, b)
}
func (m *ChartGridArchive_GridRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartGridArchive_GridRow.Marshal(b, m, deterministic)
}
func (m *ChartGridArchive_GridRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartGridArchive_GridRow.Merge(m, src)
}
func (m *ChartGridArchive_GridRow) XXX_Size() int {
	return xxx_messageInfo_ChartGridArchive_GridRow.Size(m)
}
func (m *ChartGridArchive_GridRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartGridArchive_GridRow.DiscardUnknown(m)
}

var xxx_messageInfo_ChartGridArchive_GridRow proto.InternalMessageInfo

func (m *ChartGridArchive_GridRow) GetValue() []*ChartGridArchive_GridRow_GridValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChartGridArchive_GridRow_GridValue struct {
	NumericValue         *float64 `protobuf:"fixed64,1,opt,name=numeric_value,json=numericValue" json:"numeric_value,omitempty"`
	DateValue            *float64 `protobuf:"fixed64,2,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChartGridArchive_GridRow_GridValue) Reset()         { *m = ChartGridArchive_GridRow_GridValue{} }
func (m *ChartGridArchive_GridRow_GridValue) String() string { return proto.CompactTextString(m) }
func (*ChartGridArchive_GridRow_GridValue) ProtoMessage()    {}
func (*ChartGridArchive_GridRow_GridValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{3, 0, 0}
}

func (m *ChartGridArchive_GridRow_GridValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartGridArchive_GridRow_GridValue.Unmarshal(m, b)
}
func (m *ChartGridArchive_GridRow_GridValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartGridArchive_GridRow_GridValue.Marshal(b, m, deterministic)
}
func (m *ChartGridArchive_GridRow_GridValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartGridArchive_GridRow_GridValue.Merge(m, src)
}
func (m *ChartGridArchive_GridRow_GridValue) XXX_Size() int {
	return xxx_messageInfo_ChartGridArchive_GridRow_GridValue.Size(m)
}
func (m *ChartGridArchive_GridRow_GridValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartGridArchive_GridRow_GridValue.DiscardUnknown(m)
}

var xxx_messageInfo_ChartGridArchive_GridRow_GridValue proto.InternalMessageInfo

func (m *ChartGridArchive_GridRow_GridValue) GetNumericValue() float64 {
	if m != nil && m.NumericValue != nil {
		return *m.NumericValue
	}
	return 0
}

func (m *ChartGridArchive_GridRow_GridValue) GetDateValue() float64 {
	if m != nil && m.DateValue != nil {
		return *m.DateValue
	}
	return 0
}

type ChartMediatorArchive struct {
	Info                 *TSP.Reference `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	LocalSeriesIndexes   []uint32       `protobuf:"varint,2,rep,name=local_series_indexes,json=localSeriesIndexes" json:"local_series_indexes,omitempty"`
	RemoteSeriesIndexes  []uint32       `protobuf:"varint,3,rep,name=remote_series_indexes,json=remoteSeriesIndexes" json:"remote_series_indexes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChartMediatorArchive) Reset()         { *m = ChartMediatorArchive{} }
func (m *ChartMediatorArchive) String() string { return proto.CompactTextString(m) }
func (*ChartMediatorArchive) ProtoMessage()    {}
func (*ChartMediatorArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{4}
}

func (m *ChartMediatorArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartMediatorArchive.Unmarshal(m, b)
}
func (m *ChartMediatorArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartMediatorArchive.Marshal(b, m, deterministic)
}
func (m *ChartMediatorArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartMediatorArchive.Merge(m, src)
}
func (m *ChartMediatorArchive) XXX_Size() int {
	return xxx_messageInfo_ChartMediatorArchive.Size(m)
}
func (m *ChartMediatorArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartMediatorArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartMediatorArchive proto.InternalMessageInfo

func (m *ChartMediatorArchive) GetInfo() *TSP.Reference {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ChartMediatorArchive) GetLocalSeriesIndexes() []uint32 {
	if m != nil {
		return m.LocalSeriesIndexes
	}
	return nil
}

func (m *ChartMediatorArchive) GetRemoteSeriesIndexes() []uint32 {
	if m != nil {
		return m.RemoteSeriesIndexes
	}
	return nil
}

type ChartStylePreset struct {
	ChartStyle           *TSP.Reference   `protobuf:"bytes,1,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	LegendStyle          *TSP.Reference   `protobuf:"bytes,2,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	ValueAxisStyles      []*TSP.Reference `protobuf:"bytes,3,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	CategoryAxisStyles   []*TSP.Reference `protobuf:"bytes,4,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	SeriesStyles         []*TSP.Reference `protobuf:"bytes,5,rep,name=series_styles,json=seriesStyles" json:"series_styles,omitempty"`
	ParagraphStyles      []*TSP.Reference `protobuf:"bytes,6,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	Uuid                 []byte           `protobuf:"bytes,7,opt,name=uuid" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChartStylePreset) Reset()         { *m = ChartStylePreset{} }
func (m *ChartStylePreset) String() string { return proto.CompactTextString(m) }
func (*ChartStylePreset) ProtoMessage()    {}
func (*ChartStylePreset) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{5}
}

func (m *ChartStylePreset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartStylePreset.Unmarshal(m, b)
}
func (m *ChartStylePreset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartStylePreset.Marshal(b, m, deterministic)
}
func (m *ChartStylePreset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartStylePreset.Merge(m, src)
}
func (m *ChartStylePreset) XXX_Size() int {
	return xxx_messageInfo_ChartStylePreset.Size(m)
}
func (m *ChartStylePreset) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartStylePreset.DiscardUnknown(m)
}

var xxx_messageInfo_ChartStylePreset proto.InternalMessageInfo

func (m *ChartStylePreset) GetChartStyle() *TSP.Reference {
	if m != nil {
		return m.ChartStyle
	}
	return nil
}

func (m *ChartStylePreset) GetLegendStyle() *TSP.Reference {
	if m != nil {
		return m.LegendStyle
	}
	return nil
}

func (m *ChartStylePreset) GetValueAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.ValueAxisStyles
	}
	return nil
}

func (m *ChartStylePreset) GetCategoryAxisStyles() []*TSP.Reference {
	if m != nil {
		return m.CategoryAxisStyles
	}
	return nil
}

func (m *ChartStylePreset) GetSeriesStyles() []*TSP.Reference {
	if m != nil {
		return m.SeriesStyles
	}
	return nil
}

func (m *ChartStylePreset) GetParagraphStyles() []*TSP.Reference {
	if m != nil {
		return m.ParagraphStyles
	}
	return nil
}

func (m *ChartStylePreset) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type ChartPresetsArchive struct {
	ChartPresets         []*TSP.Reference `protobuf:"bytes,1,rep,name=chart_presets,json=chartPresets" json:"chart_presets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChartPresetsArchive) Reset()         { *m = ChartPresetsArchive{} }
func (m *ChartPresetsArchive) String() string { return proto.CompactTextString(m) }
func (*ChartPresetsArchive) ProtoMessage()    {}
func (*ChartPresetsArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{6}
}

func (m *ChartPresetsArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartPresetsArchive.Unmarshal(m, b)
}
func (m *ChartPresetsArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartPresetsArchive.Marshal(b, m, deterministic)
}
func (m *ChartPresetsArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartPresetsArchive.Merge(m, src)
}
func (m *ChartPresetsArchive) XXX_Size() int {
	return xxx_messageInfo_ChartPresetsArchive.Size(m)
}
func (m *ChartPresetsArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartPresetsArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartPresetsArchive proto.InternalMessageInfo

func (m *ChartPresetsArchive) GetChartPresets() []*TSP.Reference {
	if m != nil {
		return m.ChartPresets
	}
	return nil
}

var E_ChartPresetsArchive_Extension = &proto.ExtensionDesc{
	ExtendedType:  (*TSS.ThemeArchive)(nil),
	ExtensionType: (*ChartPresetsArchive)(nil),
	Field:         120,
	Name:          "TSCH.ChartPresetsArchive.extension",
	Tag:           "bytes,120,opt,name=extension",
	Filename:      "TSCHArchives.proto",
}

type PropertyValueStorageContainerArchive struct {
	ChartStyle            *TSP.Reference               `protobuf:"bytes,1,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	ChartNonstyle         *TSP.Reference               `protobuf:"bytes,2,opt,name=chart_nonstyle,json=chartNonstyle" json:"chart_nonstyle,omitempty"`
	LegendStyle           *TSP.Reference               `protobuf:"bytes,3,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	LegendNonstyle        *TSP.Reference               `protobuf:"bytes,4,opt,name=legend_nonstyle,json=legendNonstyle" json:"legend_nonstyle,omitempty"`
	ValueAxisStyles       *SparseReferenceArrayArchive `protobuf:"bytes,5,opt,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	ValueAxisNonstyles    *SparseReferenceArrayArchive `protobuf:"bytes,6,opt,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisStyles    *SparseReferenceArrayArchive `protobuf:"bytes,7,opt,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	CategoryAxisNonstyles *SparseReferenceArrayArchive `protobuf:"bytes,8,opt,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles     *SparseReferenceArrayArchive `protobuf:"bytes,9,opt,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles   *SparseReferenceArrayArchive `protobuf:"bytes,10,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonstyles       *SparseReferenceArrayArchive `protobuf:"bytes,11,opt,name=series_nonstyles,json=seriesNonstyles" json:"series_nonstyles,omitempty"`
	ParagraphStyles       *SparseReferenceArrayArchive `protobuf:"bytes,12,opt,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *PropertyValueStorageContainerArchive) Reset()         { *m = PropertyValueStorageContainerArchive{} }
func (m *PropertyValueStorageContainerArchive) String() string { return proto.CompactTextString(m) }
func (*PropertyValueStorageContainerArchive) ProtoMessage()    {}
func (*PropertyValueStorageContainerArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{7}
}

func (m *PropertyValueStorageContainerArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertyValueStorageContainerArchive.Unmarshal(m, b)
}
func (m *PropertyValueStorageContainerArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertyValueStorageContainerArchive.Marshal(b, m, deterministic)
}
func (m *PropertyValueStorageContainerArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertyValueStorageContainerArchive.Merge(m, src)
}
func (m *PropertyValueStorageContainerArchive) XXX_Size() int {
	return xxx_messageInfo_PropertyValueStorageContainerArchive.Size(m)
}
func (m *PropertyValueStorageContainerArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertyValueStorageContainerArchive.DiscardUnknown(m)
}

var xxx_messageInfo_PropertyValueStorageContainerArchive proto.InternalMessageInfo

func (m *PropertyValueStorageContainerArchive) GetChartStyle() *TSP.Reference {
	if m != nil {
		return m.ChartStyle
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetChartNonstyle() *TSP.Reference {
	if m != nil {
		return m.ChartNonstyle
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetLegendStyle() *TSP.Reference {
	if m != nil {
		return m.LegendStyle
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetLegendNonstyle() *TSP.Reference {
	if m != nil {
		return m.LegendNonstyle
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetValueAxisStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.ValueAxisStyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetValueAxisNonstyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.ValueAxisNonstyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetCategoryAxisStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.CategoryAxisStyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetCategoryAxisNonstyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.CategoryAxisNonstyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetSeriesThemeStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesThemeStyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetSeriesPrivateStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesPrivateStyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetSeriesNonstyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.SeriesNonstyles
	}
	return nil
}

func (m *PropertyValueStorageContainerArchive) GetParagraphStyles() *SparseReferenceArrayArchive {
	if m != nil {
		return m.ParagraphStyles
	}
	return nil
}

type StylePasteboardDataArchive struct {
	Super                 *TSS.StyleArchive                     `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	StyleNetwork          *PropertyValueStorageContainerArchive `protobuf:"bytes,2,opt,name=style_network,json=styleNetwork" json:"style_network,omitempty"`
	CopiedFromEntireChart *bool                                 `protobuf:"varint,3,opt,name=copied_from_entire_chart,json=copiedFromEntireChart" json:"copied_from_entire_chart,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                              `json:"-"`
	XXX_unrecognized      []byte                                `json:"-"`
	XXX_sizecache         int32                                 `json:"-"`
}

func (m *StylePasteboardDataArchive) Reset()         { *m = StylePasteboardDataArchive{} }
func (m *StylePasteboardDataArchive) String() string { return proto.CompactTextString(m) }
func (*StylePasteboardDataArchive) ProtoMessage()    {}
func (*StylePasteboardDataArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{8}
}

func (m *StylePasteboardDataArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StylePasteboardDataArchive.Unmarshal(m, b)
}
func (m *StylePasteboardDataArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StylePasteboardDataArchive.Marshal(b, m, deterministic)
}
func (m *StylePasteboardDataArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StylePasteboardDataArchive.Merge(m, src)
}
func (m *StylePasteboardDataArchive) XXX_Size() int {
	return xxx_messageInfo_StylePasteboardDataArchive.Size(m)
}
func (m *StylePasteboardDataArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_StylePasteboardDataArchive.DiscardUnknown(m)
}

var xxx_messageInfo_StylePasteboardDataArchive proto.InternalMessageInfo

func (m *StylePasteboardDataArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *StylePasteboardDataArchive) GetStyleNetwork() *PropertyValueStorageContainerArchive {
	if m != nil {
		return m.StyleNetwork
	}
	return nil
}

func (m *StylePasteboardDataArchive) GetCopiedFromEntireChart() bool {
	if m != nil && m.CopiedFromEntireChart != nil {
		return *m.CopiedFromEntireChart
	}
	return false
}

type ChartSelectionPathTypeArchive struct {
	PathType             *string  `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	PathName             *string  `protobuf:"bytes,2,opt,name=path_name,json=pathName" json:"path_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChartSelectionPathTypeArchive) Reset()         { *m = ChartSelectionPathTypeArchive{} }
func (m *ChartSelectionPathTypeArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSelectionPathTypeArchive) ProtoMessage()    {}
func (*ChartSelectionPathTypeArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{9}
}

func (m *ChartSelectionPathTypeArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSelectionPathTypeArchive.Unmarshal(m, b)
}
func (m *ChartSelectionPathTypeArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSelectionPathTypeArchive.Marshal(b, m, deterministic)
}
func (m *ChartSelectionPathTypeArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSelectionPathTypeArchive.Merge(m, src)
}
func (m *ChartSelectionPathTypeArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSelectionPathTypeArchive.Size(m)
}
func (m *ChartSelectionPathTypeArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSelectionPathTypeArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSelectionPathTypeArchive proto.InternalMessageInfo

func (m *ChartSelectionPathTypeArchive) GetPathType() string {
	if m != nil && m.PathType != nil {
		return *m.PathType
	}
	return ""
}

func (m *ChartSelectionPathTypeArchive) GetPathName() string {
	if m != nil && m.PathName != nil {
		return *m.PathName
	}
	return ""
}

type ChartAxisIDArchive struct {
	AxisType             *AxisType `protobuf:"varint,1,opt,name=axis_type,json=axisType,enum=TSCH.AxisType" json:"axis_type,omitempty"`
	Ordinal              *uint32   `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChartAxisIDArchive) Reset()         { *m = ChartAxisIDArchive{} }
func (m *ChartAxisIDArchive) String() string { return proto.CompactTextString(m) }
func (*ChartAxisIDArchive) ProtoMessage()    {}
func (*ChartAxisIDArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{10}
}

func (m *ChartAxisIDArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartAxisIDArchive.Unmarshal(m, b)
}
func (m *ChartAxisIDArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartAxisIDArchive.Marshal(b, m, deterministic)
}
func (m *ChartAxisIDArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartAxisIDArchive.Merge(m, src)
}
func (m *ChartAxisIDArchive) XXX_Size() int {
	return xxx_messageInfo_ChartAxisIDArchive.Size(m)
}
func (m *ChartAxisIDArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartAxisIDArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartAxisIDArchive proto.InternalMessageInfo

func (m *ChartAxisIDArchive) GetAxisType() AxisType {
	if m != nil && m.AxisType != nil {
		return *m.AxisType
	}
	return AxisType_axis_type_unknown
}

func (m *ChartAxisIDArchive) GetOrdinal() uint32 {
	if m != nil && m.Ordinal != nil {
		return *m.Ordinal
	}
	return 0
}

type ChartSelectionPathArgumentArchive struct {
	Number               *uint32             `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	AxisId               *ChartAxisIDArchive `protobuf:"bytes,2,opt,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ChartSelectionPathArgumentArchive) Reset()         { *m = ChartSelectionPathArgumentArchive{} }
func (m *ChartSelectionPathArgumentArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSelectionPathArgumentArchive) ProtoMessage()    {}
func (*ChartSelectionPathArgumentArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{11}
}

func (m *ChartSelectionPathArgumentArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSelectionPathArgumentArchive.Unmarshal(m, b)
}
func (m *ChartSelectionPathArgumentArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSelectionPathArgumentArchive.Marshal(b, m, deterministic)
}
func (m *ChartSelectionPathArgumentArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSelectionPathArgumentArchive.Merge(m, src)
}
func (m *ChartSelectionPathArgumentArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSelectionPathArgumentArchive.Size(m)
}
func (m *ChartSelectionPathArgumentArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSelectionPathArgumentArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSelectionPathArgumentArchive proto.InternalMessageInfo

func (m *ChartSelectionPathArgumentArchive) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *ChartSelectionPathArgumentArchive) GetAxisId() *ChartAxisIDArchive {
	if m != nil {
		return m.AxisId
	}
	return nil
}

type ChartSelectionPathArchive struct {
	PathType             *ChartSelectionPathTypeArchive       `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	SubSelection         *ChartSelectionPathArchive           `protobuf:"bytes,2,opt,name=sub_selection,json=subSelection" json:"sub_selection,omitempty"`
	Arguments            []*ChartSelectionPathArgumentArchive `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ChartSelectionPathArchive) Reset()         { *m = ChartSelectionPathArchive{} }
func (m *ChartSelectionPathArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSelectionPathArchive) ProtoMessage()    {}
func (*ChartSelectionPathArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{12}
}

func (m *ChartSelectionPathArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSelectionPathArchive.Unmarshal(m, b)
}
func (m *ChartSelectionPathArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSelectionPathArchive.Marshal(b, m, deterministic)
}
func (m *ChartSelectionPathArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSelectionPathArchive.Merge(m, src)
}
func (m *ChartSelectionPathArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSelectionPathArchive.Size(m)
}
func (m *ChartSelectionPathArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSelectionPathArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSelectionPathArchive proto.InternalMessageInfo

func (m *ChartSelectionPathArchive) GetPathType() *ChartSelectionPathTypeArchive {
	if m != nil {
		return m.PathType
	}
	return nil
}

func (m *ChartSelectionPathArchive) GetSubSelection() *ChartSelectionPathArchive {
	if m != nil {
		return m.SubSelection
	}
	return nil
}

func (m *ChartSelectionPathArchive) GetArguments() []*ChartSelectionPathArgumentArchive {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type ChartSelectionArchive struct {
	Chart                *TSP.Reference               `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	Paths                []*ChartSelectionPathArchive `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ChartSelectionArchive) Reset()         { *m = ChartSelectionArchive{} }
func (m *ChartSelectionArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSelectionArchive) ProtoMessage()    {}
func (*ChartSelectionArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{13}
}

func (m *ChartSelectionArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartSelectionArchive.Unmarshal(m, b)
}
func (m *ChartSelectionArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartSelectionArchive.Marshal(b, m, deterministic)
}
func (m *ChartSelectionArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSelectionArchive.Merge(m, src)
}
func (m *ChartSelectionArchive) XXX_Size() int {
	return xxx_messageInfo_ChartSelectionArchive.Size(m)
}
func (m *ChartSelectionArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSelectionArchive.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSelectionArchive proto.InternalMessageInfo

func (m *ChartSelectionArchive) GetChart() *TSP.Reference {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *ChartSelectionArchive) GetPaths() []*ChartSelectionPathArchive {
	if m != nil {
		return m.Paths
	}
	return nil
}

type ChartUIState struct {
	Chart                *TSP.Reference `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	CdeLastRowSelected   *int32         `protobuf:"varint,2,opt,name=cde_last_row_selected,json=cdeLastRowSelected" json:"cde_last_row_selected,omitempty"`
	CdeLastColSelected   *int32         `protobuf:"varint,3,opt,name=cde_last_col_selected,json=cdeLastColSelected" json:"cde_last_col_selected,omitempty"`
	CdeLastRowCount      *int32         `protobuf:"varint,4,opt,name=cde_last_row_count,json=cdeLastRowCount" json:"cde_last_row_count,omitempty"`
	CdeLastColCount      *int32         `protobuf:"varint,5,opt,name=cde_last_col_count,json=cdeLastColCount" json:"cde_last_col_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChartUIState) Reset()         { *m = ChartUIState{} }
func (m *ChartUIState) String() string { return proto.CompactTextString(m) }
func (*ChartUIState) ProtoMessage()    {}
func (*ChartUIState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{14}
}

func (m *ChartUIState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartUIState.Unmarshal(m, b)
}
func (m *ChartUIState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartUIState.Marshal(b, m, deterministic)
}
func (m *ChartUIState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartUIState.Merge(m, src)
}
func (m *ChartUIState) XXX_Size() int {
	return xxx_messageInfo_ChartUIState.Size(m)
}
func (m *ChartUIState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartUIState.DiscardUnknown(m)
}

var xxx_messageInfo_ChartUIState proto.InternalMessageInfo

func (m *ChartUIState) GetChart() *TSP.Reference {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *ChartUIState) GetCdeLastRowSelected() int32 {
	if m != nil && m.CdeLastRowSelected != nil {
		return *m.CdeLastRowSelected
	}
	return 0
}

func (m *ChartUIState) GetCdeLastColSelected() int32 {
	if m != nil && m.CdeLastColSelected != nil {
		return *m.CdeLastColSelected
	}
	return 0
}

func (m *ChartUIState) GetCdeLastRowCount() int32 {
	if m != nil && m.CdeLastRowCount != nil {
		return *m.CdeLastRowCount
	}
	return 0
}

func (m *ChartUIState) GetCdeLastColCount() int32 {
	if m != nil && m.CdeLastColCount != nil {
		return *m.CdeLastColCount
	}
	return 0
}

type ChartFormatStructExtensions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChartFormatStructExtensions) Reset()         { *m = ChartFormatStructExtensions{} }
func (m *ChartFormatStructExtensions) String() string { return proto.CompactTextString(m) }
func (*ChartFormatStructExtensions) ProtoMessage()    {}
func (*ChartFormatStructExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3f71bb80926da11, []int{15}
}

func (m *ChartFormatStructExtensions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartFormatStructExtensions.Unmarshal(m, b)
}
func (m *ChartFormatStructExtensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartFormatStructExtensions.Marshal(b, m, deterministic)
}
func (m *ChartFormatStructExtensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartFormatStructExtensions.Merge(m, src)
}
func (m *ChartFormatStructExtensions) XXX_Size() int {
	return xxx_messageInfo_ChartFormatStructExtensions.Size(m)
}
func (m *ChartFormatStructExtensions) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartFormatStructExtensions.DiscardUnknown(m)
}

var xxx_messageInfo_ChartFormatStructExtensions proto.InternalMessageInfo

var E_ChartFormatStructExtensions_Prefix = &proto.ExtensionDesc{
	ExtendedType:  (*TSK.FormatStructArchive)(nil),
	ExtensionType: (*string)(nil),
	Field:         10000,
	Name:          "TSCH.ChartFormatStructExtensions.prefix",
	Tag:           "bytes,10000,opt,name=prefix",
	Filename:      "TSCHArchives.proto",
}

var E_ChartFormatStructExtensions_Suffix = &proto.ExtensionDesc{
	ExtendedType:  (*TSK.FormatStructArchive)(nil),
	ExtensionType: (*string)(nil),
	Field:         10001,
	Name:          "TSCH.ChartFormatStructExtensions.suffix",
	Tag:           "bytes,10001,opt,name=suffix",
	Filename:      "TSCHArchives.proto",
}

var E_Scene3DSettingsConstantDepth = &proto.ExtensionDesc{
	ExtendedType:  (*ChartArchive)(nil),
	ExtensionType: (*bool)(nil),
	Field:         10002,
	Name:          "TSCH.scene3d_settings_constant_depth",
	Tag:           "varint,10002,opt,name=scene3d_settings_constant_depth",
	Filename:      "TSCHArchives.proto",
}

func init() {
	proto.RegisterType((*ChartDrawableArchive)(nil), "TSCH.ChartDrawableArchive")
	proto.RegisterExtension(E_ChartArchive_Unity)
	proto.RegisterType((*ChartArchive)(nil), "TSCH.ChartArchive")
	proto.RegisterExtension(E_ChartPasteboardAdditionsArchive_PresetIndexForPasteboard)
	proto.RegisterExtension(E_ChartPasteboardAdditionsArchive_PresetUuidForPasteboard)
	proto.RegisterType((*ChartPasteboardAdditionsArchive)(nil), "TSCH.ChartPasteboardAdditionsArchive")
	proto.RegisterType((*ChartGridArchive)(nil), "TSCH.ChartGridArchive")
	proto.RegisterType((*ChartGridArchive_GridRow)(nil), "TSCH.ChartGridArchive.GridRow")
	proto.RegisterType((*ChartGridArchive_GridRow_GridValue)(nil), "TSCH.ChartGridArchive.GridRow.GridValue")
	proto.RegisterType((*ChartMediatorArchive)(nil), "TSCH.ChartMediatorArchive")
	proto.RegisterType((*ChartStylePreset)(nil), "TSCH.ChartStylePreset")
	proto.RegisterExtension(E_ChartPresetsArchive_Extension)
	proto.RegisterType((*ChartPresetsArchive)(nil), "TSCH.ChartPresetsArchive")
	proto.RegisterType((*PropertyValueStorageContainerArchive)(nil), "TSCH.PropertyValueStorageContainerArchive")
	proto.RegisterType((*StylePasteboardDataArchive)(nil), "TSCH.StylePasteboardDataArchive")
	proto.RegisterType((*ChartSelectionPathTypeArchive)(nil), "TSCH.ChartSelectionPathTypeArchive")
	proto.RegisterType((*ChartAxisIDArchive)(nil), "TSCH.ChartAxisIDArchive")
	proto.RegisterType((*ChartSelectionPathArgumentArchive)(nil), "TSCH.ChartSelectionPathArgumentArchive")
	proto.RegisterType((*ChartSelectionPathArchive)(nil), "TSCH.ChartSelectionPathArchive")
	proto.RegisterType((*ChartSelectionArchive)(nil), "TSCH.ChartSelectionArchive")
	proto.RegisterType((*ChartUIState)(nil), "TSCH.ChartUIState")
	proto.RegisterExtension(E_ChartFormatStructExtensions_Prefix)
	proto.RegisterExtension(E_ChartFormatStructExtensions_Suffix)
	proto.RegisterType((*ChartFormatStructExtensions)(nil), "TSCH.ChartFormatStructExtensions")
	proto.RegisterExtension(E_Scene3DSettingsConstantDepth)
}

func init() { proto.RegisterFile("TSCHArchives.proto", fileDescriptor_e3f71bb80926da11) }

var fileDescriptor_e3f71bb80926da11 = []byte{
	// 1765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4f, 0x53, 0xe4, 0xc6,
	0x15, 0xaf, 0x01, 0x06, 0x66, 0x1e, 0x33, 0xfc, 0x69, 0x60, 0xad, 0x65, 0xe3, 0x2c, 0xd6, 0xba,
	0x6c, 0x0a, 0x57, 0x86, 0xec, 0x38, 0x8e, 0xe3, 0x3d, 0xb8, 0x96, 0xcc, 0x40, 0x42, 0x6c, 0x30,
	0xd1, 0xb0, 0x49, 0xd9, 0x39, 0xa8, 0x1a, 0xa9, 0x19, 0x54, 0x96, 0xba, 0x55, 0xdd, 0xad, 0x05,
	0x72, 0xda, 0xaa, 0x7c, 0x01, 0x3b, 0x95, 0xca, 0x21, 0xa7, 0x9c, 0xf2, 0x55, 0x72, 0xcc, 0xf7,
	0xc8, 0x39, 0x87, 0x5c, 0x52, 0x95, 0xea, 0x3f, 0xd2, 0x48, 0xb3, 0x62, 0x99, 0x2d, 0x9f, 0x10,
	0xfd, 0x7e, 0xbf, 0x5f, 0xbf, 0xee, 0x7e, 0xef, 0xf5, 0xeb, 0x01, 0x74, 0x3e, 0x1a, 0xfc, 0xfa,
	0x80, 0x07, 0x57, 0xd1, 0x4b, 0x22, 0x7a, 0x29, 0x67, 0x92, 0xa1, 0x05, 0x35, 0xb6, 0xbd, 0x7e,
	0x3e, 0x3a, 0x3b, 0x21, 0x42, 0xe0, 0x71, 0x6e, 0x50, 0x43, 0x5f, 0x54, 0xb1, 0x6a, 0x68, 0xf8,
	0xfa, 0xd0, 0x68, 0x6a, 0xe8, 0x61, 0x65, 0x96, 0x01, 0x4b, 0x12, 0x46, 0x8d, 0xc9, 0x3d, 0x81,
	0xcd, 0xc1, 0x15, 0xe6, 0x72, 0xc8, 0xf1, 0x35, 0xbe, 0x88, 0x89, 0x45, 0xa1, 0x3d, 0x68, 0x8a,
	0x2c, 0x25, 0xdc, 0x69, 0xec, 0x34, 0x76, 0x97, 0xfb, 0x9b, 0xbd, 0xf3, 0xd1, 0xb0, 0x37, 0x05,
	0xf2, 0x0c, 0x64, 0xaf, 0xdd, 0xfa, 0xee, 0x74, 0xed, 0xd5, 0xab, 0x57, 0xaf, 0xe6, 0xdc, 0xff,
	0x01, 0x74, 0xb4, 0x5e, 0xae, 0xd3, 0x03, 0x08, 0xd4, 0xff, 0xbe, 0xbc, 0x4d, 0x89, 0x16, 0x5b,
	0xe9, 0xaf, 0xf6, 0x94, 0x3f, 0x3d, 0x8d, 0x3b, 0xbf, 0x4d, 0x89, 0xd7, 0x0e, 0xf2, 0x4f, 0xf4,
	0x0c, 0x56, 0x44, 0x80, 0xa5, 0x24, 0xdc, 0xbf, 0x64, 0x3c, 0xc1, 0xd2, 0x99, 0xd3, 0x9c, 0x0d,
	0xc3, 0x19, 0x19, 0xdb, 0x91, 0x36, 0x79, 0x5d, 0x51, 0xfe, 0x17, 0xfd, 0x0c, 0x3a, 0x31, 0x19,
	0x13, 0x1a, 0xfa, 0x97, 0x1c, 0x27, 0xc4, 0x99, 0xd7, 0xae, 0xaf, 0x1b, 0xa6, 0x47, 0x82, 0xdc,
	0x29, 0x6f, 0xd9, 0xc0, 0x8e, 0x14, 0x0a, 0x7d, 0x00, 0x8b, 0x29, 0x27, 0x82, 0x48, 0x67, 0x41,
	0xe3, 0x57, 0x7a, 0xe7, 0xa3, 0xb3, 0x9e, 0x47, 0x2e, 0x09, 0x27, 0x34, 0x20, 0x9e, 0xb5, 0xa2,
	0xe7, 0xb0, 0x26, 0x08, 0x8f, 0x88, 0xf0, 0xc3, 0x88, 0x93, 0x40, 0x46, 0x8c, 0x3a, 0x4d, 0xed,
	0xdb, 0x96, 0xf5, 0x4d, 0x5b, 0x87, 0xb9, 0xd1, 0x5b, 0x15, 0xd5, 0x01, 0xd4, 0x87, 0xad, 0x80,
	0x51, 0x89, 0x23, 0x2a, 0xfc, 0x90, 0x5c, 0xe2, 0x2c, 0x96, 0x7e, 0x88, 0x25, 0x76, 0x16, 0x77,
	0x1a, 0xbb, 0x2d, 0x6f, 0x23, 0x37, 0x0e, 0x8d, 0x6d, 0x88, 0x25, 0x46, 0x7b, 0xb0, 0x30, 0xe6,
	0x51, 0xe8, 0x2c, 0x69, 0xdf, 0x1e, 0x94, 0x76, 0xee, 0x57, 0x3c, 0x0a, 0xf3, 0x05, 0x69, 0x0c,
	0xda, 0x83, 0x56, 0x42, 0xc2, 0x08, 0x4b, 0xc6, 0x9d, 0x56, 0xed, 0x5a, 0x0a, 0x3b, 0xda, 0x87,
	0x65, 0x73, 0x2e, 0x42, 0xde, 0xc6, 0xc4, 0x69, 0xd7, 0xc2, 0xcd, 0xd1, 0x8d, 0x14, 0x02, 0xfd,
	0x1c, 0x56, 0x0d, 0x81, 0x32, 0x6a, 0x49, 0x50, 0x4b, 0xea, 0x6a, 0xd8, 0x29, 0xa3, 0x86, 0xf7,
	0xb4, 0x38, 0x14, 0x43, 0x5a, 0xae, 0x25, 0xd9, 0x13, 0x31, 0x94, 0x5f, 0xc0, 0x9a, 0xa5, 0x4c,
	0xe6, 0xea, 0xd4, 0xd2, 0x56, 0x0c, 0xae, 0x98, 0xec, 0x19, 0xac, 0xbf, 0xc4, 0x71, 0x46, 0x7c,
	0x7c, 0x13, 0x09, 0xc3, 0x14, 0x4e, 0x77, 0x67, 0xbe, 0x86, 0xba, 0xaa, 0x81, 0x07, 0x37, 0x91,
	0xd0, 0x54, 0x81, 0x9e, 0xc3, 0x66, 0x89, 0x4b, 0x19, 0xb5, 0xf4, 0x95, 0x5a, 0x3a, 0x2a, 0xe8,
	0xa7, 0x39, 0x52, 0x29, 0x04, 0x58, 0x92, 0x31, 0xe3, 0xb7, 0x15, 0x07, 0x56, 0xeb, 0x15, 0x72,
	0x6c, 0xc9, 0x87, 0x23, 0x78, 0xa7, 0xaa, 0x30, 0x71, 0x63, 0xad, 0x56, 0x64, 0xab, 0x2c, 0x32,
	0xf1, 0xe4, 0x73, 0xd8, 0xb0, 0xb1, 0x2a, 0xaf, 0x48, 0x42, 0x72, 0x47, 0xd6, 0x6b, 0x35, 0xd6,
	0x0d, 0xf4, 0x5c, 0x21, 0xad, 0x1f, 0x2f, 0x60, 0xcb, 0xf2, 0x53, 0x1e, 0xbd, 0xc4, 0xb2, 0x50,
	0x40, 0xfa, 0x18, 0xde, 0xb3, 0x01, 0x9f, 0x62, 0x2e, 0x48, 0x21, 0x74, 0xc0, 0x39, 0xbe, 0xcd,
	0x23, 0xd2, 0xce, 0x7f, 0x66, 0xe8, 0x56, 0xf6, 0x04, 0xec, 0x5c, 0x93, 0x83, 0x15, 0xce, 0xc6,
	0xac, 0x92, 0x36, 0x9f, 0xf2, 0xc3, 0x16, 0xe8, 0x33, 0x58, 0x4b, 0x31, 0xc7, 0x63, 0x8e, 0xd3,
	0xab, 0x5c, 0x6d, 0xb3, 0xfe, 0xb0, 0x0b, 0x9c, 0xa5, 0xfe, 0x04, 0x50, 0x92, 0xc5, 0x32, 0x52,
	0xe9, 0x27, 0x88, 0xf4, 0x23, 0x1a, 0x92, 0x1b, 0x67, 0x6b, 0xa7, 0xb1, 0xdb, 0xf5, 0xd6, 0xcb,
	0x96, 0x63, 0x65, 0x40, 0x2f, 0x60, 0x97, 0x12, 0x12, 0x0a, 0x3f, 0xc0, 0x71, 0xe0, 0x13, 0x3a,
	0x8e, 0x28, 0x51, 0x29, 0x4c, 0x38, 0x27, 0xa1, 0x1f, 0x25, 0x29, 0xe3, 0xd2, 0xc7, 0xa6, 0x26,
	0x3c, 0xd0, 0xc9, 0xfc, 0x44, 0xe3, 0x07, 0x38, 0x0e, 0x0e, 0x35, 0x7a, 0x68, 0xc1, 0xc7, 0x1a,
	0x7b, 0xa0, 0xa1, 0xa5, 0xc2, 0xd9, 0x3f, 0x84, 0x66, 0x46, 0x23, 0x79, 0x8b, 0xb6, 0x4b, 0x29,
	0x3e, 0x55, 0x6f, 0x9d, 0xef, 0x4e, 0xf5, 0x5e, 0xa1, 0x12, 0xa4, 0x28, 0xc5, 0x9a, 0xed, 0xfe,
	0xb3, 0x01, 0x8f, 0xf5, 0xf8, 0x19, 0x16, 0x92, 0x5c, 0x30, 0xcc, 0xc3, 0x83, 0x30, 0x8c, 0xd4,
	0x6c, 0xc2, 0x42, 0xfb, 0x1e, 0x3c, 0x32, 0x25, 0xcd, 0xac, 0x5a, 0xd5, 0x59, 0x3f, 0x2d, 0xe0,
	0xa8, 0x46, 0xdd, 0x4c, 0xdc, 0xf5, 0x1c, 0xc3, 0xd3, 0x7b, 0x72, 0xc4, 0xf8, 0x64, 0x8e, 0xfe,
	0x19, 0x6c, 0x5b, 0xcd, 0x2c, 0x8b, 0xc2, 0x59, 0x24, 0xbf, 0x57, 0x92, 0x1d, 0xef, 0x1d, 0x43,
	0x7b, 0x91, 0x45, 0x61, 0x45, 0xd1, 0xfd, 0xc7, 0x1c, 0xac, 0x4d, 0xd7, 0x39, 0xf4, 0x10, 0x5a,
	0x9c, 0x5d, 0xfb, 0x54, 0x55, 0xf7, 0xc6, 0xce, 0xfc, 0x6e, 0xdb, 0x5b, 0xe2, 0xec, 0xfa, 0x54,
	0x95, 0xf1, 0xc7, 0xb0, 0x1c, 0xb0, 0x38, 0x4b, 0xa8, 0xb1, 0xce, 0x69, 0x2b, 0x98, 0x21, 0x0d,
	0xf8, 0x0c, 0x5a, 0xaa, 0x4a, 0xfa, 0x9c, 0x5d, 0x3b, 0xf3, 0x3a, 0x4a, 0x7e, 0x5c, 0x5f, 0x4d,
	0x7b, 0xea, 0xdb, 0x63, 0xd7, 0xde, 0xd2, 0xd8, 0x7c, 0x6c, 0xff, 0xad, 0x01, 0x4b, 0x76, 0x10,
	0x7d, 0x0e, 0x4d, 0x9d, 0xfa, 0x7a, 0xfe, 0xe5, 0xfe, 0xee, 0x9b, 0x35, 0xf4, 0xdf, 0xdf, 0x29,
	0xbc, 0x67, 0x68, 0xdb, 0x5f, 0x41, 0xbb, 0x18, 0x43, 0x4f, 0xa0, 0x4b, 0xb3, 0x84, 0xf0, 0x28,
	0xf0, 0x73, 0xd1, 0xc6, 0x6e, 0xc3, 0xeb, 0xd8, 0x41, 0x03, 0x7a, 0x17, 0x20, 0x54, 0x29, 0x68,
	0x10, 0x73, 0x1a, 0xd1, 0x56, 0x23, 0xda, 0xec, 0xfe, 0xbd, 0x61, 0xaf, 0xf0, 0x13, 0x5b, 0xdb,
	0xf3, 0xcd, 0x72, 0x61, 0x21, 0xa2, 0x97, 0xcc, 0xde, 0xe0, 0xd3, 0x29, 0xa1, 0x6d, 0xe8, 0xa7,
	0xb0, 0x19, 0xb3, 0x00, 0xc7, 0xbe, 0xcd, 0x4b, 0x1d, 0x11, 0x44, 0xe8, 0xed, 0xeb, 0x7a, 0x48,
	0xdb, 0xcc, 0xbd, 0x76, 0x6c, 0x2c, 0xea, 0x12, 0xe3, 0x24, 0x61, 0xaa, 0x24, 0x54, 0x29, 0xf3,
	0x9a, 0xb2, 0x61, 0x8c, 0x15, 0x8e, 0xfb, 0xdf, 0xfc, 0x2c, 0x75, 0xf6, 0x9d, 0x99, 0xfb, 0x74,
	0xea, 0x06, 0x6a, 0xdc, 0x7b, 0x03, 0x4d, 0xdf, 0x24, 0x73, 0xf7, 0xdf, 0x24, 0xb5, 0xf7, 0xc1,
	0xfc, 0xcc, 0xf7, 0x41, 0x6d, 0x35, 0x5f, 0x98, 0xb9, 0x9a, 0x7f, 0x0c, 0x5d, 0xbb, 0x47, 0x96,
	0xda, 0xac, 0xa5, 0x76, 0x0c, 0xe8, 0x0d, 0x45, 0x6d, 0x71, 0xb6, 0xa2, 0x86, 0x60, 0x41, 0x65,
	0x9f, 0xee, 0x15, 0x3a, 0x9e, 0xfe, 0x76, 0xff, 0xda, 0x80, 0x0d, 0x53, 0x10, 0xf4, 0xae, 0xe7,
	0x45, 0x40, 0xf9, 0x66, 0x76, 0xdf, 0xe4, 0x9f, 0xb0, 0xe1, 0xfc, 0x9a, 0x6f, 0x41, 0x89, 0xdb,
	0xff, 0x0d, 0xb4, 0xc9, 0x8d, 0x24, 0x54, 0xa8, 0x6e, 0x46, 0xf5, 0x55, 0xa3, 0x9e, 0xbe, 0x35,
	0xf2, 0x9c, 0xbe, 0xd1, 0x27, 0xf2, 0xb0, 0x94, 0x12, 0xd5, 0x59, 0xbd, 0x09, 0xdd, 0xfd, 0xcb,
	0x12, 0xbc, 0x7f, 0xc6, 0x59, 0x4a, 0xb8, 0xbc, 0xd5, 0x81, 0x3c, 0x92, 0x8c, 0xe3, 0x31, 0x19,
	0x98, 0x26, 0x88, 0x14, 0x61, 0xfc, 0xd6, 0x71, 0xf2, 0x09, 0xac, 0x14, 0x9d, 0xca, 0x9b, 0x22,
	0xa5, 0x68, 0x54, 0x44, 0x6d, 0x78, 0xcd, 0xdf, 0x1f, 0x5e, 0x9f, 0xc2, 0xea, 0xa4, 0x51, 0x31,
	0xac, 0x85, 0x7b, 0xfa, 0x14, 0x33, 0xd7, 0x49, 0x5d, 0x5c, 0x36, 0x67, 0xbe, 0x08, 0xa7, 0x43,
	0x75, 0x74, 0x47, 0xeb, 0xb2, 0x38, 0xab, 0x62, 0x5d, 0x37, 0x33, 0xba, 0x23, 0xfe, 0x97, 0x66,
	0x16, 0xad, 0x49, 0x89, 0xaf, 0xef, 0x6e, 0x70, 0x5a, 0xb3, 0xea, 0xde, 0xd1, 0xf3, 0xfc, 0xb6,
	0xbe, 0xe7, 0x69, 0xcf, 0x2a, 0xfb, 0x36, 0x6d, 0x10, 0xfc, 0xa0, 0x36, 0xe8, 0xcb, 0xe2, 0x25,
	0x31, 0x59, 0xfd, 0xf2, 0xdb, 0x77, 0x41, 0xa2, 0x50, 0x7b, 0xad, 0x60, 0x74, 0x66, 0x56, 0x9b,
	0xaa, 0x21, 0xee, 0xbf, 0x1a, 0xb0, 0x6d, 0xaa, 0x74, 0x71, 0x15, 0xab, 0x77, 0x48, 0x9e, 0x8c,
	0x1f, 0x56, 0x9f, 0x85, 0xa6, 0x06, 0x68, 0x7c, 0xf5, 0x4d, 0x88, 0xbe, 0x82, 0xae, 0xf6, 0xc5,
	0xa7, 0x44, 0x5e, 0x33, 0xfe, 0xad, 0xcd, 0xc1, 0x3d, 0xe3, 0xd2, 0x2c, 0x89, 0xef, 0x75, 0xb4,
	0xc0, 0xa9, 0xe1, 0xa3, 0x4f, 0xc1, 0x09, 0x58, 0x1a, 0x11, 0xf5, 0xb8, 0x63, 0x89, 0x4f, 0xa8,
	0x8c, 0x38, 0xf1, 0x75, 0x0a, 0xeb, 0x54, 0x6d, 0x79, 0x5b, 0xc6, 0x7e, 0xc4, 0x59, 0x72, 0xa8,
	0xad, 0xba, 0x02, 0xb9, 0x5f, 0xc3, 0xbb, 0xe6, 0xee, 0x21, 0xb1, 0x79, 0x87, 0x9d, 0x61, 0x79,
	0xa5, 0xde, 0x9a, 0xf9, 0x9a, 0x1e, 0x41, 0x3b, 0xc5, 0xf2, 0x6a, 0xf2, 0x42, 0x6d, 0x7b, 0xad,
	0xd4, 0x62, 0x0a, 0xa3, 0x6d, 0x2a, 0x0a, 0xa3, 0x6a, 0x29, 0xdc, 0x3f, 0x00, 0x32, 0x3d, 0xcd,
	0x4d, 0x24, 0x8e, 0xf3, 0x77, 0x38, 0xfa, 0x08, 0xda, 0x3a, 0xb4, 0x4b, 0x2f, 0xde, 0x15, 0xb3,
	0x6c, 0x85, 0xd3, 0x0f, 0xde, 0x16, 0xb6, 0x5f, 0xc8, 0x81, 0x25, 0xc6, 0xc3, 0x88, 0xe2, 0x58,
	0xab, 0x77, 0xbd, 0xfc, 0x5f, 0x97, 0xc2, 0x7b, 0xaf, 0xfb, 0x7d, 0xc0, 0xc7, 0x59, 0x42, 0x68,
	0xf1, 0xbc, 0x7e, 0x00, 0x8b, 0x34, 0x4b, 0x2e, 0xec, 0x81, 0x74, 0x3d, 0xfb, 0x1f, 0x7a, 0x0a,
	0x4b, 0xda, 0x87, 0x28, 0xb4, 0x1b, 0xef, 0x94, 0x5b, 0xb0, 0xb2, 0xbb, 0xde, 0xa2, 0x02, 0x1e,
	0x87, 0xee, 0xbf, 0x1b, 0xf0, 0xb0, 0x6e, 0x42, 0x33, 0xd1, 0xf3, 0xe9, 0x4d, 0x5a, 0xee, 0x3f,
	0x29, 0x49, 0xde, 0xb5, 0xb9, 0xa5, 0x9d, 0x1c, 0x42, 0x57, 0x64, 0x17, 0xbe, 0xc8, 0x91, 0xd6,
	0xb1, 0xc7, 0x77, 0xa9, 0x4c, 0xc2, 0x20, 0xbb, 0x28, 0x0c, 0xe8, 0x10, 0xda, 0xd8, 0xee, 0x41,
	0x7e, 0x93, 0x7f, 0x78, 0xb7, 0x42, 0x65, 0xb3, 0xbc, 0x09, 0xd3, 0x95, 0xb0, 0x55, 0xc5, 0xe7,
	0xeb, 0x7c, 0x1f, 0x9a, 0x26, 0xa6, 0xea, 0xef, 0x19, 0x63, 0x44, 0x9f, 0x40, 0x53, 0xad, 0xcb,
	0xf4, 0x49, 0x33, 0xac, 0xc1, 0xa0, 0xdd, 0xff, 0x34, 0xec, 0xaf, 0x23, 0x2f, 0x8e, 0x47, 0x12,
	0xcb, 0x59, 0x67, 0x7b, 0x0a, 0x5b, 0x41, 0x48, 0xfc, 0x18, 0x0b, 0xa9, 0xba, 0x57, 0xbb, 0x85,
	0xc4, 0x1c, 0x6d, 0xd3, 0x43, 0x41, 0x48, 0xbe, 0xc4, 0x42, 0x7a, 0xec, 0x7a, 0x64, 0x2d, 0x15,
	0x4a, 0xc0, 0xe2, 0x09, 0x65, 0xbe, 0x42, 0x19, 0xb0, 0xb8, 0xa0, 0x7c, 0x04, 0xa8, 0x32, 0x4b,
	0xc0, 0x32, 0x6a, 0x7e, 0x13, 0x69, 0x7a, 0xab, 0x93, 0x29, 0x06, 0x6a, 0xb8, 0x02, 0x56, 0xfa,
	0x06, 0xdc, 0xac, 0x80, 0x07, 0x2c, 0xd6, 0x60, 0xf7, 0x4f, 0x0d, 0x78, 0xa4, 0x97, 0x6d, 0x7e,
	0xa7, 0x19, 0x49, 0x9e, 0x05, 0xf2, 0x30, 0xef, 0x04, 0x44, 0xff, 0xa9, 0xfe, 0x05, 0xe6, 0x32,
	0xba, 0x41, 0x2a, 0x4a, 0xbf, 0xe8, 0x95, 0x61, 0x95, 0x17, 0x48, 0xdb, 0xb3, 0x40, 0x45, 0x11,
	0xd9, 0xe5, 0x9b, 0x29, 0xdf, 0x5b, 0x8a, 0x01, 0x3e, 0xfb, 0x06, 0x1e, 0x8b, 0x80, 0x50, 0xf2,
	0x71, 0xe8, 0x0b, 0x22, 0x65, 0x44, 0xc7, 0xc2, 0x0f, 0x54, 0x15, 0xc5, 0x54, 0xfa, 0x21, 0x49,
	0xe5, 0x55, 0xed, 0x3b, 0xe5, 0xcf, 0xa7, 0xba, 0xb8, 0xfc, 0xc8, 0x72, 0x47, 0x96, 0x3a, 0xb0,
	0xcc, 0xa1, 0x22, 0xfe, 0x72, 0xf7, 0x9b, 0x0f, 0xc6, 0x91, 0xbc, 0xca, 0x2e, 0x7a, 0x01, 0x4b,
	0xf6, 0xff, 0x18, 0x25, 0x17, 0xf8, 0x02, 0xb3, 0xfd, 0x90, 0x05, 0x01, 0xa3, 0x2f, 0xf7, 0xa3,
	0xdf, 0x33, 0xfe, 0xed, 0xbe, 0xd2, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0xc6, 0xf9,
	0xf3, 0xf1, 0x13, 0x00, 0x00,
}
